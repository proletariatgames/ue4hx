/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Used to capture a 'snapshot' of the scene from a 6 planes and feed it to a render target.
**/
@:glueCppIncludes("Components/SceneCaptureComponentCube.h")
@:uextern @:uclass extern class USceneCaptureComponentCube extends unreal.USceneCaptureComponent {
  @:uproperty public var IPD : unreal.Float32;
  @:uproperty public var TextureTargetODS : unreal.UTextureRenderTarget2D;
  @:uproperty public var TextureTargetRight : unreal.UTextureRenderTargetCube;
  
  /**
    Omni-directional Stereo Capture
    
    If vr.ODSCapture is enabled and both left, right and ODS render targets are set,
    we'll ignore the texture target and instead do an omni-directional stereo capture.
    Warped cube maps will be rendered into the left and right texture targets using the
    IPD property for stereo offset. We will then reconstruct a stereo lat-long with the left
    eye stacked on top of the right eye in the ODS target.
    See: https://developers.google.com/vr/jump/rendering-ods-content.pdf
  **/
  @:uproperty public var TextureTargetLeft : unreal.UTextureRenderTargetCube;
  
  /**
    Temporary render target that can be used by the editor.
  **/
  @:uproperty public var TextureTarget : unreal.UTextureRenderTargetCube;
  
  /**
    Render the scene to the texture target immediately.
    This should not be used if bCaptureEveryFrame is enabled, or the scene capture will render redundantly.
  **/
  @:ufunction(BlueprintCallable) @:final public function CaptureScene() : Void;
  
}
