/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Replicated movement data of our RootComponent.
  Struct used for efficient replication as velocity and location are generally replicated together (this saves a repindex)
  and velocity.Z is commonly zero (most position replications are for walking pawns).
**/
@:glueCppIncludes("Classes/Engine/EngineTypes.h")
@:uextern @:ustruct extern class FRepMovement {
  
  /**
    Allows tuning the compression level for replicated rotation. You should only need to change this from the default if you see visual artifacts.
  **/
  @:uproperty public var RotationQuantizationLevel : unreal.ERotatorQuantization;
  
  /**
    Allows tuning the compression level for the replicated velocity vectors. You should only need to change this from the default if you see visual artifacts.
  **/
  @:uproperty public var VelocityQuantizationLevel : unreal.EVectorQuantization;
  
  /**
    Allows tuning the compression level for the replicated location vector. You should only need to change this from the default if you see visual artifacts.
  **/
  @:uproperty public var LocationQuantizationLevel : unreal.EVectorQuantization;
  
  /**
    If set, additional physic data (angular velocity) will be replicated.
  **/
  @:uproperty public var bRepPhysics : Bool;
  
  /**
    If set, RootComponent should be sleeping.
  **/
  @:uproperty public var bSimulatedPhysicSleep : Bool;
  @:uproperty public var Rotation : unreal.FRotator;
  @:uproperty public var Location : unreal.FVector;
  @:uproperty public var AngularVelocity : unreal.FVector;
  @:uproperty public var LinearVelocity : unreal.FVector;
  
}
