/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Default physics settings.
**/
@:glueCppIncludes("PhysicsEngine/PhysicsSettings.h")
@:uextern @:uclass extern class UPhysicsSettings extends unreal.UDeveloperSettings {
  
  /**
    If we want to Enable MPB or not globally. This is then overridden by project settings if not enabled. *
  **/
  @:uproperty public var DefaultBroadphaseSettings : unreal.FBroadphaseSettings;
  
  /**
    PhysicalMaterial Surface Types
  **/
  @:uproperty public var PhysicalSurfaces : unreal.TArray<unreal.FPhysicalSurfaceName>;
  
  /**
    The number of frames it takes to rebuild the PhysX scene query AABB tree. The bigger the number, the smaller fetchResults takes per frame, but the more the tree deteriorates until a new tree is built
  **/
  @:uproperty public var PhysXTreeRebuildRate : unreal.Int32;
  
  /**
    Physics delta time initial average.
  **/
  @:uproperty public var InitialAverageFrameRate : unreal.Float32;
  
  /**
    Physics delta time smoothing factor for async scene.
  **/
  @:uproperty public var AsyncSceneSmoothingFactor : unreal.Float32;
  
  /**
    Physics delta time smoothing factor for sync scene.
  **/
  @:uproperty public var SyncSceneSmoothingFactor : unreal.Float32;
  
  /**
    Max number of substeps for physics simulation.
  **/
  @:uproperty public var MaxSubsteps : unreal.Int32;
  
  /**
    Max delta time (in seconds) for an individual simulation substep.
  **/
  @:uproperty public var MaxSubstepDeltaTime : unreal.Float32;
  
  /**
    Whether to substep the async physics simulation. This feature is still experimental. Certain functionality might not work correctly
  **/
  @:uproperty public var bSubsteppingAsync : Bool;
  
  /**
    Whether to substep the physics simulation. This feature is still experimental. Certain functionality might not work correctly
  **/
  @:uproperty public var bSubstepping : Bool;
  
  /**
    Max Physics Delta Time to be clamped.
  **/
  @:uproperty public var MaxPhysicsDeltaTime : unreal.Float32;
  
  /**
    If set to true, the scene will use enhanced determinism at the cost of a bit more resources. See eENABLE_ENHANCED_DETERMINISM to learn about the specifics
  **/
  @:uproperty public var bEnableEnhancedDeterminism : Bool;
  
  /**
    If true CCD will be ignored. This is an optimization when CCD is never used which removes the need for physx to check it internally.
  **/
  @:uproperty public var bDisableCCD : Bool;
  
  /**
    Whether to disable generating KK pairs, enabling this speeds up contact generation, however it is required when using APEX destruction.
  **/
  @:uproperty public var bDisableKinematicKinematicPairs : Bool;
  
  /**
    Whether to disable generating KS pairs, enabling this makes switching between dynamic and static slower for actors - but speeds up contact generation by early rejecting these pairs
  **/
  @:uproperty public var bDisableKinematicStaticPairs : Bool;
  
  /**
    If true, physx will not update unreal with any bodies that have moved during the simulation. This should only be used if you have no physx simulation or you are manually updating the unreal data via polling physx.
  **/
  @:uproperty public var bDisableActiveActors : Bool;
  
  /**
    If true, store extra information to allow FindCollisionUV to derive UV info from a line trace hit result, using the FindCollisionUV utility
  **/
  @:uproperty public var bSupportUVFromHitResults : Bool;
  
  /**
    If true, the internal physx face to UE face mapping will not be generated. This is a memory optimization available if you do not rely on face indices returned by scene queries.
  **/
  @:uproperty public var bSuppressFaceRemapTable : Bool;
  
  /**
    If true, static meshes will use per poly collision as complex collision by default. If false the default behavior is the same as UseSimpleAsComplex.
  **/
  @:deprecated @:uproperty public var bDefaultHasComplexCollision_DEPRECATED : Bool;
  
  /**
    Determines the default physics shape complexity.
  **/
  @:uproperty public var DefaultShapeComplexity : unreal.ECollisionTraceFlag;
  
  /**
    If true, simulate physics for this component on a dedicated server.
    This should be set if simulating physics and replicating with a dedicated server.
  **/
  @:uproperty public var bSimulateSkeletalMeshOnDedicatedServer : Bool;
  
  /**
    Max Contact offset.
  **/
  @:uproperty public var MaxContactOffset : unreal.Float32;
  
  /**
    Min Contact offset.
  **/
  @:uproperty public var MinContactOffset : unreal.Float32;
  
  /**
    Contact offset multiplier. When creating a physics shape we look at its bounding volume and multiply its minimum value by this multiplier. A bigger number will generate contact points earlier which results in higher stability at the cost of performance.
  **/
  @:uproperty public var ContactOffsetMultiplier : unreal.Float32;
  
  /**
    Max velocity which may be used to depenetrate simulated physics objects. 0 means no maximum.
  **/
  @:uproperty public var MaxDepenetrationVelocity : unreal.Float32;
  
  /**
    Max angular velocity that a simulated object can achieve.
  **/
  @:uproperty public var MaxAngularVelocity : unreal.Float32;
  
  /**
    Restitution combine mode, controls how restitution is computed for multiple materials.
  **/
  @:uproperty public var RestitutionCombineMode : unreal.EFrictionCombineMode;
  
  /**
    Friction combine mode, controls how friction is computed for multiple materials.
  **/
  @:uproperty public var FrictionCombineMode : unreal.EFrictionCombineMode;
  
  /**
    Minimum relative velocity required for an object to bounce. A typical value for simulation stability is about 0.2 * gravity
  **/
  @:uproperty public var BounceThresholdVelocity : unreal.Float32;
  
  /**
    Useful for constraining all objects in the world, for example if you are making a 2D game using 3D environments.
  **/
  @:uproperty public var DefaultDegreesOfFreedom : unreal.ESettingsDOF;
  @:deprecated @:uproperty public var LockedAxis_DEPRECATED : unreal.ESettingsLockedAxis;
  
  /**
    Error correction data for replicating simulated physics (rigid bodies)
  **/
  @:uproperty public var PhysicErrorCorrection : unreal.FRigidBodyErrorCorrection;
  
  /**
    Can 2D physics be used (Box2D)?
  **/
  @:uproperty public var bEnable2DPhysics : Bool;
  
  /**
    Whether to warn when physics locks are used incorrectly. Turning this off is not recommended and should only be used by very advanced users.
  **/
  @:uproperty public var bWarnMissingLocks : Bool;
  
  /**
    Enables stabilization of contacts for slow moving bodies. This will help improve the stability of stacking.
  **/
  @:uproperty public var bEnableStabilization : Bool;
  
  /**
    Enables persistent contact manifolds. This will generate fewer contact points, but with more accuracy. Reduces stability of stacking, but can help energy conservation.
  **/
  @:uproperty public var bEnablePCM : Bool;
  
  /**
    Enables shape sharing between sync and async scene for static rigid actors
  **/
  @:uproperty public var bEnableShapeSharing : Bool;
  
  /**
    Enables the use of an async scene
  **/
  @:uproperty public var bEnableAsyncScene : Bool;
  
  /**
    Triangles from triangle meshes (BSP) with an area less than or equal to this value will be removed from physics collision data. Set to less than 0 to disable.
  **/
  @:uproperty public var TriangleMeshTriangleMinAreaThreshold : unreal.Float32;
  
  /**
    Threshold for ragdoll bodies above which they will be added to an aggregate before being added to the scene
  **/
  @:uproperty public var RagdollAggregateThreshold : unreal.Int32;
  
  /**
    Amount of memory to reserve for PhysX simulate(), this is per pxscene and will be rounded up to the next 16K boundary
  **/
  @:uproperty public var SimulateScratchMemorySize : unreal.Int32;
  
  /**
    Default fluid friction for Physics Volumes.
  **/
  @:uproperty public var DefaultFluidFriction : unreal.Float32;
  
  /**
    Default terminal velocity for Physics Volumes.
  **/
  @:uproperty public var DefaultTerminalVelocity : unreal.Float32;
  
  /**
    Default gravity.
  **/
  @:uproperty public var DefaultGravityZ : unreal.Float32;
  
}
