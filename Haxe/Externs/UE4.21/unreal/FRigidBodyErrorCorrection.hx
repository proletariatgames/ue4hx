/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Rigid body error correction data
**/
@:glueCppIncludes("Classes/Engine/EngineTypes.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FRigidBodyErrorCorrection {
  
  /**
    If the previous error projected onto the current error
                  is greater than this value (indicating "similarity"
                  between states), then error may accumulate towards a
                  hard snap.
  **/
  @:uproperty public var ErrorAccumulationSimilarity : unreal.Float32;
  
  /**
    If the body has moved less than the square root of
                  this amount towards a resolved state in the previous
                  frame, then error may accumulate towards a hard snap.
  **/
  @:uproperty public var ErrorAccumulationDistanceSq : unreal.Float32;
  
  /**
    Number of seconds to remain in a heuristically
                  unresolveable state before hard snapping.
  **/
  @:uproperty public var ErrorAccumulationSeconds : unreal.Float32;
  
  /**
    This is the angular analog to LinearVelocityCoefficient.
  **/
  @:uproperty public var AngularVelocityCoefficient : unreal.Float32;
  
  /**
    This is the coefficient `k` in the differential equation:
                  dx/dt = k ( x_target(t) - x(t) ), which is used to update
                  the velocity in a replication step.
  **/
  @:uproperty public var LinearVelocityCoefficient : unreal.Float32;
  
  /**
    How much to directly lerp to the correct angle.
  **/
  @:uproperty public var AngleLerp : unreal.Float32;
  
  /**
    How much to directly lerp to the correct position. Generally
                  this should be very low, if not zero. A higher value will
                  increase precision along with jerkiness.
  **/
  @:uproperty public var PositionLerp : unreal.Float32;
  @:uproperty public var MaxLinearHardSnapDistance : unreal.Float32;
  
  /**
    Maximum allowable error for a state to be considered "resolved"
  **/
  @:uproperty public var MaxRestoredStateError : unreal.Float32;
  
  /**
    Error per degree
  **/
  @:uproperty public var ErrorPerAngularDifference : unreal.Float32;
  
  /**
    Error per centimeter
  **/
  @:uproperty public var ErrorPerLinearDifference : unreal.Float32;
  
  /**
    For the purpose of extrapolation, ping will be clamped to this value
  **/
  @:uproperty public var PingLimit : unreal.Float32;
  
  /**
    Value between 0 and 1 which indicates how much velocity
                  and ping based correction to use
  **/
  @:uproperty public var PingExtrapolation : unreal.Float32;
  
}
