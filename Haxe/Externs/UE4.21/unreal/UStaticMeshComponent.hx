/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  StaticMeshComponent is used to create an instance of a UStaticMesh.
  A static mesh is a piece of geometry that consists of a static set of polygons.
  
  @see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/
  @see UStaticMesh
**/
@:glueCppIncludes("Components/StaticMeshComponent.h")
@:uextern @:uclass extern class UStaticMeshComponent extends unreal.UMeshComponent {
  
  /**
    The Lightmass settings for this object.
  **/
  @:uproperty public var LightmassSettings : unreal.FLightmassPrimitiveSettings;
  #if WITH_EDITORONLY_DATA
  
  /**
    Material Bounds used for texture streaming.
  **/
  @:uproperty public var MaterialStreamingRelativeBoxes : unreal.TArray<unreal.FakeUInt32>;
  
  /**
    Derived data key of the static mesh, used to determine if an update from the source static mesh is required.
  **/
  @:uproperty public var StaticMeshDerivedDataKey : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The list of texture, bounds and scales. As computed in the texture streaming build process.
  **/
  @:uproperty public var StreamingTextureData : unreal.TArray<unreal.FStreamingTextureBuildInfo>;
  #if WITH_EDITORONLY_DATA
  @:deprecated @:uproperty public var IrrelevantLights_DEPRECATED : unreal.TArray<unreal.FGuid>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Allows adjusting the desired resolution of streaming textures that uses UV 0.  1.0 is the default, whereas a higher value increases the streamed-in resolution.
  **/
  @:uproperty public var StreamingDistanceMultiplier : unreal.Float32;
  
  /**
    Useful for reducing self shadowing from distance field methods when using world position offset to animate the mesh's vertices.
  **/
  @:uproperty public var DistanceFieldSelfShadowBias : unreal.Float32;
  
  /**
    Controls how dark the dynamic indirect shadow can be.
  **/
  @:uproperty public var DistanceFieldIndirectShadowMinVisibility : unreal.Float32;
  
  /**
    Light map resolution to use on this component, used if bOverrideLightMapRes is true and there is a valid StaticMesh.
  **/
  @:uproperty public var OverriddenLightMapRes : unreal.Int32;
  
  /**
    Controls whether the static mesh component's backface culling should be reversed
  **/
  @:uproperty public var bReverseCulling : Bool;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var bDisplayVertexColors : Bool;
  
  /**
    The component has some custom painting on LODs or not.
  **/
  @:uproperty public var bCustomOverrideVertexColorPerLOD : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Use the collision profile specified in the StaticMesh asset.
  **/
  @:uproperty public var bUseDefaultCollision : Bool;
  
  /**
    Whether to use subdivisions or just the triangle's vertices.
  **/
  @:uproperty public var bUseSubDivisions : Bool;
  
  /**
    Whether to override the DistanceFieldSelfShadowBias setting of the static mesh asset with the DistanceFieldSelfShadowBias of this component.
  **/
  @:uproperty public var bOverrideDistanceFieldSelfShadowBias : Bool;
  
  /**
    Whether to use the mesh distance field representation (when present) for shadowing indirect lighting (from lightmaps or skylight) on Movable components.
    This works like capsule shadows on skeletal meshes, except using the mesh distance field so no physics asset is required.
    The StaticMesh must have 'Generate Mesh Distance Field' enabled, or the project must have 'Generate Mesh Distance Fields' enabled for this feature to work.
  **/
  @:uproperty public var bCastDistanceFieldIndirectShadow : Bool;
  
  /**
    Whether to override the lightmap resolution defined in the static mesh.
  **/
  @:uproperty public var bOverrideLightMapRes : Bool;
  
  /**
    Ignore this instance of this static mesh when calculating streaming information.
    This can be useful when doing things like applying character textures to static geometry,
    to avoid them using distance-based streaming.
  **/
  @:uproperty public var bIgnoreInstanceForTextureStreaming : Bool;
  
  /**
    If true, mesh painting is disallowed on this instance. Set if vertex colors are overridden in a construction script.
  **/
  @:uproperty public var bDisallowMeshPaintPerInstance : Bool;
  
  /**
    Allows overriding navigation export behavior per component: full collisions or dynamic obstacle
  **/
  @:uproperty public var bForceNavigationObstacle : Bool;
  
  /**
    If true, bForceNavigationObstacle flag will take priority over navigation data stored in StaticMesh
  **/
  @:uproperty public var bOverrideNavigationExport : Bool;
  
  /**
    Whether to override the MinLOD setting of the static mesh asset with the MinLOD of this component.
  **/
  @:uproperty public var bOverrideMinLOD : Bool;
  
  /**
    If true, WireframeColorOverride will be used. If false, color is determined based on mobility and physics simulation settings
  **/
  @:uproperty public var bOverrideWireframeColor : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    * The import version of the static mesh when it was assign this is update when:
    * - The user assign a new staticmesh to the component
    * - The component is serialize (IsSaving)
    * - Default value is BeforeImportStaticMeshVersionWasAdded
    *
    * If when the component get load (PostLoad) the version of the attach staticmesh is newer
    * then this value, we will remap the material override because the order of the materials list
    * in the staticmesh can be changed. Hopefully there is a remap table save in the staticmesh.
  **/
  @:uproperty public var StaticMeshImportVersion : unreal.Int32;
  
  /**
    Index of the material to preview. If set to INDEX_NONE, all section will be rendered. Used for isolating in Static Mesh Tool *
  **/
  @:uproperty public var MaterialIndexPreview : unreal.Int32;
  
  /**
    Index of the section to preview. If set to INDEX_NONE, all section will be rendered. Used for isolating in Static Mesh Tool *
  **/
  @:uproperty public var SectionIndexPreview : unreal.Int32;
  
  /**
    The material currently selected in the Editor. Used for highlighting
  **/
  @:uproperty public var SelectedEditorMaterial : unreal.Int32;
  
  /**
    The section currently selected in the Editor. Used for highlighting
  **/
  @:uproperty public var SelectedEditorSection : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Wireframe color to use if bOverrideWireframeColor is true
  **/
  @:uproperty public var WireframeColorOverride : unreal.FColor;
  
  /**
    Subdivision step size for static vertex lighting.
  **/
  @:uproperty public var SubDivisionStepSize : unreal.Int32;
  
  /**
    Specifies the smallest LOD that will be used for this component.
    This is ignored if ForcedLodModel is enabled.
  **/
  @:uproperty public var MinLOD : unreal.Int32;
  
  /**
    LOD that was desired for rendering this StaticMeshComponent last frame.
  **/
  @:uproperty public var PreviousLODLevel : unreal.Int32;
  
  /**
    If 0, auto-select LOD level. if >0, force to (ForcedLodModel-1).
  **/
  @:uproperty public var ForcedLodModel : unreal.Int32;
  @:ufunction @:final public function OnRep_StaticMesh(OldStaticMesh : unreal.UStaticMesh) : Void;
  
  /**
    Change the StaticMesh used by this instance.
  **/
  @:ufunction(BlueprintCallable) public function SetStaticMesh(NewMesh : unreal.UStaticMesh) : Bool;
  @:ufunction(BlueprintCallable) @:final public function SetForcedLodModel(NewForcedLodModel : unreal.Int32) : Void;
  
  /**
    Sets the component's DistanceFieldSelfShadowBias.  bOverrideDistanceFieldSelfShadowBias must be enabled for this to have an effect.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDistanceFieldSelfShadowBias(NewValue : unreal.Float32) : Void;
  
  /**
    Get Local bounds
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLocalBounds(Min : unreal.PRef<unreal.FVector>, Max : unreal.PRef<unreal.FVector>) : Void;
  
  /**
    Set forced reverse culling
  **/
  @:ufunction(BlueprintCallable) @:final public function SetReverseCulling(ReverseCulling : Bool) : Void;
  
}
