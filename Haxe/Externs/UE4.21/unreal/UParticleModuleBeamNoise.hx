/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Particles/Beam/ParticleModuleBeamNoise.h")
@:uextern @:uclass extern class UParticleModuleBeamNoise extends unreal.UParticleModuleBeamBase {
  
  /**
    The scale factor to apply to noise range.
    The lookup value is determined by dividing the number of noise points present by the
    maximum number of noise points (Frequency).
  **/
  @:uproperty public var NoiseScale : unreal.FRawDistributionFloat;
  
  /**
    If true, apply the noise scale to the beam.
  **/
  @:uproperty public var bApplyNoiseScale : Bool;
  
  /**
    The distance at which to deposit noise points.
    If 0.0, then use the static frequency value.
    If not, distribute noise points at the given distance, up to the static Frequency value.
    At that point, evenly distribute them along the beam.
  **/
  @:uproperty public var FrequencyDistance : unreal.Float32;
  
  /**
    Whether to apply noise to the target point (or end of line in distance mode...)
    If true, the beam could potentially 'leave' the target...
  **/
  @:uproperty public var bTargetNoise : Bool;
  
  /**
    The amount of tessellation between noise points.
  **/
  @:uproperty public var NoiseTessellation : unreal.Int32;
  
  /**
    The strength of noise tangents, if enabled.
  **/
  @:uproperty public var NoiseTangentStrength : unreal.FRawDistributionFloat;
  
  /**
    If true, calculate tangents at each noise point.
  **/
  @:uproperty public var bUseNoiseTangents : Bool;
  
  /**
    The tension to apply to the tessellated noise line.
  **/
  @:uproperty public var NoiseTension : unreal.Float32;
  
  /**
    How long the  noise points should be locked - 0.0 indicates forever.
  **/
  @:uproperty public var NoiseLockTime : unreal.Float32;
  
  /**
    Whether the noise points should be oscillate.
  **/
  @:uproperty public var bOscillate : Bool;
  
  /**
    INTERNAL - Whether the noise points should be locked.
  **/
  @:uproperty public var bNoiseLock : Bool;
  
  /**
    Default target-point information to use if the beam method is endpoint.
  **/
  @:uproperty public var NoiseLockRadius : unreal.Float32;
  
  /**
    Whether the noise movement should be smooth or 'jerky'.
  **/
  @:uproperty public var bSmooth : Bool;
  
  /**
    The speed with which to move each noise point.
  **/
  @:uproperty public var NoiseSpeed : unreal.FRawDistributionVector;
  
  /**
    If true,  the NoiseRangeScale will be grabbed based on the emitter time.
    If false, the NoiseRangeScale will be grabbed based on the particle time.
  **/
  @:uproperty public var bNRScaleEmitterTime : Bool;
  
  /**
    A scale factor that will be applied to the noise range.
  **/
  @:uproperty public var NoiseRangeScale : unreal.FRawDistributionFloat;
  
  /**
    The noise point ranges.
  **/
  @:uproperty public var NoiseRange : unreal.FRawDistributionVector;
  
  /**
    If not 0, then the frequency will select a random value in the range
            [Frequency_LowRange..Frequency]
  **/
  @:uproperty public var Frequency_LowRange : unreal.Int32;
  
  /**
    The frequency of noise points.
  **/
  @:uproperty public var Frequency : unreal.Int32;
  
  /**
    Is low frequency noise enabled.
  **/
  @:uproperty public var bLowFreq_Enabled : Bool;
  
}
