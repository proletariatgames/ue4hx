/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.headmounteddisplay;

@:umodule("HeadMountedDisplay")
@:glueCppIncludes("MotionTrackedDeviceFunctionLibrary.h")
@:uextern @:uclass extern class UMotionTrackedDeviceFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Returns true if it is necessary for the game to manage how many motion tracked devices it is asking to be tracked simultaneously.
    On some platforms this is unnecessary because all supported devices can be tracked simultaneously.
    
    @return (Boolean) true if the game might need to manage which motion tracked devices are actively tracked.
  **/
  @:ufunction(BlueprintCallable) static public function IsMotionTrackedDeviceCountManagementNecessary() : Bool;
  
  /**
    Set whether motion tracked controllers activate on creation by default, or do not and must be explicitly activated.
    
    @param Require                                        (in) True means controllers are enabled by default.  Enables beyond the controller count limit will fail.
  **/
  @:ufunction(BlueprintCallable) static public function SetIsControllerMotionTrackingEnabledByDefault(Enable : Bool) : Void;
  
  /**
    Get the maximum number of controllers that can be tracked.
    
    @return (int) number of controllers that can be tracked, or -1 if there is no limit (IsMotionTrackedDeviceCountManagementNecessary() should return false).
  **/
  @:ufunction(BlueprintCallable) static public function GetMaximumMotionTrackedControllerCount() : unreal.Int32;
  
  /**
    Get the number of controllers for which tracking is enabled.
    
    @return (int) number of controllers tracked now, or -1 if this query is unsupported (IsMotionTrackedDeviceCountManagementNecessary() should return false).
  **/
  @:ufunction(BlueprintCallable) static public function GetMotionTrackingEnabledControllerCount() : unreal.Int32;
  
  /**
    Returns true if tracking is enabled for the specified device.
    
    @param PlayerIndex                                   (in) The index of the player.
    @param Hand                                                  (in) The tracked device type.
    
    @return (Boolean) true if the specified device is set to be tracked.
  **/
  @:ufunction(BlueprintCallable) static public function IsMotionTrackingEnabledForDevice(PlayerIndex : unreal.Int32, Hand : unreal.inputcore.EControllerHand) : Bool;
  
  /**
    Returns true if tracking is enabled for the specified device.
    
    @param PlayerIndex                                   (in) The index of the player.
    @param SourceName                                    (in) The tracked device id.
    
    @return (Boolean) true if the specified device is set to be tracked.
  **/
  @:ufunction(BlueprintCallable) static public function IsMotionTrackingEnabledForSource(PlayerIndex : unreal.Int32, SourceName : unreal.FName) : Bool;
  
  /**
    Returns true if tracking is enabled for the specified device.
    
    @param MotionControllerComponent              (in) The motion controller component who's associated device is targeted.
    
    @return (Boolean) true if the specified device is set to be tracked.
  **/
  @:ufunction(BlueprintCallable) static public function IsMotionTrackingEnabledForComponent(MotionControllerComponent : unreal.Const<unreal.headmounteddisplay.UMotionControllerComponent>) : Bool;
  
  /**
    Enable tracking of the specified controller, by player index and tracked device type.
    
    @param PlayerIndex                                   (in) The index of the player.
    @param Hand                                                  (in) The device type.
    
    @return (Boolean) true if the specified device is now set to be tracked.  This could fail due to tracking limits, or on invalid input.
  **/
  @:ufunction(BlueprintCallable) static public function EnableMotionTrackingOfDevice(PlayerIndex : unreal.Int32, Hand : unreal.inputcore.EControllerHand) : Bool;
  
  /**
    Enable tracking of the specified controller, by player index and tracked device type.
    
    @param PlayerIndex                                   (in) The index of the player.
    @param SourceName                                    (in) The device id.
    
    @return (Boolean) true if the specified device is now set to be tracked.  This could fail due to tracking limits, or on invalid input.
  **/
  @:ufunction(BlueprintCallable) static public function EnableMotionTrackingOfSource(PlayerIndex : unreal.Int32, SourceName : unreal.FName) : Bool;
  
  /**
    Enable tracking of the specified controller, by player index and tracked device type.
    
    @param MotionControllerComponent              (in) The motion controller component who's associated device is targeted.
    
    @return (Boolean) true if the specified device is now set to be tracked.  This could fail due to tracking limits, or on invalid input.
  **/
  @:ufunction(BlueprintCallable) static public function EnableMotionTrackingForComponent(MotionControllerComponent : unreal.headmounteddisplay.UMotionControllerComponent) : Bool;
  
  /**
    Disable tracking of the specified controller, by player index and tracked device type.
    
    @param PlayerIndex                                   (in) The index of the player.
    @param Hand                                                  (in) The tracked device type.
  **/
  @:ufunction(BlueprintCallable) static public function DisableMotionTrackingOfDevice(PlayerIndex : unreal.Int32, Hand : unreal.inputcore.EControllerHand) : Void;
  
  /**
    Disable tracking of the specified controller, by player index and tracked device type.
    
    @param PlayerIndex                                   (in) The index of the player.
    @param SourceName                                    (in) The tracked device id.
  **/
  @:ufunction(BlueprintCallable) static public function DisableMotionTrackingOfSource(PlayerIndex : unreal.Int32, SourceName : unreal.FName) : Void;
  
  /**
    Disable tracking of the specified controller, by player index and tracked device type.
    
    @param MotionControllerComponent              (in) The motion controller component who's associated device is targeted.
  **/
  @:ufunction(BlueprintCallable) static public function DisableMotionTrackingForComponent(MotionControllerComponent : unreal.Const<unreal.headmounteddisplay.UMotionControllerComponent>) : Void;
  
  /**
    Disable tracking for all controllers.
  **/
  @:ufunction(BlueprintCallable) static public function DisableMotionTrackingOfAllControllers() : Void;
  
  /**
    Disable tracking for all controllers associated with the specified player.
    
    @param PlayerIndex                                    (in) The index of the player.
  **/
  @:ufunction(BlueprintCallable) static public function DisableMotionTrackingOfControllersForPlayer(PlayerIndex : unreal.Int32) : Void;
  
  /**
    Returns a list of all available motion sources (FNames associated with
    discrete tracking data that can be used to drive MotionControllerComponents).
  **/
  @:ufunction(BlueprintCallable) static public function EnumerateMotionSources() : unreal.TArray<unreal.FName>;
  
  /**
    Returns the system name used to distinguish the current tracking system.
    If no XR tracking system is active, then the name 'None' is returned.
  **/
  @:ufunction(BlueprintCallable) static public function GetActiveTrackingSystemName() : unreal.FName;
  
  /**
    Queries the specified source's tracking status and returns true if it has tracking.
    
    @return Tracking status of the specified controller.
  **/
  @:ufunction(BlueprintCallable) static public function IsMotionSourceTracking(PlayerIndex : unreal.Int32, SourceName : unreal.FName) : Bool;
  
}
