/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.paper2d;

/**
  A tile map is a 2D grid with a defined width and height (in tiles).  There can be multiple layers, each of which can specify which tile should appear in each cell of the map for that layer.
**/
@:umodule("Paper2D")
@:glueCppIncludes("PaperTileMap.h")
@:uextern @:uclass extern class UPaperTileMap extends unreal.UObject {
  
  /**
    The naming index to start at when trying to create a new layer
  **/
  @:uproperty public var LayerNameIndex : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    The color of the layer grid
  **/
  @:uproperty public var LayerGridColor : unreal.FLinearColor;
  
  /**
    Number of tiles the multi tile grid is shifted downwards
  **/
  @:uproperty public var MultiTileGridOffsetY : unreal.Int32;
  
  /**
    Number of tiles the multi tile grid is shifted to the right
  **/
  @:uproperty public var MultiTileGridOffsetX : unreal.Int32;
  
  /**
    Number of tiles the multi tile grid spans vertically. 0 removes horizontal lines
  **/
  @:uproperty public var MultiTileGridHeight : unreal.Int32;
  
  /**
    Number of tiles the multi tile grid spans horizontally. 0 removes vertical lines
  **/
  @:uproperty public var MultiTileGridWidth : unreal.Int32;
  
  /**
    The color of the multi tile grid
  **/
  @:uproperty public var MultiTileGridColor : unreal.FLinearColor;
  
  /**
    The color of the tile grid
  **/
  @:uproperty public var TileGridColor : unreal.FLinearColor;
  
  /**
    The background color displayed in the tile map editor
  **/
  @:uproperty public var BackgroundColor : unreal.FLinearColor;
  
  /**
    The currently selected layer index
  **/
  @:uproperty public var SelectedLayerIndex : unreal.Int32;
  
  /**
    Importing data and options used for this tile map
  **/
  @:uproperty public var AssetImportData : unreal.UAssetImportData;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Baked physics data.
  **/
  @:uproperty public var BodySetup : unreal.UBodySetup;
  
  /**
    The vertical height of the sides of the hex cell for a tile.
    Note: This value should already be included as part of the TileHeight, and is purely cosmetic; it only affects how the tile cursor preview is drawn.
  **/
  @:uproperty public var HexSideLength : unreal.Int32;
  
  /**
    Tile map type
  **/
  @:uproperty public var ProjectionMode : unreal.paper2d.ETileMapProjectionMode;
  
  /**
    Collision domain (no collision, 2D, or 3D)
  **/
  @:uproperty private var SpriteCollisionDomain : unreal.paper2d.ESpriteCollisionMode;
  
  /**
    The extrusion thickness of collision geometry when using a 3D collision domain
  **/
  @:uproperty private var CollisionThickness : unreal.Float32;
  
  /**
    The list of layers
  **/
  @:uproperty public var TileLayers : unreal.TArray<unreal.paper2d.UPaperTileLayer>;
  
  /**
    The material to use on a tile map instance if not overridden
  **/
  @:uproperty public var Material : unreal.UMaterialInterface;
  
  /**
    The Z-separation between each layer of the tile map
  **/
  @:uproperty public var SeparationPerLayer : unreal.Float32;
  
  /**
    The Z-separation incurred as you travel in Y (not strictly applied, batched tiles will be put at the same Z level)
  **/
  @:uproperty public var SeparationPerTileY : unreal.Float32;
  
  /**
    The Z-separation incurred as you travel in X (not strictly applied, batched tiles will be put at the same Z level)
  **/
  @:uproperty public var SeparationPerTileX : unreal.Float32;
  
  /**
    The scaling factor between pixels and Unreal units (cm) (e.g., 0.64 would make a 64 pixel wide tile take up 100 cm)
  **/
  @:uproperty public var PixelsPerUnrealUnit : unreal.Float32;
  
  /**
    Height of one tile (in pixels)
  **/
  @:uproperty public var TileHeight : unreal.Int32;
  
  /**
    Width of one tile (in pixels)
  **/
  @:uproperty public var TileWidth : unreal.Int32;
  
  /**
    Height of map (in tiles)
  **/
  @:uproperty public var MapHeight : unreal.Int32;
  
  /**
    Width of map (in tiles)
  **/
  @:uproperty public var MapWidth : unreal.Int32;
  
}
