/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Per-object settings for Lightmass
**/
@:glueCppIncludes("Classes/Engine/EngineTypes.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FLightmassPrimitiveSettings {
  
  /**
    Fraction of samples taken that must be occluded in order to reach full occlusion.
  **/
  @:uproperty public var FullyOccludedSamplesFraction : unreal.Float32;
  
  /**
    Scales the diffuse contribution of all materials applied to this object.
  **/
  @:uproperty public var DiffuseBoost : unreal.Float32;
  
  /**
    Scales the emissive contribution of all materials applied to this object.
  **/
  @:uproperty public var EmissiveBoost : unreal.Float32;
  
  /**
    Direct lighting influence radius.
    The default is 0, which means the influence radius should be automatically generated based on the emissive light brightness.
    Values greater than 0 override the automatic method.
  **/
  @:uproperty public var EmissiveLightExplicitInfluenceRadius : unreal.Float32;
  
  /**
    Direct lighting falloff exponent for mesh area lights created from emissive areas on this primitive.
  **/
  @:uproperty public var EmissiveLightFalloffExponent : unreal.Float32;
  
  /**
    Typically the triangle normal is used for hemisphere gathering which prevents incorrect self-shadowing from artist-tweaked vertex normals.
    However in the case of foliage whose vertex normal has been setup to match the underlying terrain, gathering in the direction of the vertex normal is desired.
  **/
  @:uproperty public var bUseVertexNormalForHemisphereGather : Bool;
  
  /**
    If true, allow using the emissive for static lighting.
  **/
  @:uproperty public var bUseEmissiveForStaticLighting : Bool;
  
  /**
    If true, this object will only shadow indirect lighting.
  **/
  @:uproperty public var bShadowIndirectOnly : Bool;
  
  /**
    If true, this object will be lit as if it receives light from both sides of its polygons.
  **/
  @:uproperty public var bUseTwoSidedLighting : Bool;
  
}
