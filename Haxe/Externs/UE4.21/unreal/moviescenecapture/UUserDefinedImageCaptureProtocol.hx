/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.moviescenecapture;

/**
  A blueprintable capture protocol tailored to capturing and exporting frames as images
**/
@:umodule("MovieSceneCapture")
@:glueCppIncludes("Protocols/UserDefinedCaptureProtocol.h")
@:uextern @:uclass extern class UUserDefinedImageCaptureProtocol extends unreal.moviescenecapture.UUserDefinedCaptureProtocol {
  
  /**
    The compression quality for the image type. For EXRs, 0 = Default ZIP compression, 1 = No compression, PNGs and JPEGs expect a value between 0 and 100
  **/
  @:uproperty public var CompressionQuality : unreal.Int32;
  
  /**
    Whether to save images with compression or not. Not supported for bitmaps.
  **/
  @:uproperty public var bEnableCompression : Bool;
  
  /**
    The image format to save as
  **/
  @:uproperty public var Format : unreal.imagewritequeue.EDesiredImageFormat;
  
  /**
    * Generate a filename for the specified buffer using this protocol's file name formatter
    *
    * @param Buffer          The desired buffer to generate a filename for
    * @param StreamName      The name of the stream for this buffer (e.g. a composition pass name)
    * @return A fully qualified file name
  **/
  @:ufunction(BlueprintCallable) @:final public function GenerateFilenameForBuffer(Buffer : unreal.UTexture, StreamName : unreal.FName) : unreal.FString;
  
  /**
    * Generate a filename for the current frame using this protocol's file name formatter
    *
    * @return A fully qualified file name for the current frame number
  **/
  @:ufunction(BlueprintCallable) @:final public function GenerateFilenameForCurrentFrame() : unreal.FString;
  
  /**
    * Generate a filename for the current frame using this protocol's file name formatter
    *
    * @return A fully qualified file name for the current frame number
  **/
  @:ufunction(BlueprintCallable) @:final public function WriteImageToDisk(PixelData : unreal.Const<unreal.PRef<unreal.moviescenecapture.FCapturedPixels>>, StreamName : unreal.FName, FrameMetrics : unreal.Const<unreal.PRef<unreal.moviescenecapture.FFrameMetrics>>, bCopyImageData : Bool = false) : Void;
  
}
