/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Kismet/KismetArrayLibrary.h")
@:uextern @:uclass extern class UKismetArrayLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Add item to array
    
    @param        TargetArray             The array to add item to
    @param        NewItem                 The item to add to the array
    @return       The index of the newly added item
  **/
  @:ufunction(BlueprintCallable) static public function Array_Add(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, NewItem : unreal.Int32) : unreal.Int32;
  
  /**
    Add item to array (unique)
    
    @param         TargetArray             The array to add item to
    @param         NewItem                 The item to add to the array
    @return        The index of the newly added item, or INDEX_NONE if the item is already present in the array
  **/
  @:ufunction(BlueprintCallable) static public function Array_AddUnique(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, NewItem : unreal.Int32) : unreal.Int32;
  
  /**
    Shuffle (randomize) the elements of an array
    
    @param        TargetArray             The array to shuffle
  **/
  @:ufunction(BlueprintCallable) static public function Array_Shuffle(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : Void;
  
  /**
    Append an array to another array
    
    @param        TargetArray             The array to add the source array to
    @param        SourceArray             The array to add to the target array
  **/
  @:ufunction(BlueprintCallable) static public function Array_Append(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, SourceArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : Void;
  
  /**
    *Insert item at the given index into the array.
    *
    *@param        TargetArray             The array to insert into
    *@param        NewItem                 The item to insert into the array
    *@param        Index                   The index at which to insert the item into the array
  **/
  @:ufunction(BlueprintCallable) static public function Array_Insert(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, NewItem : unreal.Int32, Index : unreal.Int32) : Void;
  
  /**
    *Remove item at the given index from the array.
    *
    *@param        TargetArray             The array to remove from
    *@param        IndexToRemove   The index into the array to remove from
  **/
  @:ufunction(BlueprintCallable) static public function Array_Remove(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, IndexToRemove : unreal.Int32) : Void;
  
  /**
    *Remove all instances of item from array.
    *
    *@param        TargetArray             The array to remove from
    *@param        Item                    The item to remove from the array
    *@return       True if one or more items were removed
  **/
  @:ufunction(BlueprintCallable) static public function Array_RemoveItem(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, Item : unreal.Int32) : Bool;
  
  /**
    *Clear an array, removes all content
    *
    *@param        TargetArray             The array to clear
  **/
  @:ufunction(BlueprintCallable) static public function Array_Clear(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : Void;
  
  /**
    *Resize Array to specified size.
    *
    *@param        TargetArray             The array to resize
    *@param        Size                    The new size of the array
  **/
  @:ufunction(BlueprintCallable) static public function Array_Resize(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, Size : unreal.Int32) : Void;
  
  /**
    *Get the number of items in an array
    *
    *@param        TargetArray             The array to get the length of
    *@return       The length of the array
  **/
  @:ufunction(BlueprintCallable) static public function Array_Length(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : unreal.Int32;
  
  /**
    *Get the last valid index into an array
    *
    *@param        TargetArray             The array to perform the operation on
    *@return       The last valid index of the array
  **/
  @:ufunction(BlueprintCallable) static public function Array_LastIndex(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : unreal.Int32;
  
  /**
    *Given an array and an index, returns a copy of the item found at that index
    *
    *@param        TargetArray             The array to get an item from
    *@param        Index                   The index in the array to get an item from
    *@return       A copy of the item stored at the index
  **/
  @:ufunction(BlueprintCallable) static public function Array_Get(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, Index : unreal.Int32, Item : unreal.Int32) : Void;
  
  /**
    *Given an array and an index, assigns the item to that array element
    *
    *@param        TargetArray             The array to perform the operation on
    *@param        Index                   The index to assign the item to
    *@param        Item                    The item to assign to the index of the array
    *@param        bSizeToFit              If true, the array will expand if Index is greater than the current size of the array
  **/
  @:ufunction(BlueprintCallable) static public function Array_Set(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, Index : unreal.Int32, Item : unreal.Int32, bSizeToFit : Bool) : Void;
  
  /**
    *Swaps the elements at the specified positions in the specified array
    *If the specified positions are equal, invoking this method leaves the array unchanged
    *
    *@param        TargetArray             The array to perform the operation on
    *@param    FirstIndex      The index of one element to be swapped
    *@param    SecondIndex     The index of the other element to be swapped
  **/
  @:ufunction(BlueprintCallable) static public function Array_Swap(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, FirstIndex : unreal.Int32, SecondIndex : unreal.Int32) : Void;
  
  /**
    *Finds the index of the first instance of the item within the array
    *
    *@param        TargetArray             The array to search for the item
    *@param        ItemToFind              The item to look for
    *@return       The index the item was found at, or -1 if not found
  **/
  @:ufunction(BlueprintCallable) static public function Array_Find(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, ItemToFind : unreal.Int32) : unreal.Int32;
  
  /**
    *Returns true if the array contains the given item
    *
    *@param        TargetArray             The array to search for the item
    *@param        ItemToFind              The item to look for
    *@return       True if the item was found within the array
  **/
  @:ufunction(BlueprintCallable) static public function Array_Contains(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, ItemToFind : unreal.Int32) : Bool;
  
  /**
    *Filter an array based on a Class derived from Actor.
    *
    *@param        TargetArray             The array to filter from
    *@param        FilterClass             The Actor sub-class type that acts as the filter, only objects derived from it will be returned.
    *@return       An array containing only those objects which are derived from the class specified.
  **/
  @:ufunction(BlueprintCallable) static public function FilterArray(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, FilterClass : unreal.TSubclassOf<unreal.AActor>, FilteredArray : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  
  /**
    Not exposed to users. Supports setting an array property on an object by name.
  **/
  @:ufunction(BlueprintCallable) static public function SetArrayPropertyByName(Object : unreal.UObject, PropertyName : unreal.FName, Value : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : Void;
  
  /**
    *Tests if IndexToTest is valid, i.e. greater than or equal to zero, and less than the number of elements in TargetArray.
    *
    *@param        TargetArray             Array to use for the IsValidIndex test
    *@param        IndexToTest             The Index, that we want to test for being valid
    *@return       True if the Index is Valid, i.e. greater than or equal to zero, and less than the number of elements in TargetArray.
  **/
  @:ufunction(BlueprintCallable) static public function Array_IsValidIndex(TargetArray : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, IndexToTest : unreal.Int32) : Bool;
  
}
