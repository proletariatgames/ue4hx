/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Sound/SoundWave.h")
@:uextern @:uclass extern class USoundWave extends unreal.USoundBase {
  
  /**
    Hold a reference to our internal curve so we can switch back to it if we want to
  **/
  @:uproperty private var InternalCurves : unreal.UCurveTable;
  
  /**
    Curves associated with this sound wave
  **/
  @:uproperty private var Curves : unreal.UCurveTable;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var AssetImportData : unreal.UAssetImportData;
  @:deprecated @:uproperty public var SourceFileTimestamp_DEPRECATED : unreal.FString;
  @:deprecated @:uproperty public var SourceFilePath_DEPRECATED : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The array of the subtitles for each language. Generated at cook time.
  **/
  @:uproperty public var LocalizedSubtitles : unreal.TArray<unreal.FLocalizedSubtitle>;
  #if WITH_EDITORONLY_DATA
  
  /**
    Provides contextual information for the sound to the translator.
  **/
  @:uproperty public var Comment : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Subtitle cues.  If empty, use SpokenText as the subtitle.  Will often be empty,
    as the contents of the subtitle is commonly identical to what is spoken.
  **/
  @:uproperty public var Subtitles : unreal.TArray<unreal.FSubtitleCue>;
  
  /**
    Cached sample rate for displaying in the tools
  **/
  @:uproperty private var SampleRate : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    Sizes of the bulk data for the source wav data
  **/
  @:uproperty public var ChannelSizes : unreal.TArray<unreal.Int32>;
  
  /**
    Offsets into the bulk data for the source wav data
  **/
  @:uproperty public var ChannelOffsets : unreal.TArray<unreal.Int32>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Number of channels of multichannel data; 1 or 2 for regular mono and stereo files
  **/
  @:uproperty public var NumChannels : unreal.Int32;
  
  /**
    Playback pitch for sound.
  **/
  @:uproperty public var Pitch : unreal.Float32;
  
  /**
    Playback volume of sound 0 to 1 - Default is 1.0.
  **/
  @:uproperty public var Volume : unreal.Float32;
  
  /**
    The priority of the subtitle.
  **/
  @:uproperty public var SubtitlePriority : unreal.Float32;
  
  /**
    A localized version of the text that is actually spoken phonetically in the audio.
  **/
  @:uproperty public var SpokenText : unreal.FString;
  
  /**
    Whether or not this source is ambisonics file format.
  **/
  @:uproperty public var bIsAmbisonics : Bool;
  
  /**
    Allows sound to continue playing when silent. This prevents issues with sounds restarting when coming back in range, etc.
  **/
  @:uproperty public var bVirtualizeWhenSilent : Bool;
  
  /**
    If set to true the subtitles display as a sequence of single lines as opposed to multiline.
  **/
  @:uproperty public var bSingleLine : Bool;
  
  /**
    If set to true will disable automatic generation of line breaks - use if the subtitles have been split manually.
  **/
  @:uproperty public var bManualWordWrap : Bool;
  
  /**
    If set to true if this sound is considered to contain mature/adult content.
  **/
  @:uproperty public var bMature : Bool;
  
  /**
    Whether this sound can be streamed to avoid increased memory usage
  **/
  @:uproperty public var bStreaming : Bool;
  
  /**
    If set, when played directly (not through a sound cue) the wave will be played looping.
  **/
  @:uproperty public var bLooping : Bool;
  @:uproperty public var SoundGroup : unreal.ESoundGroup;
  
  /**
    Quality of sample rate conversion for platforms that opt into resampling during cook.
  **/
  @:uproperty public var SampleRateQuality : unreal.audioplatformconfiguration.ESoundwaveSampleRateSettings;
  
  /**
    Priority of this sound when streaming (lower priority streams may not always play)
  **/
  @:uproperty public var StreamingPriority : unreal.Int32;
  
  /**
    Platform agnostic compression quality. 1..100 with 1 being best compression and 100 being best quality.
  **/
  @:uproperty public var CompressionQuality : unreal.Int32;
  
}
