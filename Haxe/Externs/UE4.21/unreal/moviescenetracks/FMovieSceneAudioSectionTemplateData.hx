/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.moviescenetracks;

@:umodule("MovieSceneTracks")
@:glueCppIncludes("Private/Evaluation/MovieSceneAudioTemplate.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FMovieSceneAudioSectionTemplateData {
  @:uproperty public var OnAudioPlaybackPercent : unreal.FOnAudioPlaybackPercent;
  
  /**
    called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early
  **/
  @:uproperty public var OnAudioFinished : unreal.FOnAudioFinished;
  
  /**
    Called when subtitles are sent to the SubtitleManager.  Set this delegate if you want to hijack the subtitles for other purposes
  **/
  @:uproperty public var OnQueueSubtitles : unreal.FOnQueueSubtitles;
  
  /**
    The attenuation settings
  **/
  @:uproperty public var AttenuationSettings : unreal.USoundAttenuation;
  
  /**
    Should the attenuation settings on this section be used.
  **/
  @:uproperty public var bOverrideAttenuation : Bool;
  
  /**
    The row index of the section
  **/
  @:uproperty public var RowIndex : unreal.Int32;
  
  /**
    The volume the sound will be played with.
  **/
  @:uproperty public var AudioVolumeCurve : unreal.moviescene.FMovieSceneFloatChannel;
  
  /**
    The amount which this audio is time dilated by
  **/
  @:uproperty public var AudioPitchMultiplierCurve : unreal.moviescene.FMovieSceneFloatChannel;
  
  /**
    The frame number at which the audio starts playing
  **/
  @:uproperty public var SectionStartTimeSeconds : unreal.Float64;
  
  /**
    The offset into the beginning of the audio clip
  **/
  @:uproperty public var AudioStartOffset : unreal.Float32;
  
  /**
    The sound cue or wave that this template plays. Not to be dereferenced on a background thread
  **/
  @:uproperty public var Sound : unreal.USoundBase;
  
}
