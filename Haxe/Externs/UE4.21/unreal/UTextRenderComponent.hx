/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Renders text in the world with given font. Contains usual font related attributes such as Scale, Alignment, Color etc.
**/
@:glueCppIncludes("Components/TextRenderComponent.h")
@:uextern @:uclass extern class UTextRenderComponent extends unreal.UPrimitiveComponent {
  
  /**
    Allows text to draw unmodified when using debug visualization modes. *
  **/
  @:uproperty public var bAlwaysRenderAsText : Bool;
  
  /**
    Vertical adjustment per character, default is 0.0
  **/
  @:uproperty public var VertSpacingAdjust : unreal.Float32;
  
  /**
    Horizontal adjustment per character, default is 0.0
  **/
  @:uproperty public var HorizSpacingAdjust : unreal.Float32;
  
  /**
    The inverse of the Font's character height.
  **/
  @:uproperty public var InvDefaultSize : unreal.Float32;
  
  /**
    Vertical size of the fonts largest character in world units. Transform, XScale and YScale will affect final size.
  **/
  @:uproperty public var WorldSize : unreal.Float32;
  
  /**
    Vertical scale, default is 1.0
  **/
  @:uproperty public var YScale : unreal.Float32;
  
  /**
    Horizontal scale, default is 1.0
  **/
  @:uproperty public var XScale : unreal.Float32;
  
  /**
    Color of the text, can be accessed as vertex color
  **/
  @:uproperty public var TextRenderColor : unreal.FColor;
  
  /**
    Vertical text alignment
  **/
  @:uproperty public var VerticalAlignment : unreal.EVerticalTextAligment;
  
  /**
    Horizontal text alignment
  **/
  @:uproperty public var HorizontalAlignment : unreal.EHorizTextAligment;
  
  /**
    Text font
  **/
  @:uproperty public var Font : unreal.UFont;
  
  /**
    Text material
  **/
  @:uproperty public var TextMaterial : unreal.UMaterialInterface;
  
  /**
    Text content, can be multi line using <br> as line separator
  **/
  @:uproperty public var Text : unreal.FText;
  @:ufunction(BlueprintCallable) @:final public function SetText(Value : unreal.FString) : Void;
  
  /**
    Change the text value and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function K2_SetText(Value : unreal.Const<unreal.PRef<unreal.FText>>) : Void;
  
  /**
    Change the text material and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTextMaterial(Material : unreal.UMaterialInterface) : Void;
  
  /**
    Change the font and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFont(Value : unreal.UFont) : Void;
  
  /**
    Change the horizontal alignment and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetHorizontalAlignment(Value : unreal.EHorizTextAligment) : Void;
  
  /**
    Change the vertical alignment and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetVerticalAlignment(Value : unreal.EVerticalTextAligment) : Void;
  
  /**
    Change the text render color and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTextRenderColor(Value : unreal.FColor) : Void;
  
  /**
    Change the text X scale and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetXScale(Value : unreal.Float32) : Void;
  
  /**
    Change the text Y scale and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetYScale(Value : unreal.Float32) : Void;
  
  /**
    Change the text horizontal spacing adjustment and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetHorizSpacingAdjust(Value : unreal.Float32) : Void;
  
  /**
    Change the text vertical spacing adjustment and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetVertSpacingAdjust(Value : unreal.Float32) : Void;
  
  /**
    Change the world size of the text and signal the primitives to be rebuilt
  **/
  @:ufunction(BlueprintCallable) @:final public function SetWorldSize(Value : unreal.Float32) : Void;
  
  /**
    Get local size of text
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTextLocalSize() : unreal.FVector;
  
  /**
    Get world space size of text
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTextWorldSize() : unreal.FVector;
  
}
