/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Particles/ParticleEmitter.h")
@:uextern @:uclass extern class UParticleEmitter extends unreal.UObject {
  #if WITH_EDITORONLY_DATA
  @:uproperty public var DetailModeDisplay : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Detail mode: Set flags reflecting which system detail mode you want the emitter to be ticked and rendered in
  **/
  @:uproperty public var DetailModeBitmask : unreal.FakeUInt32;
  @:uproperty public var QualityLevelSpawnRateScale : unreal.Float32;
  
  /**
    Initial allocation count - overrides calculated peak count if > 0
  **/
  @:uproperty public var InitialAllocationCount : unreal.Int32;
  @:uproperty public var PeakActiveParticles : unreal.Int32;
  
  /**
    'Private' data - not required by the editor
  **/
  @:uproperty public var LODLevels : unreal.TArray<unreal.UParticleLODLevel>;
  #if WITH_EDITORONLY_DATA
  
  /**
    The color of the emitter in the curve editor and debug rendering modes.
  **/
  @:uproperty public var EmitterEditorColor : unreal.FColor;
  
  /**
    If detail mode is >= system detail mode, primitive won't be rendered.
  **/
  @:deprecated @:uproperty public var DetailMode_DEPRECATED : unreal.EDetailMode;
  
  /**
    This value indicates the emitter should be drawn 'collapsed' in Cascade
  **/
  @:uproperty public var bCollapsed : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    When true, emitters deemed insignificant will have their tick and render disabled Instantly. When false they will simple stop spawning new particles.
  **/
  @:uproperty public var bDisableWhenInsignficant : Bool;
  
  /**
    When true, if the current LOD is disabled the emitter will be kept alive. Otherwise, the emitter will be considered complete if the current LOD is disabled.
  **/
  @:uproperty public var bDisabledLODsKeepEmitterAlive : Bool;
  
  /**
    If true, then this emitter was 'cooked out' by the cooker.
    This means it was completely disabled, but to preserve any
    indexing schemes, it is left in place.
  **/
  @:uproperty public var bCookedOut : Bool;
  
  /**
    If true, then show only this emitter in the editor
  **/
  @:uproperty public var bIsSoloing : Bool;
  @:uproperty public var ConvertedModules : Bool;
  
  /**
    If true, maintains some legacy spawning behavior.
  **/
  @:uproperty public var bUseLegacySpawningBehavior : Bool;
  
  /**
    The significance level required of this emitter's owner for this emitter to be active.
  **/
  @:uproperty public var SignificanceLevel : unreal.EParticleSignificanceLevel;
  
  /**
    How to render the emitter particles. Can be one of the following:
            ERM_Normal      - As the intended sprite/mesh
            ERM_Point       - As a 2x2 pixel block with no scaling and the color set in EmitterEditorColor
            ERM_Cross       - As a cross of lines, scaled to the size of the particle in EmitterEditorColor
            ERM_None        - Do not render
  **/
  @:uproperty public var EmitterRenderMode : unreal.EEmitterRenderMode;
  @:uproperty public var SubUVDataOffset : unreal.Int32;
  
  /**
    The name of the emitter.
  **/
  @:uproperty public var EmitterName : unreal.FName;
  
}
