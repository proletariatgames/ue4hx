/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Particles/Light/ParticleModuleLight.h")
@:uextern @:uclass extern class UParticleModuleLight extends unreal.UParticleModuleLightBase {
  
  /**
    Whether to cast shadows from the particle lights.  Requires High Quality Lights to be enabled.
    Warning: This can be incredibly expensive on the GPU - use with caution.
  **/
  @:uproperty public var bShadowCastingLights : Bool;
  
  /**
    Converts the particle lights into high quality lights as if they came from a PointLightComponent.  High quality lights cost significantly more on both CPU and GPU.
  **/
  @:uproperty public var bHighQualityLights : Bool;
  
  /**
    Intensity of the volumetric scattering from this light.  This scales Intensity and LightColor.
  **/
  @:uproperty public var VolumetricScatteringIntensity : unreal.Float32;
  
  /**
    Channels that this light should affect.
    Only affect high quality lights
    These channels only apply to opaque materials, direct lighting, and dynamic lighting and shadowing.
  **/
  @:uproperty public var LightingChannels : unreal.FLightingChannels;
  
  /**
    Provides the light's exponent when inverse squared falloff is disabled.
  **/
  @:uproperty public var LightExponent : unreal.FRawDistributionFloat;
  
  /**
    Scales the particle's radius, to calculate the light's radius.
  **/
  @:uproperty public var RadiusScale : unreal.FRawDistributionFloat;
  
  /**
    Brightness scale for the light, which can be setup as a curve over the particle's lifetime.
  **/
  @:uproperty public var BrightnessOverLife : unreal.FRawDistributionFloat;
  
  /**
    Scale that is applied to the particle's color to calculate the light's color, and can be setup as a curve over the particle's lifetime.
  **/
  @:uproperty public var ColorScaleOverLife : unreal.FRawDistributionVector;
  
  /**
    Fraction of particles in this emitter to create lights on.
  **/
  @:uproperty public var SpawnFraction : unreal.Float32;
  
  /**
    Will draw wireframe spheres to preview the light radius if enabled.
    Note: this is intended for previewing and the value will not be saved, it will always revert to disabled.
  **/
  @:uproperty public var bPreviewLightRadius : Bool;
  
  /**
    Whether lights from this module should affect translucency.
    Use with caution.  Modules enabling this should only make a few particle lights at most, and the smaller they are, the less they will cost.
  **/
  @:uproperty public var bAffectsTranslucency : Bool;
  
  /**
    Whether to use physically based inverse squared falloff from the light.  If unchecked, the LightExponent distribution will be used instead.
  **/
  @:uproperty public var bUseInverseSquaredFalloff : Bool;
  
}
