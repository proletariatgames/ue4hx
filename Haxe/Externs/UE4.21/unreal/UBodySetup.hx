/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  BodySetup contains all collision information that is associated with a single asset.
  A single BodySetup instance is shared among many BodyInstances so that geometry data is not duplicated.
  Assets typically implement a GetBodySetup function that is used during physics state creation.
  
  @see GetBodySetup
  @see FBodyInstance
**/
@:glueCppIncludes("PhysicsEngine/BodySetup.h")
@:uextern @:uclass extern class UBodySetup extends unreal.UObject {
  
  /**
    Build scale for this body setup (static mesh settings define this value)
  **/
  @:uproperty public var BuildScale3D : unreal.FVector;
  
  /**
    Default properties of the body instance, copied into objects on instantiation, was URB_BodyInstance
  **/
  @:uproperty public var DefaultInstance(default,never) : unreal.FBodyInstance;
  #if WITH_EDITORONLY_DATA
  @:deprecated @:uproperty public var BuildScale_DEPRECATED : unreal.Float32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Custom walkable slope setting for this body.
  **/
  @:uproperty public var WalkableSlopeOverride : unreal.FWalkableSlopeOverride;
  
  /**
    Physical material to use for simple collision on this body. Encodes information about density, friction etc.
  **/
  @:uproperty public var PhysMaterial : unreal.UPhysicalMaterial;
  
  /**
    Collision Trace behavior - by default, it will keep simple(convex)/complex(per-poly) separate *
  **/
  @:uproperty public var CollisionTraceFlag : unreal.ECollisionTraceFlag;
  
  /**
    Collision Type for this body. This eventually changes response to collision to others *
  **/
  @:uproperty public var CollisionReponse : unreal.EBodyCollisionResponse;
  
  /**
    Should we generate data necessary to support collision on mirrored versions of this mesh.
    This halves the collision data size for this mesh, but disables collision on mirrored instances of the body.
  **/
  @:uproperty public var bGenerateMirroredCollision : Bool;
  
  /**
    Whether the cooked data is shared by multiple body setups. This is needed for per poly collision case where we don't want to duplicate cooked data, but still need multiple body setups for in place geometry changes
  **/
  @:uproperty public var bSharedCookedData : Bool;
  
  /**
    Should we generate data necessary to support collision on normal (non-mirrored) versions of this body.
  **/
  @:uproperty public var bGenerateNonMirroredCollision : Bool;
  
  /**
    If true, the physics triangle mesh will use double sided faces when doing scene queries.
    This is useful for planes and single sided meshes that need traces to work on both sides.
  **/
  @:uproperty public var bDoubleSidedGeometry : Bool;
  
  /**
    If true, the physics of this mesh (only affects static meshes) will always contain ALL elements from the mesh - not just the ones enabled for collision.
    This is useful for forcing high detail collisions using the entire render mesh.
  **/
  @:uproperty public var bMeshCollideAll : Bool;
  
  /**
    Should this BodySetup be considered for the bounding box of the PhysicsAsset (and hence SkeletalMeshComponent).
    There is a speed improvement from having less BodySetups processed each frame when updating the bounds.
  **/
  @:uproperty public var bConsiderForBounds : Bool;
  
  /**
    If true (and bEnableFullAnimWeightBodies in SkelMeshComp is true), the physics of this bone will always be blended into the skeletal mesh, regardless of what PhysicsWeight of the SkelMeshComp is.
    This is useful for bones that should always be physics, even when blending physics in and out for hit reactions (eg cloth or pony-tails).
  **/
  @:deprecated @:uproperty public var bAlwaysFullAnimWeight_DEPRECATED : Bool;
  
  /**
    If simulated it will use physics, if kinematic it will not be affected by physics, but can interact with physically simulated bodies. Default will inherit from OwnerComponent's behavior.
  **/
  @:uproperty public var PhysicsType : unreal.EPhysicsType;
  
  /**
    Used in the PhysicsAsset case. Associates this Body with Bone in a skeletal mesh.
  **/
  @:uproperty public var BoneName : unreal.FName;
  
  /**
    Simplified collision representation of this
  **/
  @:uproperty public var AggGeom : unreal.FKAggregateGeom;
  
}
