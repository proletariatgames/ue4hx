/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Classes/Camera/CameraTypes.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FMinimalViewInfo {
  
  /**
    Off-axis / off-center projection offset as proportion of screen dimensions
  **/
  @:uproperty public var OffCenterProjectionOffset : unreal.FVector2D;
  
  /**
    Post-process settings to use if PostProcessBlendWeight is non-zero.
  **/
  @:uproperty public var PostProcessSettings : unreal.FPostProcessSettings;
  
  /**
    Indicates if PostProcessSettings should be applied.
  **/
  @:uproperty public var PostProcessBlendWeight : unreal.Float32;
  
  /**
    The type of camera
  **/
  @:uproperty public var ProjectionMode : unreal.ECameraProjectionMode;
  
  /**
    If true, account for the field of view angle when computing which level of detail to use for meshes.
  **/
  @:uproperty public var bUseFieldOfViewForLOD : Bool;
  
  /**
    If bConstrainAspectRatio is true, black bars will be added if the destination view has a different aspect ratio than this camera requested.
  **/
  @:uproperty public var bConstrainAspectRatio : Bool;
  
  /**
    Aspect Ratio (Width/Height); ignored unless bConstrainAspectRatio is true
  **/
  @:uproperty public var AspectRatio : unreal.Float32;
  
  /**
    The far plane distance of the orthographic view (in world units)
  **/
  @:uproperty public var OrthoFarClipPlane : unreal.Float32;
  
  /**
    The near plane distance of the orthographic view (in world units)
  **/
  @:uproperty public var OrthoNearClipPlane : unreal.Float32;
  
  /**
    The desired width (in world units) of the orthographic view (ignored in Perspective mode)
  **/
  @:uproperty public var OrthoWidth : unreal.Float32;
  
  /**
    This is the originally desired field of view before any adjustments to account for different aspect ratios
  **/
  @:uproperty public var DesiredFOV : unreal.Float32;
  
  /**
    The field of view (in degrees) in perspective mode (ignored in Orthographic mode)
  **/
  @:uproperty public var FOV : unreal.Float32;
  
  /**
    Rotation
  **/
  @:uproperty public var Rotation : unreal.FRotator;
  
  /**
    Location
  **/
  @:uproperty public var Location : unreal.FVector;
  
}
