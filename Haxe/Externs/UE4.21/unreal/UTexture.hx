/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Engine/Texture.h")
@:uextern @:uclass extern class UTexture extends unreal.UObject implements unreal.IInterface_AssetUserData {
  
  /**
    Array of user data stored with the asset
  **/
  @:uproperty private var AssetUserData : unreal.TArray<unreal.UAssetUserData>;
  
  /**
    Whether to use the extra cinematic quality mip-levels, when we're forcing mip-levels to be resident.
  **/
  @:uproperty public var bUseCinematicMipLevels : Bool;
  
  /**
    If true, the RHI texture will be created using TexCreate_NoTiling
  **/
  @:uproperty public var bNoTiling : Bool;
  @:uproperty public var NeverStream : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    A flag for using the simplified legacy gamma space e.g pow(color,1/2.2) for converting from FColor to FLinearColor, if we're doing sRGB.
  **/
  @:uproperty public var bUseLegacyGamma : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    This should be unchecked if using alpha channels individually as masks.
  **/
  @:uproperty public var SRGB : Bool;
  
  /**
    Texture group this texture belongs to
  **/
  @:uproperty public var LODGroup : unreal.TextureGroup;
  
  /**
    The texture filtering mode to use when sampling this texture.
  **/
  @:uproperty public var Filter : unreal.TextureFilter;
  
  /**
    Compression settings to use when building the texture.
  **/
  @:uproperty public var CompressionSettings : unreal.TextureCompressionSettings;
  
  /**
    Number of mip-levels to use for cinematic quality.
  **/
  @:uproperty public var NumCinematicMipLevels : unreal.Int32;
  
  /**
    A bias to the index of the top mip level to use.
  **/
  @:uproperty public var LODBias : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    default 1, high values result in a stronger effect e.g 1, 2, 4, 8
    this is no slider because the texture update would not be fast enough
  **/
  @:uproperty public var CompositePower : unreal.Float32;
  
  /**
    defines how the CompositeTexture is applied, e.g. CTM_RoughnessFromNormalAlpha
  **/
  @:uproperty public var CompositeTextureMode : unreal.ECompositeTextureMode;
  
  /**
    Can be defined to modify the roughness based on the normal map variation (mostly from mip maps).
    MaxAlpha comes in handy to define a base roughness if no source alpha was there.
    Make sure the normal map has at least as many mips as this texture.
  **/
  @:uproperty public var CompositeTexture : unreal.UTexture;
  
  /**
    Per asset specific setting to define the mip-map generation properties like sharpening and kernel size.
  **/
  @:uproperty public var MipGenSettings : unreal.TextureMipGenSettings;
  
  /**
    The color that will be replaced with transparent black if chroma keying is enabled
  **/
  @:uproperty public var ChromaKeyColor : unreal.FColor;
  
  /**
    The threshold that components have to match for the texel to be considered equal to the ChromaKeyColor when chroma keying (<=, set to 0 to require a perfect exact match)
  **/
  @:uproperty public var ChromaKeyThreshold : unreal.Float32;
  
  /**
    Whether to chroma key the image, replacing any pixels that match ChromaKeyColor with transparent black
  **/
  @:uproperty public var bChromaKeyTexture : Bool;
  
  /**
    The color used to pad the texture out if it is resized due to PowerOfTwoMode
  **/
  @:uproperty public var PaddingColor : unreal.FColor;
  
  /**
    How to pad the texture to a power of 2 size (if necessary)
  **/
  @:uproperty public var PowerOfTwoMode : unreal.ETexturePowerOfTwoSetting;
  
  /**
    For DXT1 textures, setting this will cause the texture to be twice the size, but better looking, on iPhone
  **/
  @:uproperty public var bForcePVRTC4 : Bool;
  
  /**
    When true the texture's green channel will be inverted. This is useful for some normal maps.
  **/
  @:uproperty public var bFlipGreenChannel : Bool;
  
  /**
    When true the texture's border will be preserved during mipmap generation.
  **/
  @:uproperty public var bPreserveBorder : Bool;
  
  /**
    Alpha values per channel to compare to when preserving alpha coverage.
  **/
  @:uproperty public var AlphaCoverageThresholds : unreal.FVector4;
  
  /**
    When true, the alpha channel of mip-maps and the base image are dithered for smooth LOD transitions.
  **/
  @:uproperty public var bDitherMipMapAlpha : Bool;
  
  /**
    The compression quality for generated textures.
  **/
  @:uproperty public var CompressionQuality : unreal.ETextureCompressionQuality;
  
  /**
    The maximum resolution for generated textures. A value of 0 means the maximum size for the format on each platform, except HDR long/lat cubemaps, which default to a resolution of 512.
  **/
  @:uproperty public var MaxTextureSize : unreal.Int32;
  
  /**
    If enabled, defer compression of the texture until save.
  **/
  @:uproperty public var DeferCompression : Bool;
  @:uproperty public var CompressionNone : Bool;
  
  /**
    If enabled, the texture's alpha channel will be discarded during compression
  **/
  @:uproperty public var CompressionNoAlpha : Bool;
  
  /**
    Remaps the alpha to the specified min/max range, defines the new value of 1 (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustMaxAlpha : unreal.Float32;
  
  /**
    Remaps the alpha to the specified min/max range, defines the new value of 0 (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustMinAlpha : unreal.Float32;
  
  /**
    Static texture hue adjustment (0 - 360) (offsets HSV hue by value in degrees.)  (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustHue : unreal.Float32;
  
  /**
    Static texture RGB curve adjustment (raises linear-space RGB color to the specified power.)  (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustRGBCurve : unreal.Float32;
  
  /**
    Static texture saturation adjustment (scales HSV saturation.)  (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustSaturation : unreal.Float32;
  
  /**
    Static texture "vibrance" adjustment (0 - 1) (HSV saturation algorithm adjustment.)  (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustVibrance : unreal.Float32;
  
  /**
    Static texture curve adjustment (raises HSV value to the specified power.)  (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustBrightnessCurve : unreal.Float32;
  
  /**
    Static texture brightness adjustment (scales HSV value.)  (Non-destructive; Requires texture source art to be available.)
  **/
  @:uproperty public var AdjustBrightness : unreal.Float32;
  @:uproperty public var AssetImportData : unreal.UAssetImportData;
  @:deprecated @:uproperty public var SourceFilePath_DEPRECATED : unreal.FString;
  @:uproperty public var Source : unreal.FTextureSource;
  #end // WITH_EDITORONLY_DATA
  // Interface_AssetUserData interface implementation
  
}
