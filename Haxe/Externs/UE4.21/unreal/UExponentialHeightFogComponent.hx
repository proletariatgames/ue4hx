/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Used to create fogging effects such as clouds but with a density that is related to the height of the fog.
**/
@:glueCppIncludes("Components/ExponentialHeightFogComponent.h")
@:uextern @:uclass extern class UExponentialHeightFogComponent extends unreal.USceneComponent {
  
  /**
    Whether to use FogInscatteringColor for the Sky Light volumetric scattering color and DirectionalInscatteringColor for the Directional Light scattering color.
    Make sure your directional light has 'Atmosphere Sun Light' enabled!
    Enabling this allows Volumetric fog to better match Height fog in the distance, but produces non-physical volumetric lighting that may not match surface lighting.
  **/
  @:uproperty public var bOverrideLightColorsWithFogInscatteringColors : Bool;
  @:uproperty public var VolumetricFogStaticLightingScatteringIntensity : unreal.Float32;
  
  /**
    Distance over which volumetric fog should be computed.  Larger values extend the effect into the distance but expose under-sampling artifacts in details.
  **/
  @:uproperty public var VolumetricFogDistance : unreal.Float32;
  
  /**
    Scales the height fog particle extinction amount used by volumetric fog.  Values larger than 1 cause fog particles everywhere absorb more light.
  **/
  @:uproperty public var VolumetricFogExtinctionScale : unreal.Float32;
  
  /**
    Light emitted by height fog.  This is a density so more light is emitted the further you are looking through the fog.
    In most cases skylight is a better choice, however right now volumetric fog does not support precomputed lighting,
    So stationary skylights are unshadowed and static skylights don't affect volumetric fog at all.
  **/
  @:uproperty public var VolumetricFogEmissive : unreal.FLinearColor;
  
  /**
    The height fog particle reflectiveness used by volumetric fog.
    Water particles in air have an albedo near white, while dust has slightly darker value.
  **/
  @:uproperty public var VolumetricFogAlbedo : unreal.FColor;
  
  /**
    Controls the scattering phase function - how much incoming light scatters in various directions.
    A distribution value of 0 scatters equally in all directions, while .9 scatters predominantly in the light direction.
    In order to have visible volumetric fog light shafts from the side, the distribution will need to be closer to 0.
  **/
  @:uproperty public var VolumetricFogScatteringDistribution : unreal.Float32;
  
  /**
    Whether to enable Volumetric fog.  Scalability settings control the resolution of the fog simulation.
    Note that Volumetric fog currently does not support StartDistance, FogMaxOpacity and FogCutoffDistance.
    Volumetric fog also can't match exponential height fog in general as exponential height fog has non-physical behavior.
  **/
  @:uproperty public var bEnableVolumetricFog : Bool;
  
  /**
    Scene elements past this distance will not have fog applied.  This is useful for excluding skyboxes which already have fog baked in.
  **/
  @:uproperty public var FogCutoffDistance : unreal.Float32;
  
  /**
    Distance from the camera that the fog will start, in world units.
  **/
  @:uproperty public var StartDistance : unreal.Float32;
  
  /**
    Maximum opacity of the fog.
    A value of 1 means the fog can become fully opaque at a distance and replace scene color completely,
    A value of 0 means the fog color will not be factored in at all.
  **/
  @:uproperty public var FogMaxOpacity : unreal.Float32;
  
  /**
    Height density factor, controls how the density increases as height decreases.
    Smaller values make the visible transition larger.
  **/
  @:uproperty public var FogHeightFalloff : unreal.Float32;
  
  /**
    Controls the color of the directional inscattering, which is used to approximate inscattering from a directional light.
    Note: there must be a directional light with bUsedAsAtmosphereSunLight enabled for DirectionalInscattering to be used.
  **/
  @:uproperty public var DirectionalInscatteringColor : unreal.FLinearColor;
  
  /**
    Controls the start distance from the viewer of the directional inscattering, which is used to approximate inscattering from a directional light.
    Note: there must be a directional light with bUsedAsAtmosphereSunLight enabled for DirectionalInscattering to be used.
  **/
  @:uproperty public var DirectionalInscatteringStartDistance : unreal.Float32;
  
  /**
    Controls the size of the directional inscattering cone, which is used to approximate inscattering from a directional light.
    Note: there must be a directional light with bUsedAsAtmosphereSunLight enabled for DirectionalInscattering to be used.
  **/
  @:uproperty public var DirectionalInscatteringExponent : unreal.Float32;
  
  /**
    Distance at which only the average color of InscatteringColorCubemap should be used as Inscattering Color.
  **/
  @:uproperty public var NonDirectionalInscatteringColorDistance : unreal.Float32;
  
  /**
    Distance at which InscatteringColorCubemap should be used directly for the Inscattering Color.
  **/
  @:uproperty public var FullyDirectionalInscatteringColorDistance : unreal.Float32;
  
  /**
    Tint color used when InscatteringColorCubemap is specified, for quick edits without having to reimport InscatteringColorCubemap.
  **/
  @:uproperty public var InscatteringTextureTint : unreal.FLinearColor;
  
  /**
    Angle to rotate the InscatteringColorCubemap around the Z axis.
  **/
  @:uproperty public var InscatteringColorCubemapAngle : unreal.Float32;
  
  /**
    Cubemap that can be specified for fog color, which is useful to make distant, heavily fogged scene elements match the sky.
    When the cubemap is specified, FogInscatteringColor is ignored and Directional inscattering is disabled.
  **/
  @:uproperty public var InscatteringColorCubemap : unreal.UTextureCube;
  @:uproperty public var FogInscatteringColor : unreal.FLinearColor;
  
  /**
    Global density factor.
  **/
  @:uproperty public var FogDensity : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function SetFogDensity(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetFogInscatteringColor(Value : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetInscatteringColorCubemap(Value : unreal.UTextureCube) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetInscatteringColorCubemapAngle(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetFullyDirectionalInscatteringColorDistance(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetNonDirectionalInscatteringColorDistance(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetInscatteringTextureTint(Value : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetDirectionalInscatteringExponent(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetDirectionalInscatteringStartDistance(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetDirectionalInscatteringColor(Value : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetFogHeightFalloff(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetFogMaxOpacity(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetStartDistance(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetFogCutoffDistance(Value : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVolumetricFog(bNewValue : Bool) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVolumetricFogScatteringDistribution(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVolumetricFogExtinctionScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVolumetricFogAlbedo(NewValue : unreal.FColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVolumetricFogEmissive(NewValue : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVolumetricFogDistance(NewValue : unreal.Float32) : Void;
  
}
