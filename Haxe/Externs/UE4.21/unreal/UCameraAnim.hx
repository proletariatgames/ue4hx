/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  A predefined animation to be played on a camera
**/
@:glueCppIncludes("Camera/CameraAnim.h")
@:uextern @:uclass extern class UCameraAnim extends unreal.UObject {
  
  /**
    Default PP blend weight to put on the animated camera. For modifying PP without keyframes.
  **/
  @:uproperty public var BasePostProcessBlendWeight : unreal.Float32;
  
  /**
    Default PP settings to put on the animated camera. For modifying PP without keyframes.
  **/
  @:uproperty public var BasePostProcessSettings : unreal.FPostProcessSettings;
  
  /**
    The base FOV that all FOV keys are relative to.
  **/
  @:uproperty public var BaseFOV : unreal.Float32;
  
  /**
    If true, assume all FOV keys are intended be offsets from the start of the animation.
    If false, assume all FOV keys are authored relative to the current FOV of the camera at the start of the animation.
  **/
  @:uproperty public var bRelativeToInitialFOV : Bool;
  
  /**
    If true, assume all transform keys are intended be offsets from the start of the animation. This allows the animation to be authored at any world location and be applied as a delta to the camera.
    If false, assume all transform keys are authored relative to the world origin. Positions will be directly applied as deltas to the camera.
  **/
  @:uproperty public var bRelativeToInitialTransform : Bool;
  
  /**
    AABB in local space.
  **/
  @:uproperty public var BoundingBox : unreal.FBox;
  
  /**
    Length, in seconds.
  **/
  @:uproperty public var AnimLength : unreal.Float32;
  #if WITH_EDITORONLY_DATA
  
  /**
    This is to preview and they only exists in editor
  **/
  @:uproperty public var PreviewInterpGroup : unreal.UInterpGroup;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The UInterpGroup that holds our actual interpolation data.
  **/
  @:uproperty public var CameraInterpGroup : unreal.UInterpGroup;
  
}
