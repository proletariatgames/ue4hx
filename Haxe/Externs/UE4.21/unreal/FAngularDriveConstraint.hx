/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Angular Drive
**/
@:glueCppIncludes("Classes/PhysicsEngine/ConstraintDrives.h")
@:uextern @:ustruct extern class FAngularDriveConstraint {
  
  /**
    Whether motors use SLERP (spherical lerp) or decompose into a Swing motor (cone constraints) and Twist motor (roll constraints). NOTE: SLERP will NOT work if any of the angular constraints are locked.
  **/
  @:uproperty public var AngularDriveMode : unreal.EAngularDriveMode;
  
  /**
    Target angular velocity relative to the body reference frame.
  **/
  @:uproperty public var AngularVelocityTarget : unreal.FVector;
  
  /**
    Target orientation relative to the the body reference frame.
  **/
  @:uproperty public var OrientationTarget : unreal.FRotator;
  
  /**
    Controls the SLERP (spherical lerp) drive between current orientation/velocity and target orientation/velocity. NOTE: This is only available when all three angular limits are either free or limited. Locking any angular limit will turn off the drive implicitly.
  **/
  @:uproperty public var SlerpDrive : unreal.FConstraintDrive;
  
  /**
    Controls the cone constraint drive between current orientation/velocity and target orientation/velocity. This is available as long as there is at least one swing limit set to free or limited.
  **/
  @:uproperty public var SwingDrive : unreal.FConstraintDrive;
  
  /**
    Controls the twist (roll) constraint drive between current orientation/velocity and target orientation/velocity. This is available as long as the twist limit is set to free or limited.
  **/
  @:uproperty public var TwistDrive : unreal.FConstraintDrive;
  
}
