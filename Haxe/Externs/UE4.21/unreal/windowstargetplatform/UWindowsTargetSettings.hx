/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.windowstargetplatform;

/**
  Implements the settings for the Windows target platform. The first instance of this class is initialized in
  WindowsTargetPlatform, really early during the startup sequence before the CDO has been constructed, so its config
  settings are read manually from there.
**/
@:umodule("WindowsTargetPlatform")
@:glueCppIncludes("WindowsTargetSettings.h")
@:uextern @:uclass extern class UWindowsTargetSettings extends unreal.UObject {
  
  /**
    Which of the currently enabled occlusion plugins to use on Windows.
  **/
  @:uproperty public var OcclusionPlugin : unreal.FString;
  
  /**
    Which of the currently enabled reverb plugins to use on Windows.
  **/
  @:uproperty public var ReverbPlugin : unreal.FString;
  
  /**
    Which of the currently enabled spatialization plugins to use on Windows.
  **/
  @:uproperty public var SpatializationPlugin : unreal.FString;
  
  /**
    The number of workers to use to compute source audio. Will only use up to the max number of sources. Will evenly divide sources to each source worker.
  **/
  @:uproperty public var AudioNumSourceWorkers : unreal.Int32;
  
  /**
    The max number of channels (voices) to limit for this platform. The max channels used will be the minimum of this value and the global audio quality settings. A value of 0 will not apply a platform channel count max.
  **/
  @:uproperty public var AudioMaxChannels : unreal.Int32;
  
  /**
    The number of buffers to keep enqueued. More buffers increases latency, but can compensate for variable compute availability in audio callbacks on some platforms.
  **/
  @:uproperty public var AudioNumBuffersToEnqueue : unreal.Int32;
  
  /**
    The amount of audio to compute each callback block. Lower values decrease latency but may increase CPU cost.
  **/
  @:uproperty public var AudioCallbackBufferFrameSize : unreal.Int32;
  
  /**
    Sample rate to run the audio mixer with.
  **/
  @:uproperty public var AudioSampleRate : unreal.Int32;
  
  /**
    The audio device name to use if not the default windows audio device. Leave blank to use default audio device.
  **/
  @:uproperty public var AudioDevice : unreal.FString;
  
  /**
    Determine the minimum supported
  **/
  @:uproperty public var MinimumOSVersion : unreal.windowstargetplatform.EMinimumSupportedOS;
  
  /**
    The collection of RHI's we want to support on this platform.
    This is not always the full list of RHI we can support.
  **/
  @:uproperty public var TargetedRHIs : unreal.TArray<unreal.FString>;
  
  /**
    The compiler version to use for this project. May be different to the chosen IDE.
  **/
  @:uproperty public var Compiler : unreal.windowstargetplatform.ECompilerVersion;
  
}
