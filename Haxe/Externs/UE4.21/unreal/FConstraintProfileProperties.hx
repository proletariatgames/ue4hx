/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Container for properties of a physics constraint that can be easily swapped at runtime. This is useful for switching different setups when going from ragdoll to standup for example
**/
@:glueCppIncludes("Classes/PhysicsEngine/ConstraintInstance.h")
@:uextern @:ustruct extern class FConstraintProfileProperties {
  
  /**
    Whether it is possible to break the joint with linear force.
  **/
  @:uproperty public var bLinearBreakable : Bool;
  
  /**
    Whether it is possible to break the joint with angular force.
  **/
  @:uproperty public var bAngularBreakable : Bool;
  
  /**
    If distance error between bodies exceeds 0.1 units, or rotation error exceeds 10 degrees, body will be projected to fix this.
    For example a chain spinning too fast will have its elements appear detached due to velocity, this will project all bodies so they still appear attached to each other.
  **/
  @:uproperty public var bEnableProjection : Bool;
  
  /**
    When set, the parent body in a constraint will not be affected by the motion of the child
  **/
  @:uproperty public var bParentDominates : Bool;
  
  /**
    Disable collision between bodies joined by this constraint.
  **/
  @:uproperty public var bDisableCollision : Bool;
  @:uproperty public var AngularDrive : unreal.FAngularDriveConstraint;
  @:uproperty public var LinearDrive : unreal.FLinearDriveConstraint;
  @:uproperty public var TwistLimit : unreal.FTwistConstraint;
  @:uproperty public var ConeLimit : unreal.FConeConstraint;
  @:uproperty public var LinearLimit : unreal.FLinearConstraint;
  
  /**
    Torque needed to break the joint.
  **/
  @:uproperty public var AngularBreakThreshold : unreal.Float32;
  
  /**
    Force needed to break the distance constraint.
  **/
  @:uproperty public var LinearBreakThreshold : unreal.Float32;
  
  /**
    Angular tolerance value in world units. If the distance error exceeds this tolerence limit, the body will be projected.
  **/
  @:uproperty public var ProjectionAngularTolerance : unreal.Float32;
  
  /**
    Linear tolerance value in world units. If the distance error exceeds this tolerence limit, the body will be projected.
  **/
  @:uproperty public var ProjectionLinearTolerance : unreal.Float32;
  
}
