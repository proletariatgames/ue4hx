/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Defines how the GBuffer channels are getting manipulated by a decal material pass. Actual index is used to control shader parameters so don't change order.
**/
@:glueCppIncludes("Classes/Materials/Material.h")
@:uname("EDecalBlendMode")
@:uextern @:uenum extern enum EDecalBlendMode {
  
  /**
    Blend full material, updating the GBuffer, does not work for baked lighting.
    @DisplayName Translucent
  **/
  @DisplayName("Translucent")
  DBM_Translucent;
  
  /**
    Modulate BaseColor, blend rest, updating the GBuffer, does not work for baked lighting. Does not work in DBuffer mode (approximated as Translucent).
    @DisplayName Stain
  **/
  @DisplayName("Stain")
  DBM_Stain;
  
  /**
    Only blend normal, updating the GBuffer, does not work for baked lighting.
    @DisplayName Normal
  **/
  @DisplayName("Normal")
  DBM_Normal;
  
  /**
    Additive emissive only.
    @DisplayName Emissive
  **/
  @DisplayName("Emissive")
  DBM_Emissive;
  
  /**
    Put into DBuffer to work for baked lighting as well (becomes DBM_TranslucentNormal if normal is not hooked up).
    @DisplayName DBuffer Translucent Color,Normal,Roughness
  **/
  @DisplayName("DBuffer Translucent Color,Normal,Roughness")
  DBM_DBuffer_ColorNormalRoughness;
  
  /**
    Put into DBuffer to work for baked lighting as well.
    @DisplayName DBuffer Translucent Color
  **/
  @DisplayName("DBuffer Translucent Color")
  DBM_DBuffer_Color;
  
  /**
    Put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Color if normal is not hooked up).
    @DisplayName DBuffer Translucent Color,Normal
  **/
  @DisplayName("DBuffer Translucent Color,Normal")
  DBM_DBuffer_ColorNormal;
  
  /**
    Put into DBuffer to work for baked lighting as well.
    @DisplayName DBuffer Translucent Color,Roughness
  **/
  @DisplayName("DBuffer Translucent Color,Roughness")
  DBM_DBuffer_ColorRoughness;
  
  /**
    Put into DBuffer to work for baked lighting as well.
    @DisplayName DBuffer Translucent Normal
  **/
  @DisplayName("DBuffer Translucent Normal")
  DBM_DBuffer_Normal;
  
  /**
    Put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Roughness if normal is not hooked up).
    @DisplayName DBuffer Translucent Normal,Roughness
  **/
  @DisplayName("DBuffer Translucent Normal,Roughness")
  DBM_DBuffer_NormalRoughness;
  
  /**
    Put into DBuffer to work for baked lighting as well.
    @DisplayName DBuffer Translucent Roughness
  **/
  @DisplayName("DBuffer Translucent Roughness")
  DBM_DBuffer_Roughness;
  
  /**
    Internal DBffer decal blend modes used for auto-converted decals
    @DisplayName DBuffer Emissive
  **/
  @DisplayName("DBuffer Emissive")
  DBM_DBuffer_Emissive;
  
  /**
    DBuffer AlphaComposite (Premultiplied Alpha)
  **/
  @DisplayName("DBuffer AlphaComposite (Premultiplied Alpha)")
  DBM_DBuffer_AlphaComposite;
  
  /**
    DBuffer Emissive AlphaComposite (Premultiplied Alpha)
  **/
  @DisplayName("DBuffer Emissive AlphaComposite (Premultiplied Alpha)")
  DBM_DBuffer_EmissiveAlphaComposite;
  
  /**
    Output signed distance in Opacity depending on LightVector. Note: Can be costly, no shadow casting but receiving, no per pixel normal yet, no quality settings yet
    @DisplayName Volumetric Distance Function (experimental)
  **/
  @DisplayName("Volumetric Distance Function (experimental)")
  DBM_Volumetric_DistanceFunction;
  
  /**
    Blend with existing scene color. Decal color is already pre-multiplied by alpha.
    @DisplayName AlphaComposite (Premultiplied Alpha)
  **/
  @DisplayName("AlphaComposite (Premultiplied Alpha)")
  DBM_AlphaComposite;
  
  /**
    Ambient occlusion.
    @DisplayName Ambient Occlusion
  **/
  @DisplayName("Ambient Occlusion")
  DBM_AmbientOcclusion;
  DBM_MAX;
  
}
