/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Engine/SkeletalMeshSocket.h")
@:uextern @:uclass extern class USkeletalMeshSocket extends unreal.UObject {
  
  /**
    If true then the hierarchy of bones this socket is attached to will always be
              evaluated, even if it had previously been removed due to the current lod setting
  **/
  @:uproperty public var bForceAlwaysAnimated : Bool;
  @:uproperty public var RelativeScale : unreal.FVector;
  @:uproperty public var RelativeRotation : unreal.FRotator;
  @:uproperty public var RelativeLocation : unreal.FVector;
  @:uproperty public var BoneName : unreal.FName;
  
  /**
    Defines a named attachment location on the USkeletalMesh.
    These are set up in editor and used as a shortcut instead of specifying
    everything explicitly to AttachComponent in the SkeletalMeshComponent.
    The Outer of a SkeletalMeshSocket should always be the USkeletalMesh.
  **/
  @:uproperty public var SocketName : unreal.FName;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSocketLocation(SkelComp : unreal.Const<unreal.USkeletalMeshComponent>) : unreal.FVector;
  
  /**
    Sets BoneName, RelativeLocation and RelativeRotation based on closest bone to WorldLocation and WorldNormal
  **/
  @:ufunction(BlueprintCallable) @:final public function InitializeSocketFromLocation(SkelComp : unreal.Const<unreal.USkeletalMeshComponent>, WorldLocation : unreal.FVector, WorldNormal : unreal.FVector) : Void;
  
}
