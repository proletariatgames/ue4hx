/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.animgraphruntime;

/**
  Controller that simulates physics based on the physics asset of the skeletal mesh component
**/
@:umodule("AnimGraphRuntime")
@:glueCppIncludes("Public/BoneControllers/AnimNode_RigidBody.h")
@:uextern @:ustruct extern class FAnimNode_RigidBody extends unreal.animgraphruntime.FAnimNode_SkeletalControlBase {
  
  /**
    When simulation starts, freeze incoming pose.
    This is useful for ragdolls, when we want the simulation to take over.
    It prevents non simulated bones from animating.
  **/
  @:uproperty public var bFreezeIncomingPoseOnStart : Bool;
  
  /**
    When simulation starts, transfer previous bone velocities (from animation)
    to make transition into simulation seamless.
  **/
  @:uproperty public var bTransferBoneVelocities : Bool;
  
  /**
    Scale of cached bounds (vs. actual bounds).
    Increasing this may improve performance, but overlaps may not work as well.
    (A value of 1.0 effectively disables cached bounds).
  **/
  @:uproperty public var CachedBoundsScale : unreal.Float32;
  @:uproperty public var bOverrideWorldGravity : Bool;
  
  /**
    Matters if SimulationSpace is BaseBone
  **/
  @:uproperty public var BaseBoneRef : unreal.FBoneReference;
  
  /**
    What space to simulate the bodies in. This affects how velocities are generated
  **/
  @:uproperty public var SimulationSpace : unreal.animgraphruntime.ESimulationSpace;
  @:uproperty public var bEnableWorldGeometry : Bool;
  
  /**
    The channel we use to find static geometry to collide with
  **/
  @:uproperty public var OverlapChannel : unreal.ECollisionChannel;
  
  /**
    When using non-world-space sim, this is an overall clamp on acceleration derived from ComponentLinearAccScale and ComponentLinearVelScale, to ensure it is not too large.
  **/
  @:uproperty public var ComponentAppliedLinearAccClamp : unreal.FVector;
  
  /**
    When using non-world-space sim, this applies a 'drag' to the bodies in the local space simulation, based on the components world-space velocity.
  **/
  @:uproperty public var ComponentLinearVelScale : unreal.FVector;
  
  /**
    When using non-world-space sim, this controls how much of the components world-space acceleration is passed on to the local-space simulation.
  **/
  @:uproperty public var ComponentLinearAccScale : unreal.FVector;
  
  /**
    Applies a uniform external force in world space. This allows for easily faking inertia of movement while still simulating in component space for example
  **/
  @:uproperty public var ExternalForce : unreal.FVector;
  
  /**
    Override gravity
  **/
  @:uproperty public var OverrideWorldGravity : unreal.FVector;
  
  /**
    Physics asset to use. If empty use the skeletal mesh's default physics asset
  **/
  @:uproperty public var OverridePhysicsAsset : unreal.UPhysicsAsset;
  
}
