/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.animgraphruntime;

/**
  Layered blend (per bone); has dynamic number of blendposes that can blend per different bone sets
**/
@:umodule("AnimGraphRuntime")
@:glueCppIncludes("Public/AnimNodes/AnimNode_LayeredBoneBlend.h")
@:uextern @:ustruct extern class FAnimNode_LayeredBoneBlend extends unreal.FAnimNode_Base {
  @:uproperty private var VirtualBoneGuid : unreal.FGuid;
  @:uproperty private var SkeletonGuid : unreal.FGuid;
  
  /**
    This is buffer to serialize blend weight data for each joints
    This has to save with the corresponding SkeletopnGuid
    If not, it will rebuild in run-time
  **/
  @:uproperty private var PerBoneBlendWeights : unreal.TArray<unreal.FPerBoneBlendWeight>;
  
  /**
    * Max LOD that this node is allowed to run
    * For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)
    * when the component LOD becomes 3, it will stop update/evaluate
    * currently transition would be issue and that has to be re-visited
  **/
  @:uproperty public var LODThreshold : unreal.Int32;
  @:uproperty public var bHasRelevantPoses : Bool;
  
  /**
    Whether to incorporate the per-bone blend weight of the root bone when lending root motion
  **/
  @:uproperty public var bBlendRootMotionBasedOnRootBone : Bool;
  
  /**
    How to blend the layers together
  **/
  @:uproperty public var CurveBlendOption : unreal.ECurveBlendOption;
  
  /**
    Whether to blend bone rotations in mesh space or in local space
  **/
  @:uproperty public var bMeshSpaceRotationBlend : Bool;
  
  /**
    The weights of each layer
  **/
  @:uproperty public var BlendWeights : unreal.TArray<unreal.Float32>;
  
  /**
    Configuration for the parts of the skeleton to blend for each layer. Allows
    certain parts of the tree to be blended out or omitted from the pose.
  **/
  @:uproperty public var LayerSetup : unreal.TArray<unreal.FInputBlendPose>;
  
  /**
    Each layer's blended pose
  **/
  @:uproperty public var BlendPoses : unreal.TArray<unreal.FPoseLink>;
  
  /**
    The source pose
  **/
  @:uproperty public var BasePose : unreal.FPoseLink;
  
}
