/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.animgraphruntime;

/**
  Trail Controller
**/
@:umodule("AnimGraphRuntime")
@:glueCppIncludes("Public/BoneControllers/AnimNode_Trail.h")
@:uextern @:ustruct extern class FAnimNode_Trail extends unreal.animgraphruntime.FAnimNode_SkeletalControlBase {
  
  /**
    How to set last bone rotation. It copies from previous joint if alpha is 0.f, or 1.f will use animated pose
           * This alpha dictates the blend between parent joint and animated pose, and how much you'd like to use animated pose for
  **/
  @:uproperty public var LastBoneRotationAnimAlphaBlend : unreal.Float32;
  #if WITH_EDITORONLY_DATA
  @:deprecated @:uproperty public var TrailBoneRotationBlendAlpha_DEPRECATED : unreal.Float32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Base Joint to calculate velocity from. If none, it will use Component's World Transform. .
  **/
  @:uproperty public var BaseJoint : unreal.FBoneReference;
  
  /**
    'Fake' velocity applied to bones.
  **/
  @:uproperty public var FakeVelocity : unreal.FVector;
  
  /**
    If bLimitStretch is true, this indicates how long a bone can stretch beyond its length in the ref-pose.
  **/
  @:uproperty public var StretchLimit : unreal.Float32;
  
  /**
    List of available planar limits for this node
  **/
  @:uproperty public var PlanarLimits : unreal.TArray<unreal.animgraphruntime.FAnimPhysPlanarLimit>;
  @:uproperty public var RotationOffsets : unreal.TArray<unreal.FVector>;
  @:uproperty public var RotationLimits : unreal.TArray<unreal.animgraphruntime.FRotationLimit>;
  @:uproperty public var RelaxationSpeedScaleInputProcessor : unreal.FInputScaleBiasClamp;
  
  /**
    How quickly we 'relax' the bones to their animated positions. Time 0 will map to top root joint, time 1 will map to the bottom joint.
  **/
  @:uproperty public var TrailRelaxationSpeed : unreal.FRuntimeFloatCurve;
  @:uproperty public var RelaxationSpeedScale : unreal.Float32;
  
  /**
    If you want to avoid loop, how many you want to unwind at once.
    Bigger value can cause jitter as it becomes more unstable in the ordering
    Defaulted to 3. It will use this length to unwind at once
  **/
  @:uproperty public var UnwindingSize : unreal.FakeUInt32;
  #if WITH_EDITORONLY_DATA
  
  /**
    How quickly we 'relax' the bones to their animated positions. Deprecated. Replaced to TrailRelaxationCurve
  **/
  @:deprecated @:uproperty public var TrailRelaxation_DEPRECATED : unreal.Float32;
  
  /**
    Debug Life Time
  **/
  @:uproperty public var DebugLifeTime : unreal.Float32;
  
  /**
    Show Planar Limits *
  **/
  @:uproperty public var bShowLimit : Bool;
  
  /**
    Show Trail Location *
  **/
  @:uproperty public var bShowTrailLocation : Bool;
  
  /**
    Show Base Motion
  **/
  @:uproperty public var bShowBaseMotion : Bool;
  
  /**
    Enable Debug in the PIE. This doesn't work in game
  **/
  @:uproperty public var bEnableDebug : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Fix up rotation to face child for the parent
  **/
  @:uproperty public var bReorientParentToChild : Bool;
  
  /**
    Whether 'fake' velocity should be applied in actor or world space.
  **/
  @:uproperty public var bActorSpaceFakeVel : Bool;
  
  /**
    Whether to evaluate planar limits
  **/
  @:uproperty public var bUsePlanarLimit : Bool;
  
  /**
    Limit the amount that a bone can stretch from its ref-pose length.
  **/
  @:uproperty public var bLimitRotation : Bool;
  
  /**
    Limit the amount that a bone can stretch from its ref-pose length.
  **/
  @:uproperty public var bLimitStretch : Bool;
  
  /**
    Invert the direction specified in ChainBoneAxis.
  **/
  @:uproperty public var bInvertChainBoneAxis : Bool;
  
  /**
    Axis of the bones to point along trail.
  **/
  @:uproperty public var ChainBoneAxis : unreal.EAxis;
  
  /**
    Number of bones above the active one in the hierarchy to modify. ChainLength should be at least 2.
  **/
  @:uproperty public var ChainLength : unreal.Int32;
  
  /**
    Reference to the active bone in the hierarchy to modify.
  **/
  @:uproperty public var TrailBone : unreal.FBoneReference;
  
}
