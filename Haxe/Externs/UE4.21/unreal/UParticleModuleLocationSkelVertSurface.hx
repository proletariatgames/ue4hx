/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Particles/Location/ParticleModuleLocationSkelVertSurface.h")
@:uextern @:uclass extern class UParticleModuleLocationSkelVertSurface extends unreal.UParticleModuleLocationBase {
  
  /**
    UV channel to inherit from the spawn mesh, internally clamped to those available.
  **/
  @:uproperty public var InheritUVChannel : unreal.FakeUInt32;
  
  /**
    If true, particles inherit the associated UV data on spawn. Accessed through dynamic parameter module X and Y, must be a "Spawn Time Only" parameter on "AutoSet" mode. This feature is not supported for GPU particles.
  **/
  @:uproperty public var bInheritUV : Bool;
  
  /**
    If true, particles inherit the associated vertex color on spawn. This feature is not supported for GPU particles.
  **/
  @:uproperty public var bInheritVertexColor : Bool;
  
  /**
    Array of material indices that are valid materials to spawn from.
    If empty, any material will be considered valid
  **/
  @:uproperty public var ValidMaterialIndices : unreal.TArray<unreal.Int32>;
  
  /**
    Normal tolerance.  Value between 1.0 and -1.0 with 1.0 being exact match, 0.0 being everything up to
                  perpendicular and -1.0 being any direction or don't restrict at all.
  **/
  @:uproperty public var NormalCheckTolerance : unreal.Float32;
  
  /**
    Normal tolerance.  0 degrees means it must be an exact match, 180 degrees means it can be any angle.
  **/
  @:uproperty public var NormalCheckToleranceDegrees : unreal.Float32;
  
  /**
    Use this normal to restrict spawning locations
  **/
  @:uproperty public var NormalToCompare : unreal.FVector;
  
  /**
    When true use the RestrictToNormal and NormalTolerance values to check surface normals
  **/
  @:uproperty public var bEnforceNormalCheck : Bool;
  
  /**
    This module will only spawn from verts or surfaces associated with the bones in this list
  **/
  @:uproperty public var ValidAssociatedBones : unreal.TArray<unreal.FName>;
  #if WITH_EDITORONLY_DATA
  
  /**
    The name of the skeletal mesh to use in the editor
  **/
  @:uproperty public var EditorSkelMesh : unreal.USkeletalMesh;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game.
  **/
  @:uproperty public var SkelMeshActorParamName : unreal.FName;
  
  /**
    A scale on how much of the bone's velocity a particle will inherit.
  **/
  @:uproperty public var InheritVelocityScale : unreal.Float32;
  
  /**
    If true, particles inherit the associated bone velocity when spawned
  **/
  @:uproperty public var bInheritBoneVelocity : Bool;
  
  /**
    If true, rotate mesh emitter meshes to orient w/ the vert/surface
  **/
  @:uproperty public var bOrientMeshEmitters : Bool;
  
  /**
    If true, update the particle locations each frame with that of the vert/surface
  **/
  @:uproperty public var bUpdatePositionEachFrame : Bool;
  
  /**
    An offset to apply to each vert/surface
  **/
  @:uproperty public var UniversalOffset : unreal.FVector;
  
  /**
    Whether the module uses Verts or Surfaces for locations.
    
    VERTSURFACESOURCE_Vert          - Use Verts as the source locations.
    VERTSURFACESOURCE_Surface       - Use Surfaces as the source locations.
  **/
  @:uproperty public var SourceType : unreal.ELocationSkelVertSurfaceSource;
  
}
