/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mediacompositingeditor;

@:umodule("MediaCompositingEditor")
@:glueCppIncludes("Private/Sequencer/MediaPlayerRecording.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FMediaPlayerRecordingSettings {
  
  /**
    If the format support it, set the alpha to 1 (or 255).
    @note Removing alpha increase the memory foot print.
  **/
  @:uproperty public var bResetAlpha : Bool;
  
  /**
    An image format specific compression setting.
    For EXRs, either 0 (Default) or 1 (Uncompressed)
    For PNGs & JPEGs, 0 (Default) or a value between 1 (worst quality, best compression) and 100 (best quality, worst compression)
  **/
  @:uproperty public var CompressionQuality : unreal.Int32;
  
  /**
    The image format we wish to record to.
  **/
  @:uproperty public var ImageFormat : unreal.mediacompositingeditor.EMediaPlayerRecordingImageFormat;
  
  /**
    How to numerate the filename.
  **/
  @:uproperty public var NumerationStyle : unreal.mediacompositingeditor.EMediaPlayerRecordingNumerationStyle;
  
  /**
    How to name each frame.
  **/
  @:uproperty public var BaseFilename : unreal.FString;
  
  /**
    Whether this MediaPlayer is active and the image frame will be recorded when the 'Record' button is pressed.
  **/
  @:uproperty public var bRecordMediaFrame : Bool;
  
  /**
    Whether this MediaPlayer is active and his event will be recorded when the 'Record' button is pressed.
  **/
  @:uproperty public var bActive : Bool;
  
}
