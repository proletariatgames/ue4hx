/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Physical materials are used to define the response of a physical object when interacting dynamically with the world.
**/
@:glueCppIncludes("PhysicalMaterials/PhysicalMaterial.h")
@:uextern @:uclass extern class UPhysicalMaterial extends unreal.UObject {
  
  /**
    DEPRECATED - Tire friction scales for specific types of tires. These values are multiplied against our parents' values.
  **/
  @:uproperty public var TireFrictionScales : unreal.TArray<unreal.FTireFrictionScalePair>;
  
  /**
    DEPRECATED - Overall tire friction scalar for every type of tire. This value is multiplied against our parents' values.
  **/
  @:uproperty public var TireFrictionScale : unreal.Float32;
  
  /**
    To edit surface type for your project, use ProjectSettings/Physics/PhysicalSurface section
  **/
  @:uproperty public var SurfaceType : unreal.EPhysicalSurface;
  
  /**
    deprecated
  **/
  @:uproperty public var PhysicalMaterialProperty : unreal.UDEPRECATED_PhysicalMaterialPropertyBase;
  
  /**
    How much to scale the damage threshold by on any destructible we are applied to
  **/
  @:uproperty public var DestructibleDamageThresholdScale : unreal.Float32;
  
  /**
    Used to adjust the way that mass increases as objects get larger. This is applied to the mass as calculated based on a 'solid' object.
    In actuality, larger objects do not tend to be solid, and become more like 'shells' (e.g. a car is not a solid piece of metal).
    Values are clamped to 1 or less.
  **/
  @:uproperty public var RaiseMassToPower : unreal.Float32;
  
  /**
    Used with the shape of the object to calculate its mass properties. The higher the number, the heavier the object. g per cubic cm.
  **/
  @:uproperty public var Density : unreal.Float32;
  
  /**
    If set we will use the RestitutionCombineMode of this material, instead of the RestitutionCombineMode found in the project settings.
  **/
  @:uproperty public var bOverrideRestitutionCombineMode : Bool;
  
  /**
    Restitution combine mode, controls how restitution is computed for multiple materials.
  **/
  @:uproperty public var RestitutionCombineMode : unreal.EFrictionCombineMode;
  
  /**
    Restitution or 'bounciness' of this surface, between 0 (no bounce) and 1 (outgoing velocity is same as incoming).
  **/
  @:uproperty public var Restitution : unreal.Float32;
  
  /**
    If set we will use the FrictionCombineMode of this material, instead of the FrictionCombineMode found in the project settings.
  **/
  @:uproperty public var bOverrideFrictionCombineMode : Bool;
  
  /**
    Friction combine mode, controls how friction is computed for multiple materials.
  **/
  @:uproperty public var FrictionCombineMode : unreal.EFrictionCombineMode;
  
  /**
    Friction value of surface, controls how easily things can slide on this surface (0 is frictionless, higher values increase the amount of friction)
  **/
  @:uproperty public var Friction : unreal.Float32;
  
}
