/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  GameMode is a subclass of GameModeBase that behaves like a multiplayer match-based game.
  It has default behavior for picking spawn points and match state.
  If you want a simpler base, inherit from GameModeBase instead.
**/
@:glueCppIncludes("GameFramework/GameMode.h")
@:uextern @:uclass extern class AGameMode extends unreal.AGameModeBase {
  
  /**
    Returns the current match state, this is an accessor to protect the state machine flow
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMatchState() : unreal.FName;
  
  /**
    Returns true if the match state is InProgress or other gameplay state
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function IsMatchInProgress() : Bool;
  
  /**
    Returns true if the match state is WaitingPostMatch or later
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function HasMatchEnded() : Bool;
  
  /**
    Transition from WaitingToStart to InProgress. You can call this manually, will also get called if ReadyToStartMatch returns true
  **/
  @:ufunction(BlueprintCallable) public function StartMatch() : Void;
  
  /**
    Transition from InProgress to WaitingPostMatch. You can call this manually, will also get called if ReadyToEndMatch returns true
  **/
  @:ufunction(BlueprintCallable) public function EndMatch() : Void;
  
  /**
    Restart the game, by default travel to the current map
  **/
  @:ufunction(BlueprintCallable) public function RestartGame() : Void;
  
  /**
    Report that a match has failed due to unrecoverable error
  **/
  @:ufunction(BlueprintCallable) public function AbortMatch() : Void;
  
  /**
    The maximum number of inactive players before we kick the oldest ones out
  **/
  @:uproperty private var MaxInactivePlayers : unreal.Int32;
  
  /**
    Time a playerstate will stick around in an inactive state after a player logout
  **/
  @:uproperty private var InactivePlayerStateLifeSpan : unreal.Float32;
  
  /**
    PlayerStates of players who have disconnected from the server (saved in case they reconnect)
  **/
  @:uproperty public var InactivePlayerArray : unreal.TArray<unreal.APlayerState>;
  
  /**
    Contains strings describing localized game agnostic messages.
  **/
  @:uproperty public var EngineMessageClass : unreal.TSubclassOf<unreal.ULocalMessage>;
  
  /**
    Number of players that are still traveling from a previous map
  **/
  @:uproperty public var NumTravellingPlayers : unreal.Int32;
  
  /**
    Minimum time before player can respawn after dying.
  **/
  @:uproperty public var MinRespawnDelay : unreal.Float32;
  
  /**
    number of non-human players (AI controlled but participating as a player).
  **/
  @:uproperty public var NumBots : unreal.Int32;
  
  /**
    Current number of human players.
  **/
  @:uproperty public var NumPlayers : unreal.Int32;
  
  /**
    Current number of spectators.
  **/
  @:uproperty public var NumSpectators : unreal.Int32;
  
  /**
    Whether the game should immediately start when the first player logs in. Affects the default behavior of ReadyToStartMatch
  **/
  @:uproperty public var bDelayedStart : Bool;
  
  /**
    What match state we are currently in
  **/
  @:uproperty private var MatchState : unreal.FName;
  
  /**
    Implementable event to respond to match state changes
  **/
  @:ufunction(BlueprintImplementableEvent) private function K2_OnSetMatchState(NewState : unreal.FName) : Void;
  
  /**
    @return True if ready to Start Match. Games should override this
  **/
  @:ufunction(BlueprintNativeEvent) private function ReadyToStartMatch() : Bool;
  
  /**
    @return true if ready to End Match. Games should override this
  **/
  @:ufunction(BlueprintNativeEvent) private function ReadyToEndMatch() : Bool;
  
  /**
    Exec command to broadcast a string to all players
  **/
  @:ufunction(BlueprintCallable) public function Say(Msg : unreal.FString) : Void;
  @:ufunction public function SetBandwidthLimit(AsyncIOBandwidthLimit : unreal.Float32) : Void;
  
}
