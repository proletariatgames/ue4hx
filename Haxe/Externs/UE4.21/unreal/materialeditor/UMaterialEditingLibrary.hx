/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.materialeditor;

/**
  Blueprint library for creating/editing Materials
**/
@:umodule("MaterialEditor")
@:glueCppIncludes("MaterialEditingLibrary.h")
@:uextern @:uclass extern class UMaterialEditingLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Returns number of material expressions in the supplied material
  **/
  @:ufunction(BlueprintCallable) static public function GetNumMaterialExpressions(Material : unreal.Const<unreal.UMaterial>) : unreal.Int32;
  
  /**
    Delete all material expressions in the supplied material
  **/
  @:ufunction(BlueprintCallable) static public function DeleteAllMaterialExpressions(Material : unreal.UMaterial) : Void;
  
  /**
    Delete a specific expression from a material. Will disconnect from other expressions.
  **/
  @:ufunction(BlueprintCallable) static public function DeleteMaterialExpression(Material : unreal.UMaterial, Expression : unreal.UMaterialExpression) : Void;
  
  /**
    Create a new material expression node within the supplied material
    @param  Material                        Material asset to add an expression to
    @param  ExpressionClass         Class of expression to add
    @param  NodePosX                        X position of new expression node
    @param  NodePosY                        Y position of new expression node
  **/
  @:ufunction(BlueprintCallable) static public function CreateMaterialExpression(Material : unreal.UMaterial, ExpressionClass : unreal.TSubclassOf<unreal.UMaterialExpression>, NodePosX : unreal.Int32 = 0, NodePosY : unreal.Int32 = 0) : unreal.UMaterialExpression;
  
  /**
    Enable a particular usage for the supplied material (e.g. SkeletalMesh, ParticleSprite etc)
    @param  Material                        Material to change usage for
    @param  Usage                           New usage type to enable for this material
    @param  bNeedsRecompile         Returned to indicate if material needs recompiling after this change
  **/
  @:ufunction(BlueprintCallable) static public function SetMaterialUsage(Material : unreal.UMaterial, Usage : unreal.EMaterialUsage, bNeedsRecompile : Bool) : Bool;
  
  /**
    Connect a material expression output to one of the material property inputs (e.g. diffuse color, opacity etc)
    @param  FromExpression          Expression to make connection from
    @param  FromOutputName          Name of output of FromExpression to make connection from
    @param  Property                        Property input on material to make connection to
  **/
  @:ufunction(BlueprintCallable) static public function ConnectMaterialProperty(FromExpression : unreal.UMaterialExpression, FromOutputName : unreal.FString, Property : unreal.EMaterialProperty) : Bool;
  
  /**
    Create connection between two material expressions
    @param  FromExpression          Expression to make connection from
    @param  FromOutputName          Name of output of FromExpression to make connection from. Leave empty to use first output.
    @param  ToExpression            Expression to make connection to
    @param  ToInputName                     Name of input of ToExpression to make connection to. Leave empty to use first input.
  **/
  @:ufunction(BlueprintCallable) static public function ConnectMaterialExpressions(FromExpression : unreal.UMaterialExpression, FromOutputName : unreal.FString, ToExpression : unreal.UMaterialExpression, ToInputName : unreal.FString) : Bool;
  
  /**
    Trigger a recompile of a material. Must be performed after making changes to the graph to have changes reflected.
  **/
  @:ufunction(BlueprintCallable) static public function RecompileMaterial(Material : unreal.UMaterial) : Void;
  
  /**
    Returns number of material expressions in the supplied material
  **/
  @:ufunction(BlueprintCallable) static public function GetNumMaterialExpressionsInFunction(MaterialFunction : unreal.Const<unreal.UMaterialFunction>) : unreal.Int32;
  
  /**
    Create a new material expression node within the supplied material function
    @param  MaterialFunction        Material function asset to add an expression to
    @param  ExpressionClass         Class of expression to add
    @param  NodePosX                        X position of new expression node
    @param  NodePosY                        Y position of new expression node
  **/
  @:ufunction(BlueprintCallable) static public function CreateMaterialExpressionInFunction(MaterialFunction : unreal.UMaterialFunction, ExpressionClass : unreal.TSubclassOf<unreal.UMaterialExpression>, NodePosX : unreal.Int32 = 0, NodePosY : unreal.Int32 = 0) : unreal.UMaterialExpression;
  
  /**
    Delete all material expressions in the supplied material function
  **/
  @:ufunction(BlueprintCallable) static public function DeleteAllMaterialExpressionsInFunction(MaterialFunction : unreal.UMaterialFunction) : Void;
  
  /**
    Delete a specific expression from a material function. Will disconnect from other expressions.
  **/
  @:ufunction(BlueprintCallable) static public function DeleteMaterialExpressionInFunction(MaterialFunction : unreal.UMaterialFunction, Expression : unreal.UMaterialExpression) : Void;
  
  /**
    Update a Material Function after edits have been made.
    Will recompile any Materials that use the supplied Material Function.
  **/
  @:ufunction(BlueprintCallable) static public function UpdateMaterialFunction(MaterialFunction : unreal.UMaterialFunctionInterface, @:opt("None") PreviewMaterial : unreal.UMaterial) : Void;
  
  /**
    Set the parent Material or Material Instance to use for this Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function SetMaterialInstanceParent(Instance : unreal.UMaterialInstanceConstant, NewParent : unreal.UMaterialInterface) : Void;
  
  /**
    Clears all material parameters set by this Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function ClearAllMaterialInstanceParameters(Instance : unreal.UMaterialInstanceConstant) : Void;
  
  /**
    Get the current scalar (float) parameter value from a Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function GetMaterialInstanceScalarParameterValue(Instance : unreal.UMaterialInstanceConstant, ParameterName : unreal.FName) : unreal.Float32;
  
  /**
    Set the scalar (float) parameter value for a Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function SetMaterialInstanceScalarParameterValue(Instance : unreal.UMaterialInstanceConstant, ParameterName : unreal.FName, Value : unreal.Float32) : Bool;
  
  /**
    Get the current texture parameter value from a Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function GetMaterialInstanceTextureParameterValue(Instance : unreal.UMaterialInstanceConstant, ParameterName : unreal.FName) : unreal.UTexture;
  
  /**
    Set the texture parameter value for a Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function SetMaterialInstanceTextureParameterValue(Instance : unreal.UMaterialInstanceConstant, ParameterName : unreal.FName, Value : unreal.UTexture) : Bool;
  
  /**
    Get the current vector parameter value from a Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function GetMaterialInstanceVectorParameterValue(Instance : unreal.UMaterialInstanceConstant, ParameterName : unreal.FName) : unreal.FLinearColor;
  
  /**
    Set the vector parameter value for a Material Instance
  **/
  @:ufunction(BlueprintCallable) static public function SetMaterialInstanceVectorParameterValue(Instance : unreal.UMaterialInstanceConstant, ParameterName : unreal.FName, Value : unreal.FLinearColor) : Bool;
  
  /**
    Called after making modifications to a Material Instance to recompile shaders etc.
  **/
  @:ufunction(BlueprintCallable) static public function UpdateMaterialInstance(Instance : unreal.UMaterialInstanceConstant) : Void;
  
}
