/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.umg;

/**
  The combobox allows you to display a list of options to the user in a dropdown menu for them to select one.
**/
@:umodule("UMG")
@:glueCppIncludes("UMG.h")
@:uextern @:uclass extern class UComboBoxString extends unreal.umg.UWidget {
  
  /**
    Called when the combobox is opening
  **/
  @:uproperty public var OnOpening : unreal.umg.FOnOpeningEvent;
  
  /**
    Called when a new item is selected in the combobox.
  **/
  @:uproperty public var OnSelectionChanged : unreal.umg.FOnSelectionChangedEvent;
  
  /**
    Called when the widget is needed for the item.
  **/
  @:uproperty public var OnGenerateWidgetEvent : unreal.umg.FGenerateWidgetForString;
  @:uproperty public var bIsFocusable : Bool;
  
  /**
    The foreground color to pass through the hierarchy.
  **/
  @:uproperty public var ForegroundColor : unreal.slatecore.FSlateColor;
  
  /**
    The default font to use in the combobox, only applies if you're not implementing OnGenerateWidgetEvent
    to factory each new entry.
  **/
  @:uproperty public var Font : unreal.slatecore.FSlateFontInfo;
  
  /**
    When false, directional keys will change the selection. When true, ComboBox
    must be activated and will only capture arrow input while activated.
  **/
  @:uproperty public var EnableGamepadNavigationMode : Bool;
  
  /**
    When false, the down arrow is not generated and it is up to the API consumer
    to make their own visual hint that this is a drop down.
  **/
  @:uproperty public var HasDownArrow : Bool;
  
  /**
    The max height of the combobox list that opens
  **/
  @:uproperty public var MaxListHeight : unreal.Float32;
  @:uproperty public var ContentPadding : unreal.slatecore.FMargin;
  
  /**
    The item row style.
  **/
  @:uproperty public var ItemStyle : unreal.slatecore.FTableRowStyle;
  
  /**
    The style.
  **/
  @:uproperty public var WidgetStyle : unreal.slatecore.FComboBoxStyle;
  @:ufunction(BlueprintCallable) @:final public function AddOption(Option : unreal.FString) : Void;
  @:ufunction(BlueprintCallable) @:final public function RemoveOption(Option : unreal.FString) : Bool;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function FindOptionIndex(Option : unreal.FString) : unreal.Int32;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetOptionAtIndex(Index : unreal.Int32) : unreal.FString;
  @:ufunction(BlueprintCallable) @:final public function ClearOptions() : Void;
  @:ufunction(BlueprintCallable) @:final public function ClearSelection() : Void;
  
  /**
    Refreshes the list of options.  If you added new ones, and want to update the list even if it's
    currently being displayed use this.
  **/
  @:ufunction(BlueprintCallable) @:final public function RefreshOptions() : Void;
  @:ufunction(BlueprintCallable) @:final public function SetSelectedOption(Option : unreal.FString) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSelectedOption() : unreal.FString;
  
  /**
    @return The number of options
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetOptionCount() : unreal.Int32;
  
}
