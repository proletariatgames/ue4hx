/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.umg;

/**
  A special box panel that auto-generates its entries at both design-time and runtime.
  Useful for cases where you can have a varying number of entries, but it isn't worth the effort or conceptual overhead to set up a list/tile view.
  Note that entries here are *not* virtualized as they are in the list views, so generally this should be avoided if you intend to scroll through lots of items.
  
  No children can be manually added in the designer - all are auto-generated based on the given entry class.
**/
@:umodule("UMG")
@:glueCppIncludes("UMG.h")
@:uextern @:uclass extern class UDynamicEntryBox extends unreal.umg.UWidget {
  
  /**
    Clear out the box entries, optionally deleting the underlying Slate widgets entirely as well.
  **/
  @:ufunction(BlueprintCallable) @:final public function Reset(bDeleteWidgets : Bool = false) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAllEntries() : unreal.Const<unreal.PRef<unreal.TArray<unreal.umg.UUserWidget>>>;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetNumEntries() : unreal.Int32;
  @:ufunction(BlueprintCallable) @:final public function RemoveEntry(EntryWidget : unreal.umg.UUserWidget) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetEntrySpacing(InEntrySpacing : unreal.Const<unreal.PRef<unreal.FVector2D>>) : Void;
  
  /**
    The maximum size of each entry in the dominant axis of the box. Vertical/Horizontal boxes only.
  **/
  @:uproperty private var MaxElementSize : unreal.Int32;
  
  /**
    Vertical alignment of generated entries. Horizontal/Vertical/Wrap boxes only.
  **/
  @:uproperty private var EntryVerticalAlignment : unreal.slatecore.EVerticalAlignment;
  
  /**
    Horizontal alignment of generated entries. Horizontal/Vertical/Wrap boxes only.
  **/
  @:uproperty private var EntryHorizontalAlignment : unreal.slatecore.EHorizontalAlignment;
  
  /**
    Sizing rule to apply to generated entries. Horizontal/Vertical boxes only.
  **/
  @:uproperty private var EntrySizeRule : unreal.umg.FSlateChildSize;
  
  /**
    The looping sequence of entry paddings to apply as entries are created. Overlay boxes only. Ignores EntrySpacing if not empty.
  **/
  @:uproperty private var SpacingPattern : unreal.TArray<unreal.FVector2D>;
  
  /**
    The padding to apply between entries in the box.
    Note horizontal boxes only use the X and vertical boxes only use Y. Value is also ignored for the first entry in the box.
    Wrap and Overlay types use both X and Y for spacing.
  **/
  @:uproperty private var EntrySpacing : unreal.FVector2D;
  
  /**
    The type of box panel into which created entries are added. Some differences in functionality exist between each type.
  **/
  @:uproperty private var EntryBoxType : unreal.umg.EDynamicBoxType;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var NumDesignerPreviewEntries : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  
}
