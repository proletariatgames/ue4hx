/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.umg;

/**
  Editable text box widget
**/
@:umodule("UMG")
@:glueCppIncludes("UMG.h")
@:uextern @:uclass extern class UEditableText extends unreal.umg.UWidget {
  
  /**
    Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus.
  **/
  @:uproperty public var OnTextCommitted : unreal.umg.FOnEditableTextCommittedEvent;
  
  /**
    Called whenever the text is changed interactively by the user
  **/
  @:uproperty public var OnTextChanged : unreal.umg.FOnEditableTextChangedEvent;
  
  /**
    Controls how the text within this widget should be shaped.
  **/
  @:uproperty public var ShapedTextOptions : unreal.umg.FShapedTextOptions;
  
  /**
    How the text should be aligned with the margin.
  **/
  @:uproperty public var Justification : unreal.slate.ETextJustify;
  
  /**
    What action should be taken when the virtual keyboard is dismissed?
  **/
  @:uproperty public var VirtualKeyboardDismissAction : unreal.slate.EVirtualKeyboardDismissAction;
  
  /**
    Additional options for the virtual keyboard
  **/
  @:uproperty public var VirtualKeyboardOptions : unreal.slate.FVirtualKeyboardOptions;
  
  /**
    If we're on a platform that requires a virtual keyboard, what kind of keyboard should this widget use?
  **/
  @:uproperty public var KeyboardType : unreal.umg.EVirtualKeyboardType;
  
  /**
    Whether the context menu can be opened
  **/
  @:uproperty public var AllowContextMenu : Bool;
  
  /**
    Whether to select all text when pressing enter to commit changes
  **/
  @:uproperty public var SelectAllTextOnCommit : Bool;
  
  /**
    Whether to clear keyboard focus when pressing enter to commit changes
  **/
  @:uproperty public var ClearKeyboardFocusOnCommit : Bool;
  
  /**
    Whether to allow the user to back out of changes when they press the escape key
  **/
  @:uproperty public var RevertTextOnEscape : Bool;
  
  /**
    Whether to select all text when the user clicks to give focus on the widget
  **/
  @:uproperty public var SelectAllTextWhenFocused : Bool;
  
  /**
    Workaround as we lose focus when the auto completion closes.
  **/
  @:uproperty public var IsCaretMovedWhenGainFocus : Bool;
  
  /**
    Minimum width that a text block should be
  **/
  @:uproperty public var MinimumDesiredWidth : unreal.Float32;
  
  /**
    Sets whether this text box is for storing a password
  **/
  @:uproperty public var IsPassword : Bool;
  
  /**
    Sets whether this text box can actually be modified interactively by the user
  **/
  @:uproperty public var IsReadOnly : Bool;
  
  /**
    Text color and opacity (overrides Style)
  **/
  @:deprecated @:uproperty public var ColorAndOpacity_DEPRECATED : unreal.slatecore.FSlateColor;
  
  /**
    Font color and opacity (overrides Style)
  **/
  @:deprecated @:uproperty public var Font_DEPRECATED : unreal.slatecore.FSlateFontInfo;
  
  /**
    Image brush used for the caret (overrides Style)
  **/
  @:deprecated @:uproperty public var CaretImage_DEPRECATED : unreal.USlateBrushAsset;
  
  /**
    Background image for the composing text (overrides Style)
  **/
  @:deprecated @:uproperty public var BackgroundImageComposing_DEPRECATED : unreal.USlateBrushAsset;
  
  /**
    Background image for the selected text (overrides Style)
  **/
  @:deprecated @:uproperty public var BackgroundImageSelected_DEPRECATED : unreal.USlateBrushAsset;
  
  /**
    Text style
  **/
  @:deprecated @:uproperty public var Style_DEPRECATED : unreal.slatecore.USlateWidgetStyleAsset;
  
  /**
    The style
  **/
  @:uproperty public var WidgetStyle : unreal.slatecore.FEditableTextStyle;
  
  /**
    A bindable delegate to allow logic to drive the hint text of the widget
  **/
  @:uproperty public var HintTextDelegate : unreal.umg.FGetText;
  
  /**
    Hint text that appears when there is no text in the text box
  **/
  @:uproperty public var HintText : unreal.FText;
  
  /**
    A bindable delegate to allow logic to drive the text of the widget
  **/
  @:uproperty public var TextDelegate : unreal.umg.FGetText;
  
  /**
    The text content for this editable text box widget
  **/
  @:uproperty public var Text : unreal.FText;
  
  /**
    Gets the widget text
    @return The widget text
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetText() : unreal.FText;
  
  /**
    Directly sets the widget text.
    Warning: This will wipe any binding created for the Text property!
    @param InText The text to assign to the widget
  **/
  @:ufunction(BlueprintCallable) @:final public function SetText(InText : unreal.FText) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetIsPassword(InbIsPassword : Bool) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetHintText(InHintText : unreal.FText) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetIsReadOnly(InbIsReadyOnly : Bool) : Void;
  
}
