/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.umg;

/**
  A widget for selecting a single key or a single key with a modifier.
**/
@:umodule("UMG")
@:glueCppIncludes("UMG.h")
@:uextern @:uclass extern class UInputKeySelector extends unreal.umg.UWidget {
  
  /**
    Called whenever the key selection mode starts or stops.
  **/
  @:uproperty public var OnIsSelectingKeyChanged : unreal.umg.FOnIsSelectingKeyChanged;
  
  /**
    Called whenever a new key is selected by the user.
  **/
  @:uproperty public var OnKeySelected : unreal.umg.FOnKeySelected;
  
  /**
    When true gamepad keys are allowed in the input chord representing the selected key, otherwise they are ignored.
  **/
  @:uproperty public var EscapeKeys : unreal.TArray<unreal.inputcore.FKey>;
  
  /**
    When true gamepad keys are allowed in the input chord representing the selected key, otherwise they are ignored.
  **/
  @:uproperty public var bAllowGamepadKeys : Bool;
  
  /**
    input chord representing the selected key, if false modifier keys are ignored.
  **/
  @:uproperty public var bAllowModifierKeys : Bool;
  
  /**
    Sets the text to display when no key text is available or not selecting a key.
  **/
  @:uproperty public var NoKeySpecifiedText : unreal.FText;
  
  /**
    Sets the text which is displayed while selecting keys.
  **/
  @:uproperty public var KeySelectionText : unreal.FText;
  @:deprecated @:uproperty public var ColorAndOpacity_DEPRECATED : unreal.FLinearColor;
  
  /**
    The amount of blank space around the text used to display the currently selected key.
  **/
  @:uproperty public var Margin : unreal.slatecore.FMargin;
  @:deprecated @:uproperty public var Font_DEPRECATED : unreal.slatecore.FSlateFontInfo;
  
  /**
    The currently selected key chord.
  **/
  @:uproperty public var SelectedKey : unreal.slate.FInputChord;
  
  /**
    The button style used at runtime
  **/
  @:uproperty public var TextStyle : unreal.slatecore.FTextBlockStyle;
  
  /**
    The button style used at runtime
  **/
  @:uproperty public var WidgetStyle : unreal.slatecore.FButtonStyle;
  
  /**
    Sets the currently selected key.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSelectedKey(InSelectedKey : unreal.Const<unreal.PRef<unreal.slate.FInputChord>>) : Void;
  
  /**
    Sets the text which is displayed while selecting keys.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetKeySelectionText(InKeySelectionText : unreal.FText) : Void;
  
  /**
    Sets the text to display when no key text is available or not selecting a key.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNoKeySpecifiedText(InNoKeySpecifiedText : unreal.FText) : Void;
  
  /**
    Sets whether or not modifier keys are allowed in the selected key.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAllowModifierKeys(bInAllowModifierKeys : Bool) : Void;
  
  /**
    Sets whether or not gamepad keys are allowed in the selected key.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAllowGamepadKeys(bInAllowGamepadKeys : Bool) : Void;
  
  /**
    Returns true if the widget is currently selecting a key, otherwise returns false.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetIsSelectingKey() : Bool;
  
  /**
    Sets the visibility of the text block.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTextBlockVisibility(InVisibility : unreal.Const<unreal.umg.ESlateVisibility>) : Void;
  
  /**
    Sets escape keys.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEscapeKeys(InKeys : unreal.Const<unreal.PRef<unreal.TArray<unreal.inputcore.FKey>>>) : Void;
  
}
