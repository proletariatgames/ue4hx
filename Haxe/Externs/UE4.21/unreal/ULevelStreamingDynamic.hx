/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Engine/LevelStreamingDynamic.h")
@:uextern @:uclass extern class ULevelStreamingDynamic extends unreal.ULevelStreaming {
  
  /**
    Whether the level should be visible at startup if it is loaded
  **/
  @:uproperty public var bInitiallyVisible : Bool;
  
  /**
    Whether the level should be loaded at startup
  **/
  @:uproperty public var bInitiallyLoaded : Bool;
  
  /**
    Stream in a level with a specific location and rotation. You can create multiple instances of the same level!
    
    The level to be loaded does not have to be in the persistent map's Levels list, however to ensure that the .umap does get
    packaged, please be sure to include the .umap in your Packaging Settings:
    
      Project Settings -> Packaging -> List of Maps to Include in a Packaged Build (you may have to show advanced or type in filter)
    
    @param LevelName - Level package name, ex: /Game/Maps/MyMapName, specifying short name like MyMapName will force very slow search on disk
    @param Location - World space location where the level should be spawned
    @param Rotation - World space rotation for rotating the entire level
    @param bOutSuccess - Whether operation was successful (map was found and added to the sub-levels list)
    @return Streaming level object for a level instance
  **/
  @:ufunction(BlueprintCallable) static public function LoadLevelInstance(WorldContextObject : unreal.UObject, LevelName : unreal.FString, Location : unreal.FVector, Rotation : unreal.FRotator, bOutSuccess : Bool) : unreal.ULevelStreamingDynamic;
  
}
