/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

/**
  Engine that drives the Editor.
  Separate from UGameEngine because it may have much different functionality than desired for an instance of a game itself.
**/
@:umodule("UnrealEd")
@:glueCppIncludes("Editor/EditorEngine.h")
@:uextern @:uclass extern class UEditorEngine extends unreal.UEngine {
  @:uproperty private var ActorGroupingUtils : unreal.editor.UActorGroupingUtils;
  @:uproperty private var ActorGroupingUtilsClassName : unreal.FSoftClassPath;
  
  /**
    Brush builders that have been created in the editor
  **/
  @:uproperty public var BrushBuilders : unreal.TArray<unreal.UBrushBuilder>;
  
  /**
    If true, then draw particle debug helpers in editor viewports
  **/
  @:uproperty public var bDrawParticleHelpers : Bool;
  
  /**
    If true, then draw sockets when socket snapping is enabled in 'g' mode
  **/
  @:uproperty public var bDrawSocketsInGMode : Bool;
  
  /**
    The distance to place the camera from an emitter actor when custom zooming is enabled
  **/
  @:uproperty public var CustomCameraAlignEmitterDistance : unreal.Float32;
  
  /**
    If "Camera Align" emitter handling uses a custom zoom or not
  **/
  @:uproperty public var bCustomCameraAlignEmitter : Bool;
  
  /**
    When true, the preview mesh mode is activated.
  **/
  @:uproperty public var bShowPreviewMesh : Bool;
  
  /**
    The index of the mesh to use from the list of preview meshes.
  **/
  @:uproperty public var PreviewMeshIndex : unreal.Int32;
  
  /**
    A mesh component used to preview in editor without spawning a static mesh actor.
  **/
  @:uproperty public var PreviewMeshComp : unreal.UStaticMeshComponent;
  @:uproperty public var ScratchRenderTarget256 : unreal.UTextureRenderTarget2D;
  @:uproperty public var ScratchRenderTarget512 : unreal.UTextureRenderTarget2D;
  @:uproperty public var ScratchRenderTarget1024 : unreal.UTextureRenderTarget2D;
  
  /**
    Temporary render target that can be used by the editor.
  **/
  @:uproperty public var ScratchRenderTarget2048 : unreal.UTextureRenderTarget2D;
  
  /**
    Play world url string edited by a user.
  **/
  @:uproperty public var UserEditedPlayWorldURL : unreal.FString;
  
  /**
    When set to anything other than -1, indicates a specific In-Editor viewport index that PIE should use
  **/
  @:uproperty public var PlayInEditorViewportIndex : unreal.Int32;
  
  /**
    Currently targeted device for mobile previewer.
  **/
  @:uproperty public var BuildPlayDevice : unreal.Int32;
  
  /**
    Mobile preview settings for what orientation to default to
  **/
  @:uproperty public var bMobilePreviewPortrait : Bool;
  
  /**
    The current play world destination (I.E console).  -1 means no current play world destination, 0 or more is an index into the GConsoleSupportContainer
  **/
  @:uproperty public var CurrentPlayWorldDestination : unreal.Int32;
  
  /**
    Where did the person want to play? Where to play the game - -1 means in editor, 0 or more is an index into the GConsoleSupportContainer
  **/
  @:uproperty public var PlayWorldDestination : unreal.Int32;
  
  /**
    When Simulating In Editor, an array of all actors that were selected when it began
  **/
  @:uproperty public var ActorsThatWereSelected : unreal.TArray<unreal.TWeakObjectPtr<unreal.AActor>>;
  
  /**
    When Simulating In Editor, a pointer to the original (non-simulating) editor world
  **/
  @:uproperty public var EditorWorld : unreal.UWorld;
  
  /**
    The PlayerStart class used when spawning the player at the current camera location.
  **/
  @:uproperty public var PlayFromHerePlayerStartClass : unreal.TSubclassOf<unreal.ANavigationObjectBase>;
  
  /**
    True if we should force a selection change notification during an undo/redo
  **/
  @:uproperty public var bNotifyUndoRedoSelectionChange : Bool;
  
  /**
    True if we should not display notifications about undo/redo
  **/
  @:uproperty public var bSquelchTransactionNotification : Bool;
  
  /**
    True if we're Simulating In Editor, as opposed to Playing In Editor.  In this mode, simulation takes place right the level editing environment
  **/
  @:uproperty public var bIsSimulatingInEditor : Bool;
  
  /**
    True to enable VR preview mode when launching the game from the editor on PC platform
  **/
  @:uproperty public var bUseVRPreviewForPlayWorld : Bool;
  
  /**
    True to enable mobile preview mode when launching the game from the editor on PC platform
  **/
  @:uproperty public var bUseMobilePreviewForPlayWorld : Bool;
  
  /**
    Did the request include the optional location and rotation?
  **/
  @:uproperty public var bHasPlayWorldPlacement : Bool;
  
  /**
    True if there is a pending end play map queued
  **/
  @:uproperty public var bRequestEndPlayMapQueued : Bool;
  
  /**
    Allows multipel PIE worlds under a single instance. If false, you can only do multiple UE4 processes for pie networking
  **/
  @:uproperty public var bAllowMultiplePIEWorlds : Bool;
  
  /**
    True if we are requesting to start a simulation-in-editor session
  **/
  @:uproperty public var bIsSimulateInEditorQueued : Bool;
  
  /**
    Has a request to toggle between PIE and SIE been made?
  **/
  @:uproperty public var bIsToggleBetweenPIEandSIEQueued : Bool;
  
  /**
    Has a request for "Play From Here" been made?
  **/
  @:uproperty public var bIsPlayWorldQueued : Bool;
  
  /**
    An optional rotation for the starting location for "Play From Here"
  **/
  @:uproperty public var PlayWorldRotation : unreal.FRotator;
  
  /**
    An optional location for the starting location for "Play From Here"
  **/
  @:uproperty public var PlayWorldLocation : unreal.FVector;
  
  /**
    A pointer to a UWorld that is the duplicated/saved-loaded to be played in with "Play From Here"
  **/
  @:uproperty public var PlayWorld : unreal.UWorld;
  
  /**
    Additional per-user/per-game options set in the .ini file. Should be in the form "?option1=X?option2?option3=Y"
  **/
  @:uproperty public var InEditorGameURLOptions : unreal.FString;
  
  /**
    The name of the file currently being opened in the editor. "" if no file is being opened.
  **/
  @:uproperty public var UserOpenedFile : unreal.FString;
  
  /**
    Array of actor factories created at editor startup and used by context menu etc.
  **/
  @:uproperty public var ActorFactories : unreal.TArray<unreal.editor.UActorFactory>;
  @:uproperty public var HeightMapExportClassName : unreal.FString;
  
  /**
    If true, same type views will be camera tied, and ortho views will use perspective view for LOD parenting
  **/
  @:uproperty public var bEnableLODLocking : Bool;
  
  /**
    If true, socket snapping is enabled in the main level viewports.
  **/
  @:uproperty public var bEnableSocketSnapping : Bool;
  
  /**
    If true, show translucent marker polygons on the builder brush and volumes.
  **/
  @:uproperty public var bShowBrushMarkerPolys : Bool;
  @:uproperty public var GameCommandLine : unreal.FString;
  @:uproperty public var GodMode : Bool;
  @:uproperty public var UseAxisIndicator : Bool;
  
  /**
    Advanced.
  **/
  @:uproperty public var UseSizingBox : Bool;
  
  /**
    Setting for the detail mode to show in the editor viewports
  **/
  @:uproperty public var DetailMode : unreal.EDetailMode;
  @:uproperty public var MouseMovement : unreal.FVector;
  @:uproperty public var ClickPlane : unreal.FPlane;
  @:uproperty public var ClickLocation : unreal.FVector;
  @:uproperty public var UnsnappedClickLocation : unreal.FVector;
  @:uproperty public var ParentContext : unreal.UPackage;
  
  /**
    Other variables.
  **/
  @:uproperty public var ClickFlags : unreal.FakeUInt32;
  @:uproperty public var IsImportingT3D : Bool;
  
  /**
    Toggles.
  **/
  @:uproperty public var bFastRebuild : Bool;
  @:uproperty public var EditorCylinder : unreal.UStaticMesh;
  @:uproperty public var EditorPlane : unreal.UStaticMesh;
  @:uproperty public var EditorSphere : unreal.UStaticMesh;
  
  /**
    Used in UnrealEd for showing materials
  **/
  @:uproperty public var EditorCube : unreal.UStaticMesh;
  @:uproperty public var PreviewAudioComponent : unreal.UAudioComponent;
  
  /**
    Audio
  **/
  @:uproperty public var PreviewSoundCue : unreal.USoundCue;
  
  /**
    Font used by Canvas-based editors
  **/
  @:uproperty public var EditorFont : unreal.UFont;
  
  /**
    Textures.
  **/
  @:uproperty public var Bad : unreal.UTexture2D;
  @:uproperty public var Trans : unreal.editor.UTransactor;
  @:uproperty public var ConversionTempModel : unreal.UModel;
  
  /**
    Objects.
  **/
  @:uproperty public var TempModel : unreal.UModel;
  
}
