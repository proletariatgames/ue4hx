/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

/**
  Configure miscellaneous settings for the Level Editor.
**/
@:umodule("UnrealEd")
@:glueCppIncludes("Settings/LevelEditorMiscSettings.h")
@:uextern @:uclass extern class ULevelEditorMiscSettings extends unreal.UDeveloperSettings {
  
  /**
    The save directory for newly created screenshots
  **/
  @:uproperty public var EditorScreenshotSaveDirectory : unreal.FDirectoryPath;
  
  /**
    The default level streaming class to use when adding new streaming levels
  **/
  @:uproperty public var DefaultLevelStreamingClass : unreal.TSubclassOf<unreal.ULevelStreaming>;
  
  /**
    Enables audio feedback for certain operations in Unreal Editor, such as entering and exiting Play mode
  **/
  @:uproperty public var bEnableEditorSounds : Bool;
  
  /**
    Global volume setting for the editor
  **/
  @:uproperty public var EditorVolumeLevel : unreal.Float32;
  
  /**
    If true audio will be enabled in the editor. Does not affect PIE *
  **/
  @:uproperty public var bEnableRealTimeAudio : Bool;
  
  /**
    If checked audio playing in the editor will continue to play even if the editor is in the background
  **/
  @:uproperty public var bAllowBackgroundAudio : Bool;
  
  /**
    If enabled, replacing actors will respect the scale of the original actor.  Otherwise, the replaced actors will have a scale of 1.0
  **/
  @:uproperty public var bReplaceRespectsScale : Bool;
  
  /**
    If true, Navigation will auto-update
  **/
  @:uproperty public var bNavigationAutoUpdate : Bool;
  
  /**
    If true, the pivot offset for BSP will be automatically moved to stay centered on its vertices
  **/
  @:uproperty public var bAutoMoveBSPPivotOffset : Bool;
  
  /**
    If true, BSP will auto-update
  **/
  @:uproperty public var bBSPAutoUpdate : Bool;
  
  /**
    If checked lighting will be automatically applied to the level after a static lighting build is complete.
    Otherwise you will be prompted to apply it
  **/
  @:uproperty public var bAutoApplyLightingEnable : Bool;
  
}
