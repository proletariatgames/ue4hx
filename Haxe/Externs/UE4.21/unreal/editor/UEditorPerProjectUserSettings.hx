/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:umodule("UnrealEd")
@:glueCppIncludes("Editor/EditorPerProjectUserSettings.h")
@:uextern @:uclass extern class UEditorPerProjectUserSettings extends unreal.UObject {
  
  /**
    whether or not the above PreviewShaderPlatformName is a platform that needs to override the material settings in UMaterialShaderQualitySettings
  **/
  @:uproperty public var bIsMaterialQualityOverridePlatform : Bool;
  
  /**
    The name of the shader platform that will be used in the editor
  **/
  @:uproperty public var PreviewShaderPlatformName : unreal.FName;
  @:uproperty public var MaterialQualityLevel : unreal.Int32;
  @:uproperty public var AssetViewerProfileName : unreal.FString;
  
  /**
    Per project user settings for which asset viewer profile should be used
  **/
  @:uproperty public var AssetViewerProfileIndex : unreal.Int32;
  @:uproperty public var BlueprintFavorites : unreal.kismet.UBlueprintPaletteFavorites;
  
  /**
    True if user should be allowed to select translucent objects in perspective viewports
  **/
  @:uproperty public var bAllowSelectTranslucent : Bool;
  
  /**
    If this is true, the user will not be asked to fully load a package before saving or before creating a new object
  **/
  @:uproperty public var bSuppressFullyLoadPrompt : Bool;
  
  /**
    Controls whether packages which are checked-out are automatically fully loaded at startup
  **/
  @:uproperty public var bAutoloadCheckedOutPackages : Bool;
  
  /**
    How fast the SCS viewport camera moves
  **/
  @:uproperty public var SCSViewportCameraSpeed : unreal.Int32;
  @:uproperty public var bSCSEditorShowFloor : Bool;
  @:uproperty public var bSCSEditorShowGrid : Bool;
  
  /**
    Controls the minimum value at which the property matrix editor will display a loading bar when pasting values
  **/
  @:uproperty public var PropertyMatrix_NumberOfPasteOperationsBeforeWarning : unreal.Int32;
  
  /**
    Select to make Distributions use the curves, not the baked lookup tables.
  **/
  @:uproperty public var bUseCurvesForDistributions : Bool;
  
  /**
    If enabled, will compare an animation's sequence length and curves against the old data and inform the user if something changed
  **/
  @:uproperty public var bAnimationReimportWarnings : Bool;
  
  /**
    If enabled, export level with attachment hierarchy set
  **/
  @:uproperty public var bKeepAttachHierarchy : Bool;
  
  /**
    Specify a project data source folder to store relative source file path to ease the re-import process
  **/
  @:uproperty public var DataSourceFolder : unreal.FDirectoryPath;
  
  /**
    If enabled, the fbx option dialog will show when user re-import a fbx
  **/
  @:uproperty public var bShowImportDialogAtReimport : Bool;
  
  /**
    If enabled, the fbx parser will keep the fbx namespaces, otherwise the namespace will be append to fbx node.
  **/
  @:uproperty public var bKeepFbxNamespace : Bool;
  
  /**
    If enabled, the compile message log window will open if there is a compiler error on Hot Reload
  **/
  @:uproperty public var bShowCompilerLogOnCompileError : Bool;
  
  /**
    If enabled, any newly added classes will be automatically compiled and trigger a hot-reload of the module they were added to
  **/
  @:uproperty public var bAutomaticallyHotReloadNewClasses : Bool;
  
  /**
    Folder in which Simplygon Swarm will store intermediate texture and mesh data that is uploaded to the Swarm
  **/
  @:uproperty public var SwarmIntermediateFolder : unreal.FString;
  @:uproperty public var SwarmMaxUploadChunkSizeInMB : unreal.FakeUInt32;
  
  /**
    Number of concurrent swarm jobs to execute. This is independent of the main job queue.
  **/
  @:uproperty public var SwarmNumOfConcurrentJobs : unreal.FakeUInt32;
  
  /**
    Time between JSON net requests for Simplygon Swarm
  **/
  @:uproperty public var SimplygonSwarmDelay : unreal.FakeUInt32;
  
  /**
    Enable swarm debugging features. Temp ssf files are not removed. Detailed message printing
  **/
  @:uproperty public var bEnableSwarmDebugging : Bool;
  
  /**
    Server IP for the distributed Simplygon server
  **/
  @:uproperty public var SimplygonServerIP : unreal.FString;
  
  /**
    When enabled, use SimplygonSwarm Module / server to create proxies
  **/
  @:uproperty public var bUseSimplygonSwarm : Bool;
  
  /**
    When enabled, Engine Version Number is displayed in the ProjectBadge
  **/
  @:uproperty public var bDisplayEngineVersionInBadge : Bool;
  
  /**
    If enabled, behavior tree debugger will collect its data even when all behavior tree editor windows are closed
  **/
  @:uproperty public var bAlwaysGatherBehaviorTreeDebuggerData : Bool;
  
  /**
    , Category=DeveloperTools
  **/
  @:uproperty public var bDisplayActionListItemRefIds : Bool;
  
  /**
    If enabled, tooltips linked to documentation will show the developer the link bound to that UI item
  **/
  @:uproperty public var bDisplayDocumentationLink : Bool;
  
  /**
    If enabled, any newly opened UI menus, menu bars, and toolbars will show the developer hooks that would accept extensions
  **/
  @:uproperty public var bDisplayUIExtensionPoints : Bool;
  
}
