/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

@:umodule("UnrealEd")
@:glueCppIncludes("Preferences/PhysicsAssetEditorOptions.h")
@:uextern @:uclass extern class UPhysicsAssetEditorOptions extends unreal.UObject {
  
  /**
    When set, cloth will reset each time simulation is toggled
  **/
  @:uproperty public var bResetClothWhenSimulating : Bool;
  
  /**
    When set, turns opacity of solid rendering for unselected bodies to zero
  **/
  @:uproperty public var bSolidRenderingForSelectedOnly : Bool;
  
  /**
    Opacity of 'solid' rendering
  **/
  @:uproperty public var CollisionOpacity : unreal.Float32;
  
  /**
    View mode for constraints in simulation mode
  **/
  @:uproperty public var SimulationConstraintViewMode : unreal.editor.EPhysicsAssetEditorConstraintViewMode;
  
  /**
    View mode for collision in simulation mode
  **/
  @:uproperty public var SimulationCollisionViewMode : unreal.editor.EPhysicsAssetEditorRenderMode;
  
  /**
    View mode for meshes in simulation mode
  **/
  @:uproperty public var SimulationMeshViewMode : unreal.editor.EPhysicsAssetEditorRenderMode;
  
  /**
    View mode for constraints in edit mode
  **/
  @:uproperty public var ConstraintViewMode : unreal.editor.EPhysicsAssetEditorConstraintViewMode;
  
  /**
    View mode for collision in edit mode
  **/
  @:uproperty public var CollisionViewMode : unreal.editor.EPhysicsAssetEditorRenderMode;
  
  /**
    View mode for meshes in edit mode
  **/
  @:uproperty public var MeshViewMode : unreal.editor.EPhysicsAssetEditorRenderMode;
  
  /**
    Controls how large constraints are drawn in Physics Asset Editor
  **/
  @:uproperty public var ConstraintDrawSize : unreal.Float32;
  
  /**
    Whether to only render selected constraints
  **/
  @:uproperty public var bRenderOnlySelectedConstraints : Bool;
  
  /**
    Whether to draw constraints as points
  **/
  @:uproperty public var bShowConstraintsAsPoints : Bool;
  
  /**
    Strength of the impulse used when poking with left mouse button
  **/
  @:uproperty public var PokeStrength : unreal.Float32;
  
  /**
    How quickly we interpolate the physics target transform for mouse spring forces
  **/
  @:uproperty public var InterpolationSpeed : unreal.Float32;
  
  /**
    Angular stiffness of mouse spring forces
  **/
  @:uproperty public var HandleAngularStiffness : unreal.Float32;
  
  /**
    Angular damping of mouse spring forces
  **/
  @:uproperty public var HandleAngularDamping : unreal.Float32;
  
  /**
    Linear stiffness of mouse spring forces
  **/
  @:uproperty public var HandleLinearStiffness : unreal.Float32;
  
  /**
    Linear damping of mouse spring forces
  **/
  @:uproperty public var HandleLinearDamping : unreal.Float32;
  
  /**
    Max FPS for simulation in PhysicsAssetEditor. This is helpful for targeting the same FPS as your game. -1 means disabled
  **/
  @:uproperty public var MaxFPS : unreal.Int32;
  
  /**
    Toggle gravity override vs gravity scale
  **/
  @:uproperty public var bUseGravityOverride : Bool;
  
  /**
    Gravity override used in the simulation
  **/
  @:uproperty public var GravityOverrideZ : unreal.Float32;
  
  /**
    Scale factor for the gravity used in the simulation
  **/
  @:uproperty public var GravScale : unreal.Float32;
  
  /**
    Time taken to blend from physics to animation.
  **/
  @:uproperty public var PokeBlendTime : unreal.Float32;
  
  /**
    Time between poking ragdoll and starting to blend back.
  **/
  @:uproperty public var PokePauseTime : unreal.Float32;
  
  /**
    Determines whether simulation of root body updates component transform
  **/
  @:uproperty public var PhysicsUpdateMode : unreal.EPhysicsTransformUpdateMode;
  
  /**
    Lets you manually control the physics/animation
  **/
  @:uproperty public var bUpdateJointsFromAnimation : Bool;
  
  /**
    Lets you manually control the physics/animation
  **/
  @:uproperty public var PhysicsBlend : unreal.Float32;
  
}
