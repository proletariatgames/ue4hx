/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

/**
  Implements the Editor's user settings.
**/
@:umodule("UnrealEd")
@:glueCppIncludes("Settings/ProjectPackagingSettings.h")
@:uextern @:uclass extern class UProjectPackagingSettings extends unreal.UObject {
  
  /**
    Directories containing files that should always be copied when packaging your project for a dedicated server, but are not supposed to be part of the .pak file
    This is used to stage additional files that you manually load without using the UFS (Unreal File System) file IO API, eg, third-party libraries that perform their own internal file IO
    Note: These paths are relative to your project Content directory
  **/
  @:uproperty public var DirectoriesToAlwaysStageAsNonUFSServer : unreal.TArray<unreal.FDirectoryPath>;
  
  /**
    Directories containing files that should always be added to the .pak file for a dedicated server (if using a .pak file; otherwise they're copied as individual files)
    This is used to stage additional files that you manually load via the UFS (Unreal File System) file IO API
    Note: These paths are relative to your project Content directory
  **/
  @:uproperty public var DirectoriesToAlwaysStageAsUFSServer : unreal.TArray<unreal.FDirectoryPath>;
  
  /**
    Directories containing files that should always be copied when packaging your project, but are not supposed to be part of the .pak file
    This is used to stage additional files that you manually load without using the UFS (Unreal File System) file IO API, eg, third-party libraries that perform their own internal file IO
    Note: These paths are relative to your project Content directory
  **/
  @:uproperty public var DirectoriesToAlwaysStageAsNonUFS : unreal.TArray<unreal.FDirectoryPath>;
  
  /**
    Directories containing files that should always be added to the .pak file (if using a .pak file; otherwise they're copied as individual files)
    This is used to stage additional files that you manually load via the UFS (Unreal File System) file IO API
    Note: These paths are relative to your project Content directory
  **/
  @:uproperty public var DirectoriesToAlwaysStageAsUFS : unreal.TArray<unreal.FDirectoryPath>;
  
  /**
    Directories containing .uasset files that should never be cooked even if they are referenced by your project
    These paths are stored relative to the project root so they can start with /game, /engine, or /pluginname
  **/
  @:uproperty public var DirectoriesToNeverCook : unreal.TArray<unreal.FDirectoryPath>;
  
  /**
    Directories containing .uasset files that should always be cooked regardless of whether they're referenced by anything in your project
    These paths are stored relative to the project root so they can start with /game, /engine, or /pluginname
  **/
  @:uproperty public var DirectoriesToAlwaysCook : unreal.TArray<unreal.FDirectoryPath>;
  
  /**
    List of maps to include when no other map list is specified on commandline
  **/
  @:uproperty public var MapsToCook : unreal.TArray<unreal.FFilePath>;
  
  /**
    Don't include movies when staging/packaging
  **/
  @:uproperty public var bSkipMovies : Bool;
  
  /**
    Don't include content in any editor folders when cooking.  This can cause issues with missing content in cooked games if the content is being used.
  **/
  @:uproperty public var bSkipEditorContent : Bool;
  
  /**
    Encrypt the pak index
    NOTE: Replaced by the settings inside the cryptokeys system. Kept here for legacy migration purposes.
  **/
  @:deprecated @:uproperty public var bEncryptPakIndex_DEPRECATED : Bool;
  
  /**
    Encrypt ini files inside of the pak file
    NOTE: Replaced by the settings inside the cryptokeys system. Kept here for legacy migration purposes.
  **/
  @:deprecated @:uproperty public var bEncryptIniFiles_DEPRECATED : Bool;
  
  /**
    Create compressed cooked packages (decreased deployment size)
  **/
  @:uproperty public var bCompressed : Bool;
  
  /**
    Cook only maps (this only affects the cookall flag)
  **/
  @:uproperty public var bCookMapsOnly : Bool;
  
  /**
    Cook all things in the project content directory
  **/
  @:uproperty public var bCookAll : Bool;
  
  /**
    Cultures whose data should be cooked, staged, and packaged.
  **/
  @:uproperty public var CulturesToStage : unreal.TArray<unreal.FString>;
  
  /**
    Predefined sets of culture whose internationalization data should be packaged.
  **/
  @:uproperty public var InternationalizationPreset : unreal.editor.EProjectPackagingInternationalizationPresets;
  
  /**
    Specifies whether to include the crash reporter in the packaged project.
    This is included by default for Blueprint based projects, but can optionally be disabled.
  **/
  @:uproperty public var IncludeCrashReporter : Bool;
  
  /**
    A directory containing additional prerequisite packages that should be staged in the executable directory. Can be relative to $(EngineDir) or $(ProjectDir)
  **/
  @:uproperty public var ApplocalPrerequisitesDirectory : unreal.FDirectoryPath;
  
  /**
    By default shader shader code gets saved into individual platform agnostic files,
    enabling this option will use the platform-specific library format if and only if one is available
    This will reduce overall package size but might increase loading time
  **/
  @:uproperty public var bSharedMaterialNativeLibraries : Bool;
  
  /**
    By default shader code gets saved inline inside material assets,
    enabling this option will store only shader code once as individual files
    This will reduce overall package size but might increase loading time
  **/
  @:uproperty public var bShareMaterialShaderCode : Bool;
  
  /**
    Specifies whether to include prerequisites alongside the game executable.
  **/
  @:uproperty public var IncludeAppLocalPrerequisites : Bool;
  
  /**
    Specifies whether to include an installer for prerequisites of packaged games, such as redistributable operating system components, on platforms that support it.
  **/
  @:uproperty public var IncludePrerequisites : Bool;
  
  /**
    Version name for HTTP Chunk Install Data.
  **/
  @:uproperty public var HttpChunkInstallDataVersion : unreal.FString;
  
  /**
    When "Build HTTP Chunk Install Data" is enabled this is the directory where the data will be build to.
  **/
  @:uproperty public var HttpChunkInstallDataDirectory : unreal.FDirectoryPath;
  
  /**
    If enabled, will generate data for HTTP Chunk Installer. This data can be hosted on webserver to be installed at runtime. Requires "Generate Chunks" enabled.
  **/
  @:uproperty public var bBuildHttpChunkInstallData : Bool;
  
  /**
    Normally during chunk generation all dependencies of a package in a chunk will be pulled into that package's chunk.
    If this is enabled then only hard dependencies are pulled in. Soft dependencies stay in their original chunk.
  **/
  @:uproperty public var bChunkHardReferencesOnly : Bool;
  
  /**
    If enabled, no platform will generate chunks, regardless of settings in platform-specific ini files.
  **/
  @:uproperty public var bGenerateNoChunks : Bool;
  
  /**
    If enabled, will generate pak file chunks.  Assets can be assigned to chunks in the editor or via a delegate (See ShooterGameDelegates.cpp).
    Can be used for streaming installs (PS4 Playgo, XboxOne Streaming Install, etc)
  **/
  @:uproperty public var bGenerateChunks : Bool;
  
  /**
    If enabled, all content will be put into a single .pak file instead of many individual files (default = enabled).
  **/
  @:uproperty public var UsePakFile : Bool;
  
  /**
    Whether or not to exclude monolithic engine headers (e.g. Engine.h) in the generated code when nativizing Blueprint assets. This may improve C++ compiler performance if your game code does not depend on monolithic engine headers to build.
  **/
  @:uproperty public var bExcludeMonolithicEngineHeadersInNativizedCode : Bool;
  
  /**
    If enabled, the nativized assets code plugin will be added to the Visual Studio solution if it exists when regenerating the game project. Intended primarily to assist with debugging the target platform after cooking with nativization turned on.
  **/
  @:uproperty public var bIncludeNativizedAssetsInProjectGeneration : Bool;
  
  /**
    List of Blueprints to include for nativization when using the exclusive method.
  **/
  @:uproperty public var NativizeBlueprintAssets : unreal.TArray<unreal.FFilePath>;
  
  /**
    If enabled, then the project's Blueprint assets (including structs and enums) will be intermediately converted into C++ and used in the packaged project (in place of the .uasset files).
  **/
  @:uproperty public var BlueprintNativizationMethod : unreal.editor.EProjectPackagingBlueprintNativizationMethod;
  
  /**
    If enabled, debug files will be included in the packaged game
  **/
  @:uproperty public var IncludeDebugFiles : Bool;
  
  /**
    If enabled, a distribution build will be created and the shipping configuration will be used
    If disabled, a development build will be created
    Distribution builds are for publishing to the App Store
  **/
  @:uproperty public var ForDistribution : Bool;
  
  /**
    If enabled, a full rebuild will be enforced each time the project is being packaged.
    If disabled, only modified files will be built, which can improve iteration time.
    Unless you iterate on packaging, we recommend full rebuilds when packaging.
  **/
  @:uproperty public var FullRebuild : Bool;
  
  /**
    The directory to which the packaged project will be copied.
  **/
  @:uproperty public var StagingDirectory : unreal.FDirectoryPath;
  
  /**
    The build configuration for which the project is packaged.
  **/
  @:uproperty public var BuildConfiguration : unreal.editor.EProjectPackagingBuildConfigurations;
  
  /**
    Specifies whether to build the game executable during packaging.
  **/
  @:uproperty public var Build : unreal.editor.EProjectPackagingBuild;
  
}
