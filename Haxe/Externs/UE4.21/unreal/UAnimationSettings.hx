/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Default animation settings.
**/
@:glueCppIncludes("Animation/AnimationSettings.h")
@:uextern @:uclass extern class UAnimationSettings extends unreal.UDeveloperSettings {
  
  /**
    If true, pre-4.19 behavior of zero-ticking animations during skeletal mesh init
  **/
  @:uproperty public var bTickAnimationOnSkeletalMeshInit : Bool;
  
  /**
    If true, animation track data will be stripped from dedicated server cooked data
  **/
  @:uproperty public var bStripAnimationDataOnDedicatedServer : Bool;
  @:uproperty public var bEnablePerformanceLog : Bool;
  
  /**
    If true, anim sequences are compressed in segments. This allows for parallel compression of individual sequences.
  **/
  @:uproperty public var bEnableSegmenting : Bool;
  
  /**
    If true, then an exhaustive search is used otherwise only a short list of the best methods is tried
  **/
  @:uproperty public var bTryExhaustiveSearch : Bool;
  
  /**
    If true and the existing compression error is greater than Alternative Compression Threshold, then Alternative Compression Threshold will be effectively raised to the existing error level
  **/
  @:uproperty public var bRaiseMaxErrorToExisting : Bool;
  
  /**
    If true, then the animation will be first recompressed with it's current compressor if non-NULL, or with the global default compressor (specified in the engine ini)
    Also known as "Run Current Default Compressor"
  **/
  @:uproperty public var bFirstRecompressUsingCurrentOrDefault : Bool;
  
  /**
    If true and the existing compression error is greater than Alternative Compression Threshold, then any compression technique (even one that increases the size) with a lower error will be used until it falls below the threshold
  **/
  @:uproperty public var bForceBelowThreshold : Bool;
  @:uproperty public var bOnlyCheckForMissingSkeletalMeshes : Bool;
  @:uproperty public var ForceRecompression : Bool;
  
  /**
    The alternate error threshold (0.0 means don't try anything other than the current / default scheme)
    
    Determines the current setting for world-space error tolerance in the animation compressor.
    When requested, animation being compressed will also consider an alternative compression
    method if the end result of that method produces less error than the AlternativeCompressionThreshold.
    Also known as "Max End Effector Error"
  **/
  @:uproperty public var AlternativeCompressionThreshold : unreal.Float32;
  
  /**
    Max error for compression of curves using remove redundant keys
  **/
  @:uproperty public var MaxCurveError : unreal.Float32;
  @:uproperty public var TranslationCompressionFormat : unreal.AnimationCompressionFormat;
  @:uproperty public var RotationCompressionFormat : unreal.AnimationCompressionFormat;
  @:uproperty public var DefaultCompressionAlgorithm : unreal.TSubclassOf<unreal.UAnimCompress>;
  @:uproperty public var KeyEndEffectorsMatchNameArray : unreal.TArray<unreal.FString>;
  
  /**
    compression upgrade version
  **/
  @:uproperty public var CompressCommandletVersion : unreal.Int32;
  
}
