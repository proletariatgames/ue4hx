/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.magicleap;

/**
  Parameters for a raycast request.
**/
@:umodule("MagicLeap")
@:glueCppIncludes("Classes/RaycastComponent.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FRaycastQueryParams {
  
  /**
    User data for this request. The same data will be included in the result for query identification.
  **/
  @:uproperty public var UserData : unreal.Int32;
  
  /**
    If true, a ray will terminate when encountering an unobserved area and return a surface or
            the ray will continue until it ends or hits an observed surface.
  **/
  @:uproperty public var CollideWithUnobserved : Bool;
  
  /**
    The angular width, in degrees, over which the horizonal rays are evenly distributed to create a raycast area.
  **/
  @:uproperty public var HorizontalFovDegrees : unreal.Float32;
  
  /**
    The number of vertical rays. For single point raycast, set this to 1.
  **/
  @:uproperty public var Height : unreal.Int32;
  
  /**
    The number of horizontal rays. For single point raycast, set this to 1.
  **/
  @:uproperty public var Width : unreal.Int32;
  
  /**
    Up vector of the ray to fire. This is used to orient the area the rays are cast over.
  **/
  @:uproperty public var UpVector : unreal.FVector;
  
  /**
    Direction of the ray to fire.
  **/
  @:uproperty public var Direction : unreal.FVector;
  
  /**
    Where the ray is cast from.
  **/
  @:uproperty public var Position : unreal.FVector;
  
}
