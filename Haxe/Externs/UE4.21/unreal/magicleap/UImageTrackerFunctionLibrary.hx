/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.magicleap;

@:umodule("MagicLeap")
@:glueCppIncludes("ImageTrackerComponent.h")
@:uextern @:uclass extern class UImageTrackerFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Set maximum number of Image Targets that can be tracked at any given time.
    
    If the tracker is already tracking the maximum number of targets
    possible then it will stop searching for new targets which helps
    in reducing the load on the CPU. For example, if you are interested in
    tracking a maximum of x targets from a list y (x < y) targets then set this
    parameter to x.
    
    The valid range for this parameter is from 1 through 25.
  **/
  @:ufunction(BlueprintCallable) static public function SetMaxSimultaneousTargets(MaxSimultaneousTargets : unreal.Int32) : Void;
  
  /**
    Gets the maximum number of Image Targets that can be tracked at any given time.
    @return The maximum number of Image Targets that can be tracked at any given time.
  **/
  @:ufunction(BlueprintCallable) static public function GetMaxSimultaneousTargets() : unreal.Int32;
  
  /**
    If true, image tracker will detect and track targets.
    
    When enabled Image Tracker will gain access to the camera and start
    trackingimages. Enabling image tracker is expensive, takes about 1500ms
    on the average.
    
    When disabled Image Tracker will release the camera and stop tracking
    images. Internal state of the tracker will be maintained (i.e. list of
    active/inactive argets and their target_handles).
    
    This is done automatically on application pause / resume.
  **/
  @:ufunction(BlueprintCallable) static public function EnableImageTracking(bEnable : Bool) : Void;
  
  /**
    Gets the active state of the image tracking system.
    @return True if image tracking is enabled, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function IsImageTrackingEnabled() : Bool;
  
}
