/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Represents a camera viewpoint and settings, such as projection type, field of view, and post-process overrides.
  The default behavior for an actor used as the camera view target is to look for an attached camera component and use its location, rotation, and settings.
**/
@:glueCppIncludes("Camera/CameraComponent.h")
@:uextern @:uclass extern class UCameraComponent extends unreal.USceneComponent {
  #if WITH_EDITORONLY_DATA
  
  /**
    DEPRECATED: use bUsePawnControlRotation instead
  **/
  @:deprecated @:uproperty public var bUseControllerViewRotation_DEPRECATED : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Post process settings to use for this camera. Don't forget to check the properties you want to override
  **/
  @:uproperty public var PostProcessSettings : unreal.FPostProcessSettings;
  
  /**
    Indicates if PostProcessSettings should be used when using this Camera to view through.
  **/
  @:uproperty public var PostProcessBlendWeight : unreal.Float32;
  #if WITH_EDITORONLY_DATA
  @:uproperty private var CameraMesh : unreal.UStaticMesh;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The type of camera
  **/
  @:uproperty public var ProjectionMode : unreal.ECameraProjectionMode;
  
  /**
    If this camera component is placed on a pawn, should it use the view/control rotation of the pawn where possible?
    @see APawn::GetViewRotation()
  **/
  @:uproperty public var bUsePawnControlRotation : Bool;
  
  /**
    True if the camera's orientation and position should be locked to the HMD
  **/
  @:uproperty public var bLockToHmd : Bool;
  
  /**
    If true, account for the field of view angle when computing which level of detail to use for meshes.
  **/
  @:uproperty public var bUseFieldOfViewForLOD : Bool;
  
  /**
    If bConstrainAspectRatio is true, black bars will be added if the destination view has a different aspect ratio than this camera requested.
  **/
  @:uproperty public var bConstrainAspectRatio : Bool;
  
  /**
    Aspect Ratio (Width/Height)
  **/
  @:uproperty public var AspectRatio : unreal.Float32;
  
  /**
    The far plane distance of the orthographic view (in world units)
  **/
  @:uproperty public var OrthoFarClipPlane : unreal.Float32;
  
  /**
    The near plane distance of the orthographic view (in world units)
  **/
  @:uproperty public var OrthoNearClipPlane : unreal.Float32;
  
  /**
    The desired width (in world units) of the orthographic view (ignored in Perspective mode)
  **/
  @:uproperty public var OrthoWidth : unreal.Float32;
  
  /**
    The horizontal field of view (in degrees) in perspective mode (ignored in Orthographic mode)
  **/
  @:uproperty public var FieldOfView : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function SetFieldOfView(InFieldOfView : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOrthoWidth(InOrthoWidth : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOrthoNearClipPlane(InOrthoNearClipPlane : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOrthoFarClipPlane(InOrthoFarClipPlane : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetAspectRatio(InAspectRatio : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetConstraintAspectRatio(bInConstrainAspectRatio : Bool) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetUseFieldOfViewForLOD(bInUseFieldOfViewForLOD : Bool) : Void;
  #if WITH_EDITOR
  
  /**
    Returns the filmback text used for burnins on preview viewports
  **/
  @:ufunction @:thisConst public function GetFilmbackText() : unreal.FText;
  #end // WITH_EDITOR
  @:ufunction(BlueprintCallable) @:final public function SetProjectionMode(InProjectionMode : unreal.ECameraProjectionMode) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetPostProcessBlendWeight(InPostProcessBlendWeight : unreal.Float32) : Void;
  
  /**
    Returns camera's Point of View.
    Called by Camera class. Subclass and postprocess to add any effects.
  **/
  @:ufunction(BlueprintCallable) public function GetCameraView(DeltaTime : unreal.Float32, DesiredView : unreal.PRef<unreal.FMinimalViewInfo>) : Void;
  
}
