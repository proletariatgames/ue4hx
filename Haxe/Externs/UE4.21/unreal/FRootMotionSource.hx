/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Generalized source of Root Motion to a CharacterMovementComponent.
  
  Has priorities and different accumulation modes (override, additive, set, ignore).
  
  RootMotionSources are accumulated from highest priority to lowest, once all values
  are "finalized" (meaning no more accumulation to those values), root motion accumulation
  is finished. Having all of translation and rotation in a transform being overridden during
  root motion accumulation means that CharacterMovementComponent Phys*() functions no longer
  need to CalcVelocity() since it'll just get overridden anyway.
  
  Some example source possibilities:
          Full Animation Root Motion (matching only form of root motion we've supported historically):
                  - Overrides all translation axes or rotation or both
                  - Very High priority so it gets applied first and since it is override no other
                    RootMotionSources have an influence that are lower priority
                  - Scale on translation and/or rotation is set to 1 to match animation 1 for 1
                  - Provides local space transform (character-orientation relative)
  
                  - End result: Same as before - overrides velocity/rotation to values in AnimMontage
                  - But can now scale individual translation axes if desired, or instead of override
                    can use "set" to allow other additive sources of root motion to be applied on top
                    of the animation root motion (modify velocity to home root motion melee attacks, etc.)
  
          Jump pad volumes that work during animation root montage attacks
                  - Constant velocity modification Z up, additive and high priority
                  - Attack/melee animation root motion uses "set" instead of "override" to allow other sources
                  - Animation root motion is applied, then the Z up additive of this source is so you are
                    affected by the jump pad
  
          Attack/melee homing
                  - Additive, lower priority so it gets applied after any animation/significant root motion
                  - World space, sourced by logic modifying velocity to go towards nearby enemies
                  - Could point to a UAbilityTask node from the GameplayAbilities system
  
          Character movement controlled by splines/curves in-editor instead of requiring animation tweaks
                  - Same as animation root motion but source from spline/curve data
**/
@:glueCppIncludes("Classes/GameFramework/RootMotionSource.h")
@:uextern @:ustruct extern class FRootMotionSource {
  
  /**
    Finish Velocity Parameters
  **/
  @:uproperty public var FinishVelocityParams : unreal.FRootMotionFinishVelocitySettings;
  
  /**
    Root Motion generated by this Source
  **/
  @:uproperty public var RootMotionParams : unreal.FRootMotionMovementParams;
  
  /**
    True when this RootMotionSource is contributing local space accumulation (false for world space)
  **/
  @:uproperty public var bInLocalSpace : Bool;
  
  /**
    Settings of this source
  **/
  @:uproperty public var Settings : unreal.FRootMotionSourceSettings;
  
  /**
    Status of this source
  **/
  @:uproperty public var Status : unreal.FRootMotionSourceStatus;
  
  /**
    The length of this root motion - < 0 for infinite (to be removed manually)
  **/
  @:uproperty public var Duration : unreal.Float32;
  
  /**
    The last Time entry we had before the last SetTime() - used for simulated catchup
  **/
  @:uproperty public var PreviousTime : unreal.Float32;
  
  /**
    Time elapsed so far for this source
  **/
  @:uproperty public var CurrentTime : unreal.Float32;
  
  /**
    Time this source should start (in character movement client time)
    This is used to handle cases of inconsistent tick times (ServerMoves ticking for 1 second when root motion should
    have only applied for the last 0.1 seconds, or root motion source ending halfway through a 0.5 second tick)
  **/
  @:uproperty public var StartTime : unreal.Float32;
  
  /**
    This name allows us to find the source later so that we can end it.
  **/
  @:uproperty public var InstanceName : unreal.FName;
  
  /**
    Accumulation mode for this source (whether or not to additively apply this root motion or override completely)
  **/
  @:uproperty public var AccumulateMode : unreal.ERootMotionAccumulateMode;
  
  /**
    ID local to this client or server instance. Used for matching up FRootMotionSources between SavedMoves
    and allow a mapping between server LocalIDs and client LocalIDs for correction/comparison
  **/
  @:uproperty public var LocalID : unreal.UInt16;
  
  /**
    Priority of this source relative to other sources - higher number being the highest priority/first applied.
  **/
  @:uproperty public var Priority : unreal.UInt16;
  
}
