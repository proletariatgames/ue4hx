/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.magicleaphandtracking;

@:umodule("MagicLeapHandTracking")
@:glueCppIncludes("MagicLeapHandTrackingFunctionLibrary.h")
@:uextern @:uclass extern class UMagicLeapHandTrackingFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Transform of the center of the hand.  Approximately the center of the palm.
    
    Note that this returns a transform in world space.
    
    @param Hand Hand to query the hand center transform for. Only Left and Right hand are supported.
    @param HandCenter Output parameter containing the position and orientation of the given hand.
    @return true if the output param was populated with a valid value, false means that is is either unchanged or populated with a stale value.
  **/
  @:ufunction(BlueprintCallable) static public function GetHandCenter(Hand : unreal.inputcore.EControllerHand, HandCenter : unreal.PRef<unreal.FTransform>) : Bool;
  
  /**
    Transform of the Index Finger Tip.
    
    @param Hand Hand to query the hand center transform for. Only Left and Right hand are supported.
    @param TransformSpace Get the transform relative to the world, hand center, or tracking space.
    @param Pointer Output parameter containing the position and orientation.
    @return true if the output param was populated with a valid value, false means that is is either unchanged or populated with a stale value.
  **/
  @:ufunction(BlueprintCallable) static public function GetHandIndexFingerTip(Hand : unreal.inputcore.EControllerHand, TransformSpace : unreal.magicleaphandtracking.EGestureTransformSpace, Pointer : unreal.PRef<unreal.FTransform>) : Bool;
  
  /**
    Transform of Thumb Tip.
    
    Note that this returns a transform in the Tracking space. To get the transform in Unreal's
    world space, use the MotioController component as a child of the XRPawn with hand set to EControllerHand::Special_5
    for the left hand secondary and EControllerHand::Special_6 for the right hand secondary.
    
    @param Hand Hand to query the hand center transform for. Only Left and Right hand are supported.
    @param TransformSpace Get the transform relative to the world, hand center, or tracking space.
    @param Secondary Output parameter containing the position and orientation.
    @return true if the output param was populated with a valid value, false means that is is either unchanged or populated with a stale value.
  **/
  @:ufunction(BlueprintCallable) static public function GetHandThumbTip(Hand : unreal.inputcore.EControllerHand, TransformSpace : unreal.magicleaphandtracking.EGestureTransformSpace, Secondary : unreal.PRef<unreal.FTransform>) : Bool;
  
  /**
    Normalized position of the center of the given hand. This can be used to detect and warn the users that the hand is out of the gesture detection frame.
    
    @param Hand Hand to query the normalized hand center position for. Only Left and Right hand are supported.
    @param HandCenterNormalized Output paramter containing the normalized position of the given hand.
    @return true if the output param was populated with a valid value, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function GetHandCenterNormalized(Hand : unreal.inputcore.EControllerHand, HandCenterNormalized : unreal.PRef<unreal.FVector>) : Bool;
  
  /**
    List of keypoints detected on the given hand.
    
    Note that this returns a transform in the Tracking space. To get the transform in Unreal's
    world space, use the MotioController component as a child of the XRPawn with hand set to the following.
    Special_3 - Left Index Finger Tip
    Special_5 - Left Thumb Tip
    Special_4 - Right Index Finger Tip
    Special_6 - Right Thumb Tip
    
    @param Hand Hand to query the keypoints for. Only Left and Right hand are supported.
    @param Keypoints Output parameter containing transforms of the keypoints detected on the given hand.
    @return true if the output param was populated with a valid value, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function GetGestureKeypoints(Hand : unreal.inputcore.EControllerHand, Keypoints : unreal.PRef<unreal.TArray<unreal.FTransform>>) : Bool;
  
  /**
    Get Transform for a point on the hand.
    
    @param Hand
    @param Keypoint the specific joint or wrist point to fetch.
    @param Transform Output parameter to write the data to.
    @param TransformSpace Get the transform relative to the world, hand center, or tracking space.
    @return true if the output param was populated with a valid value, false means that is is either unchanged or populated with a stale value.
  **/
  @:ufunction(BlueprintCallable) static public function GetGestureKeypointTransform(Hand : unreal.inputcore.EControllerHand, Keypoint : unreal.magicleaphandtracking.EHandTrackingKeypoint, TransformSpace : unreal.magicleaphandtracking.EGestureTransformSpace, Transform : unreal.PRef<unreal.FTransform>) : Bool;
  
  /**
    Enables and disables the gestures to be detected by the gesture recognition system.
    
    @param StaticHandTrackingToActivate List of static gestures to be detected by the system.
    @param KeypointsFilterLevel Filtering for the keypoints and hand centers.
    @param GestureFilterLevel Filtering for the static gesture recognition.
    @param HandSwitchingFilterLevel Filtering for if the left or right hand is present.
    @return true if the configuration was set successfully.
  **/
  @:ufunction(BlueprintCallable) static public function SetConfiguration(StaticGesturesToActivate : unreal.Const<unreal.PRef<unreal.TArray<unreal.magicleaphandtracking.EHandTrackingGesture>>>, @:opt("NoFilter") KeypointsFilterLevel : unreal.magicleaphandtracking.EHandTrackingKeypointFilterLevel, @:opt("NoFilter") GestureFilterLevel : unreal.magicleaphandtracking.EHandTrackingGestureFilterLevel, @:opt("NoFilter") HandSwitchingFilterLevel : unreal.magicleaphandtracking.EHandTrackingGestureFilterLevel, bTrackingEnabled : Bool = true) : Bool;
  
  /**
    Gets the list of static and dynamic gestures currently set to be identified by the gesture recognition system.
    
    @param StaticHandTrackingToActivate Output parameter to list the static gestures that can be detected by the system.
    @param KeypointsFilterLevel Filtering for the keypoints and hand centers.
    @param GestureFilterLevel Filtering for the static gesture recognition.
    @param HandSwitchingFilterLevel Filtering for if the left or right hand is present.
    @return true if the output params were populated with a valid value, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function GetConfiguration(ActiveStaticGestures : unreal.PRef<unreal.TArray<unreal.magicleaphandtracking.EHandTrackingGesture>>, KeypointsFilterLevel : unreal.PRef<unreal.magicleaphandtracking.EHandTrackingKeypointFilterLevel>, GestureFilterLevel : unreal.PRef<unreal.magicleaphandtracking.EHandTrackingGestureFilterLevel>, HandSwitchingFilterLevel : unreal.PRef<unreal.magicleaphandtracking.EHandTrackingGestureFilterLevel>, bTrackingEnabled : Bool) : Bool;
  
  /**
    Sets the minimum gesture confidence to filter out the detected static gesture.
    
    @param Gesture The gesture to set the confidence threshold for.
    @param Confidence The gesture confidence threshold.
  **/
  @:ufunction(BlueprintCallable) static public function SetStaticGestureConfidenceThreshold(Gesture : unreal.magicleaphandtracking.EHandTrackingGesture, Confidence : unreal.Float32) : Void;
  
  /**
    Gets the minimum gesture confidence used to filter out the detected static gesture.
    
    @param Gesture The gesture to get the confidence threshold for.
    @return The gesture confidence threshold.
  **/
  @:ufunction(BlueprintCallable) static public function GetStaticGestureConfidenceThreshold(Gesture : unreal.magicleaphandtracking.EHandTrackingGesture) : unreal.Float32;
  
  /**
    The confidence level of the current gesture being performed by the given hand.
    Value is between [0, 1], 0 is low, 1 is high degree of confidence. For a NoHand, the confidence is always set to 1.
    
    @param Hand Hand to query the gesture confidence value for. Only Left and Right hand are supported.
    @param Confidence Output parameter containing the confidence value for the given hand's gesture.
    @return true if the output param was populated with a valid value, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentGestureConfidence(Hand : unreal.inputcore.EControllerHand, Confidence : unreal.Float32) : Bool;
  
  /**
    The current gesture being performed by the given hand.
    
    @param Hand Hand to query the gesture for. Only Left and Right hand are supported.
    @param Gesture Output parameter containing the given hand's gesture, or NoHand if there isn't one or the system isnt working now.
    @return true if the output param was populated with a valid value, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentGesture(Hand : unreal.inputcore.EControllerHand, Gesture : unreal.PRef<unreal.magicleaphandtracking.EHandTrackingGesture>) : Bool;
  
  /**
    Get a LiveLinkSourceHandle for magic leap hand tracking.
    
    @param SourceHandle Output parameter SourceHandle that will be filled in.
    @return true if a LiveLink Source was assigned.
  **/
  @:ufunction(BlueprintCallable) static public function GetMagicLeapHandTrackingLiveLinkSource(SourceHandle : unreal.PRef<unreal.livelinkinterface.FLiveLinkSourceHandle>) : Bool;
  
}
