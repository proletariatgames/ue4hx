/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.sequencerecorder;

@:umodule("SequenceRecorder")
@:glueCppIncludes("SequenceRecorderSettings.h")
@:uextern @:uclass extern class USequenceRecorderSettings extends unreal.UObject {
  
  /**
    Settings applied to actors of a specified class
  **/
  @:uproperty public var PerActorSettings : unreal.TArray<unreal.sequencerecorder.FSettingsForActorClass>;
  
  /**
    The properties to record for specified actors. Actor classes specified here will be recorded. If an actor does not contain one of these properties it will be ignored.
  **/
  @:uproperty public var ActorsAndPropertiesToRecord : unreal.TArray<unreal.sequencerecorder.FPropertiesToRecordForActorClass>;
  
  /**
    The properties to record for specified classes. Component classes specified here will be recorded. If an actor does not contain one of these classes it will be ignored.
  **/
  @:uproperty public var ClassesAndPropertiesToRecord : unreal.TArray<unreal.sequencerecorder.FPropertiesToRecordForClass>;
  
  /**
    Whether to record actors that are spawned by sequencer itself (this is usually disabled as results can be unexpected)
  **/
  @:uproperty public var bRecordSequencerSpawnedActors : Bool;
  
  /**
    Default animation settings which are used to initialize all new actor recording's animation settings
  **/
  @:uproperty public var DefaultAnimationSettings : unreal.FAnimationRecordingSettings;
  
  /**
    Filter to check spawned actors against to see if they should be recorded
  **/
  @:uproperty public var ActorFilter : unreal.sequencerecorder.FSequenceRecorderActorFilter;
  
  /**
    Whether to auto-save asset when recording is completed. Defaults to false
  **/
  @:uproperty public var bAutoSaveAsset : Bool;
  
  /**
    Whether to remove keyframes within a tolerance from the recorded tracks
  **/
  @:uproperty public var bReduceKeys : Bool;
  
  /**
    Whether to record the world settings actor in the sequence (some games use this to attach world SFX)
  **/
  @:uproperty public var bRecordWorldSettingsActor : Bool;
  
  /**
    Proximity to currently recorded actors to record newly spawned actors.
  **/
  @:uproperty public var NearbyActorRecordingProximity : unreal.Float32;
  
  /**
    Whether to record nearby spawned actors. If an actor matches a class in the ActorFilter, this state will be bypassed.
  **/
  @:uproperty public var bRecordNearbySpawnedActors : Bool;
  
  /**
    The name of the subdirectory audio will be placed in. Leave this empty to place into the same directory as the sequence base path
  **/
  @:uproperty public var AudioSubDirectory : unreal.FString;
  
  /**
    Name of the recorded audio track name
  **/
  @:uproperty public var AudioTrackName : unreal.FText;
  
  /**
    Replace existing recorded audio with any newly recorded audio
  **/
  @:uproperty public var bReplaceRecordedAudio : Bool;
  
  /**
    Whether or not to split mic channels into separate audio tracks. If not true, a max of 2 input channels is supported.
  **/
  @:uproperty public var bSplitAudioChannelsIntoSeparateTracks : Bool;
  
  /**
    Gain in decibels to apply to recorded audio
  **/
  @:uproperty public var AudioGain : unreal.Float32;
  
  /**
    Whether to record audio alongside animation or not
  **/
  @:uproperty public var RecordAudio : unreal.sequencerecorder.EAudioRecordingMode;
  
  /**
    The name of the subdirectory animations will be placed in. Leave this empty to place into the same directory as the sequence base path
  **/
  @:uproperty public var AnimationSubDirectory : unreal.FString;
  
  /**
    Should Sequence Recorder ignore global time dilation? If true recorded animations will only be as long as they would have been without global time dilation.
  **/
  @:uproperty public var bIgnoreTimeDilation : Bool;
  
  /**
    Global Time dilation to set the world to when recording starts. Useful for playing back a scene in slow motion.
  **/
  @:uproperty public var GlobalTimeDilation : unreal.Float32;
  
  /**
    Allow the recording to be looped. Subsequence recorded assets will be saved to unique filenames.
  **/
  @:uproperty public var bAllowLooping : Bool;
  
  /**
    Delay that we will use before starting recording
  **/
  @:uproperty public var RecordingDelay : unreal.Float32;
  
  /**
    The length of the recorded sequence
  **/
  @:uproperty public var SequenceLength : unreal.Float32;
  
  /**
    Whether to maximize the viewport when recording
  **/
  @:uproperty public var bImmersiveMode : Bool;
  
  /**
    Whether to create a level sequence when recording. Actors and animations will be inserted into this sequence
  **/
  @:uproperty public var bCreateLevelSequence : Bool;
  
}
