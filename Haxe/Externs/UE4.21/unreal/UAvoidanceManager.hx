/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("AI/Navigation/AvoidanceManager.h")
@:uextern @:uclass extern class UAvoidanceManager extends unreal.UObject {
  
  /**
    Allowable height margin between obstacles and agents. This is over and above the difference in agent heights.
  **/
  @:uproperty public var HeightCheckMargin : unreal.Float32;
  
  /**
    Deprecated - use HeightCheckMargin, generally a much smaller value.
  **/
  @:deprecated @:uproperty public var TestHeightDifference_DEPRECATED : unreal.Float32;
  
  /**
    Multiply the radius of all STORED avoidance objects by this value to allow a little extra room for avoidance maneuvers.
  **/
  @:uproperty public var ArtificialRadiusExpansion : unreal.Float32;
  
  /**
    This is how far forward in time (seconds) we extend our velocity cones and thus our prediction
  **/
  @:uproperty public var DeltaTimeToPredict : unreal.Float32;
  
  /**
    How long to stay on course (barring collision) after making an unobstructed move (should be > 0.0, but can be less than a full frame)
  **/
  @:uproperty public var LockTimeAfterClean : unreal.Float32;
  
  /**
    How long to stay on course (barring collision) after making an avoidance move
  **/
  @:uproperty public var LockTimeAfterAvoid : unreal.Float32;
  
  /**
    How long an avoidance UID must not be updated before the system will put it back in the pool. Actual delay is up to 150% of this value.
  **/
  @:uproperty public var DefaultTimeToLive : unreal.Float32;
  
  /**
    Get the number of avoidance objects currently in the manager.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetObjectCount() : unreal.Int32;
  
  /**
    Get appropriate UID for use when reporting to this function or requesting RVO assistance.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetNewAvoidanceUID() : unreal.Int32;
  
  /**
    Register with the given avoidance manager.
    @param AvoidanceWeight      When avoiding each other, actors divert course in proportion to their relative weights. Range is 0.0 to 1.0. Special: at 1.0, actor will not divert course at all.
  **/
  @:ufunction(BlueprintCallable) @:final public function RegisterMovementComponent(MovementComp : unreal.UMovementComponent, AvoidanceWeight : unreal.Float32 = 0.500000) : Bool;
  
  /**
    Calculate avoidance velocity for component (avoids collisions with the supplied component)
  **/
  @:ufunction(BlueprintCallable) @:final public function GetAvoidanceVelocityForComponent(MovementComp : unreal.UMovementComponent) : unreal.FVector;
  
}
