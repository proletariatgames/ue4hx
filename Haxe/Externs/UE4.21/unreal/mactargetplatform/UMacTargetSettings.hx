/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mactargetplatform;

/**
  Implements the settings for the Mac target platform.
**/
@:umodule("MacTargetPlatform")
@:glueCppIncludes("MacTargetSettings.h")
@:uextern @:uclass extern class UMacTargetSettings extends unreal.UObject {
  
  /**
    Which of the currently enabled occlusion plugins to use on Windows.
  **/
  @:uproperty public var OcclusionPlugin : unreal.FString;
  
  /**
    Which of the currently enabled reverb plugins to use on Windows.
  **/
  @:uproperty public var ReverbPlugin : unreal.FString;
  
  /**
    Which of the currently enabled spatialization plugins to use on Windows.
  **/
  @:uproperty public var SpatializationPlugin : unreal.FString;
  
  /**
    The number of workers to use to compute source audio. Will only use up to the max number of sources. Will evenly divide sources to each source worker.
  **/
  @:uproperty public var AudioNumSourceWorkers : unreal.Int32;
  
  /**
    The max number of channels (voices) to limit for this platform. The max channels used will be the minimum of this value and the global audio quality settings. A value of 0 will not apply a platform channel count max.
  **/
  @:uproperty public var AudioMaxChannels : unreal.Int32;
  
  /**
    The number of buffers to keep enqueued. More buffers increases latency, but can compensate for variable compute availability in audio callbacks on some platforms.
  **/
  @:uproperty public var AudioNumBuffersToEnqueue : unreal.Int32;
  
  /**
    The amount of audio to compute each callback block. Lower values decrease latency but may increase CPU cost.
  **/
  @:uproperty public var AudioCallbackBufferFrameSize : unreal.Int32;
  
  /**
    Sample rate to run the audio mixer with.
  **/
  @:uproperty public var AudioSampleRate : unreal.Int32;
  
  /**
    Whether to use of Metal shader-compiler's -ffast-math optimisations.
    Fast-Math performs algebraic-equivalent & reassociative optimisations not permitted by the floating point arithmetic standard (IEEE-754).
    These can improve shader performance at some cost to precision and can lead to NaN/INF propagation as they rely on
    shader inputs or variables not containing NaN/INF values. By default fast-math is enabled for performance.
  **/
  @:uproperty public var EnableMathOptimisations : Bool;
  
  /**
    Whether to use the Metal shading language's "fast" intrinsics.
    Fast intrinsics assume that no NaN or INF value will be provided as input,
    so are more efficient. However, they will produce undefined results if NaN/INF
    is present in the argument/s. By default fast-instrinics are disabled so Metal correctly handles NaN/INF arguments.
  **/
  @:uproperty public var UseFastIntrinsics : Bool;
  
  /**
    The maximum supported Metal shader langauge version.
    This defines what features may be used and OS versions supported.
  **/
  @:uproperty public var MaxShaderLanguageVersion : unreal.UInt8;
  
  /**
    The collection of RHI's we want to support on this platform.
    This is not always the full list of RHI we can support.
  **/
  @:uproperty public var TargetedRHIs : unreal.TArray<unreal.FString>;
  
}
