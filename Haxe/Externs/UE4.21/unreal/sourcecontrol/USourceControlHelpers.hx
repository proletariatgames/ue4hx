/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.sourcecontrol;

/**
  Editor source control common functionality.
  
  @note Many of these source control methods use *smart* file strings which can be one of:
    - fully qualified path
    - relative path
    - long package name
    - asset path
    - export text path (often stored on clipboard)
  
    For example:
       - D:\Epic\Dev-Ent\Projects\Python3rdBP\Content\Mannequin\Animations\ThirdPersonIdle.uasset
       - Content\Mannequin\Animations\ThirdPersonIdle.uasset
       - /Game/Mannequin/Animations/ThirdPersonIdle
       - /Game/Mannequin/Animations/ThirdPersonIdle.ThirdPersonIdle
       - AnimSequence'/Game/Mannequin/Animations/ThirdPersonIdle.ThirdPersonIdle'
**/
@:umodule("SourceControl")
@:glueCppIncludes("SourceControlHelpers.h")
@:uextern @:uclass extern class USourceControlHelpers extends unreal.UObject {
  
  /**
    Determine the name of the current source control provider.
    @return      the name of the current source control provider. If one is not set then "None" is returned.
  **/
  @:ufunction(BlueprintCallable) static public function CurrentProvider() : unreal.FString;
  
  /**
    Determine if there is a source control system enabled
    @return      true if enabled, false if not
  **/
  @:ufunction(BlueprintCallable) static public function IsEnabled() : Bool;
  
  /**
    Quick check if currently set source control provider is enabled and available for use
    (server-based providers can use this to return whether the server is available or not)
    
    @return      true if source control is available, false if it is not
  **/
  @:ufunction(BlueprintCallable) static public function IsAvailable() : Bool;
  
  /**
    Get status text set by SourceControl system if an error occurs regardless whether bSilent is set or not.
    Only set if there was an error.
  **/
  @:ufunction(BlueprintCallable) static public function LastErrorMsg() : unreal.FText;
  
  /**
    Use currently set source control provider to check out a file.
    @note        Blocks until action is complete.
    
    @param       InFile          The file to check out - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent         if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function CheckOutFile(InFile : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to check out specified files.
    @note        Blocks until action is complete.
    
    @param       InFiles         Files to check out - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent         if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function CheckOutFiles(InFiles : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to check out file or mark it for add.
    @note        Blocks until action is complete.
    
    @param       InFile          The file to check out/add - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent         if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function CheckOutOrAddFile(InFile : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to mark a file for add. Does nothing (and returns true) if the file is already under SC
    @note        Blocks until action is complete.
    
    @param       InFile          The file to add - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent         if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function MarkFileForAdd(InFile : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to mark files for add. Does nothing (and returns true) for any file that is already under SC
    @note        Blocks until action is complete.
    
    @param       InFiles         Files to check out - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent         if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function MarkFilesForAdd(InFiles : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to remove file from source control and
    delete the file.
    @note        Blocks until action is complete.
    
    @param       InFile          The file to delete - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent         if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function MarkFileForDelete(InFile : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to revert a file regardless whether any changes will be lost or not.
    @note        Blocks until action is complete.
    
    @param       InFile  The file to revert - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function RevertFile(InFile : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to revert files regardless whether any changes will be lost or not.
    @note        Blocks until action is complete.
    
    @param       InFiles Files to revert - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function RevertFiles(InFiles : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to revert a file provided no changes have been made.
    @note        Blocks until action is complete.
    
    @param       InFile  File to check out - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function RevertUnchangedFile(InFile : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to revert files provided no changes have been made.
    @note        Blocks until action is complete.
    
    @param       InFiles Files to check out - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function RevertUnchangedFiles(InFiles : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to check in a file.
    @note        Blocks until action is complete.
    
    @param       InFile                  The file to check in - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       InDescription   Description for check in
    @param       bSilent                 if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function CheckInFile(InFile : unreal.FString, InDescription : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to check in specified files.
    @note        Blocks until action is complete.
    
    @param       InFiles                 Files to check out - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       InDescription   Description for check in
    @param       bSilent                 if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function CheckInFiles(InFiles : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>, InDescription : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to copy a file.
    @note        Blocks until action is complete.
    
    @param       InSourceFile    Source file string to copy from - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       InDestFile              Source file string to copy to - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard). If package, then uses same extension as source file.
    @param       bSilent                 if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      true if succeeded, false if failed and can call LastErrorMsg() for more info.
  **/
  @:ufunction(BlueprintCallable) static public function CopyFile(InSourceFile : unreal.FString, InDestFile : unreal.FString, bSilent : Bool = false) : Bool;
  
  /**
    Use currently set source control provider to query a file's source control state.
    @note        Blocks until action is complete.
    
    @param       InFile                  The file to query - can be either fully qualified path, relative path, long package name, asset path or export text path (often stored on clipboard)
    @param       bSilent                 if false (default) then write out any error info to the Log. Any error text can be retrieved by LastErrorMsg() regardless.
    @return      Source control state - see USourceControlState. It will have bIsValid set to false if
                         it could not have its values set.
  **/
  @:ufunction(BlueprintCallable) static public function QueryFileState(InFile : unreal.FString, bSilent : Bool = false) : unreal.sourcecontrol.FSourceControlState;
  
}
