/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Components/SkyLightComponent.h")
@:uextern @:uclass extern class USkyLightComponent extends unreal.ULightComponentBase {
  @:uproperty private var BlendDestinationCubemap : unreal.UTextureCube;
  
  /**
    Controls how occlusion from Distance Field Ambient Occlusion is combined with Screen Space Ambient Occlusion.
  **/
  @:uproperty public var OcclusionCombineMode : unreal.EOcclusionCombineMode;
  
  /**
    Tint color on occluded areas, artistic control.
  **/
  @:uproperty public var OcclusionTint : unreal.FColor;
  
  /**
    Controls the darkest that a fully occluded area can get.  This tends to destroy contact shadows, use Contrast or OcclusionExponent instead.
  **/
  @:uproperty public var MinOcclusion : unreal.Float32;
  
  /**
    Exponent applied to the computed AO.  Values lower than 1 brighten occlusion overall without losing contact shadows.
  **/
  @:uproperty public var OcclusionExponent : unreal.Float32;
  
  /**
    Contrast S-curve applied to the computed AO.  A value of 0 means no contrast increase, 1 is a significant contrast increase.
  **/
  @:uproperty public var Contrast : unreal.Float32;
  
  /**
    Max distance that the occlusion of one point will affect another.
    Higher values increase the cost of Distance Field AO exponentially.
  **/
  @:uproperty public var OcclusionMaxDistance : unreal.Float32;
  @:uproperty public var LowerHemisphereColor : unreal.FLinearColor;
  
  /**
    Whether all distant lighting from the lower hemisphere should be set to LowerHemisphereColor.
    Enabling this is accurate when lighting a scene on a planet where the ground blocks the sky,
    However disabling it can be useful to approximate skylight bounce lighting (eg Movable light).
  **/
  @:uproperty public var bLowerHemisphereIsBlack : Bool;
  
  /**
    Only capture emissive materials. Skips all lighting making the capture cheaper. Recomended when using CaptureEveryFrame
  **/
  @:uproperty public var bCaptureEmissiveOnly : Bool;
  
  /**
    Distance from the sky light at which any geometry should be treated as part of the sky.
    This is also used by reflection captures, so update reflection captures to see the impact.
  **/
  @:uproperty public var SkyDistanceThreshold : unreal.Float32;
  
  /**
    Maximum resolution for the very top processed cubemap mip. Must be a power of 2.
  **/
  @:uproperty public var CubemapResolution : unreal.Int32;
  
  /**
    Angle to rotate the source cubemap when SourceType is set to SLS_SpecifiedCubemap.
  **/
  @:uproperty public var SourceCubemapAngle : unreal.Float32;
  
  /**
    Cubemap to use for sky lighting if SourceType is set to SLS_SpecifiedCubemap.
  **/
  @:uproperty public var Cubemap : unreal.UTextureCube;
  
  /**
    Indicates where to get the light contribution from.
  **/
  @:uproperty public var SourceType : unreal.ESkyLightSourceType;
  @:ufunction(BlueprintCallable) @:final public function SetIntensity(NewIntensity : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetIndirectLightingIntensity(NewIntensity : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetVolumetricScatteringIntensity(NewIntensity : unreal.Float32) : Void;
  
  /**
    Set color of the light
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLightColor(NewLightColor : unreal.FLinearColor) : Void;
  
  /**
    Sets the cubemap used when SourceType is set to SpecifiedCubemap, and causes a skylight update on the next tick.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCubemap(NewCubemap : unreal.UTextureCube) : Void;
  
  /**
    Creates sky lighting from a blend between two cubemaps, which is only valid when SourceType is set to SpecifiedCubemap.
    This can be used to seamlessly transition sky lighting between different times of day.
    The caller should continue to update the blend until BlendFraction is 0 or 1 to reduce rendering cost.
    The caller is responsible for avoiding pops due to changing the source or destination.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCubemapBlend(SourceCubemap : unreal.UTextureCube, DestinationCubemap : unreal.UTextureCube, InBlendFraction : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetLowerHemisphereColor(InLowerHemisphereColor : unreal.Const<unreal.PRef<unreal.FLinearColor>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOcclusionTint(InTint : unreal.Const<unreal.PRef<unreal.FColor>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOcclusionContrast(InOcclusionContrast : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOcclusionExponent(InOcclusionExponent : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMinOcclusion(InMinOcclusion : unreal.Float32) : Void;
  
  /**
    Recaptures the scene for the skylight.
    This is useful for making sure the sky light is up to date after changing something in the world that it would capture.
    Warning: this is very costly and will definitely cause a hitch.
  **/
  @:ufunction(BlueprintCallable) @:final public function RecaptureSky() : Void;
  
}
