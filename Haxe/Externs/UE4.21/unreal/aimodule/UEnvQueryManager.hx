/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.aimodule;

@:umodule("AIModule")
@:glueCppIncludes("EnvironmentQuery/EnvQueryManager.h")
@:uextern @:uclass extern class UEnvQueryManager extends unreal.UObject {
  @:ufunction(BlueprintCallable) static public function RunEQSQuery(WorldContextObject : unreal.UObject, QueryTemplate : unreal.aimodule.UEnvQuery, Querier : unreal.UObject, RunMode : unreal.aimodule.EEnvQueryRunMode, WrapperClass : unreal.TSubclassOf<unreal.aimodule.UEnvQueryInstanceBlueprintWrapper>) : unreal.aimodule.UEnvQueryInstanceBlueprintWrapper;
  
  /**
    how often (in seconds) we will warn about the number of queries (allows us to catch multiple occurrences in a session)
  **/
  @:uproperty private var QueryCountWarningInterval : unreal.Float64;
  
  /**
    if greater than zero, we will warn once when the number of queries is greater than or equal to this number, and log the queries out
  **/
  @:uproperty private var QueryCountWarningThreshold : unreal.Int32;
  
  /**
    how long are we allowed to test per update, in seconds.
  **/
  @:uproperty private var MaxAllowedTestingTime : unreal.Float32;
  @:uproperty private var GCShieldedWrappers : unreal.TArray<unreal.aimodule.UEnvQueryInstanceBlueprintWrapper>;
  
  /**
    local cache of context objects for managing BP based objects
  **/
  @:uproperty private var LocalContexts : unreal.TArray<unreal.aimodule.UEnvQueryContext>;
  
  /**
    cache of instances
  **/
  @:uproperty private var InstanceCache : unreal.TArray<unreal.aimodule.FEnvQueryInstanceCache>;
  
}
