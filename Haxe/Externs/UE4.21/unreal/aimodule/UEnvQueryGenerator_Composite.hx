/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.aimodule;

/**
  Composite generator allows using multiple generators in single query option
  All child generators must produce exactly the same item type!
**/
@:umodule("AIModule")
@:glueCppIncludes("EnvironmentQuery/Generators/EnvQueryGenerator_Composite.h")
@:uextern @:uclass extern class UEnvQueryGenerator_Composite extends unreal.aimodule.UEnvQueryGenerator {
  @:uproperty public var ForcedItemType : unreal.TSubclassOf<unreal.aimodule.UEnvQueryItemType>;
  @:uproperty public var bHasMatchingItemType : Bool;
  
  /**
    allow generators with different item types, use at own risk!
    
    WARNING:
    generator will use ForcedItemType for raw data, you MUST ensure proper memory layout
    child generators will be writing to memory block through their own item types:
    - data must fit info block allocated by ForcedItemType
    - tests will read item location/properties through ForcedItemType
  **/
  @:uproperty public var bAllowDifferentItemTypes : Bool;
  @:uproperty public var Generators : unreal.TArray<unreal.aimodule.UEnvQueryGenerator>;
  
}
