/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.aimodule;

/**
  AIPerceptionComponent is used to register as stimuli listener in AIPerceptionSystem
  and gathers registered stimuli. UpdatePerception is called when component gets new stimuli (batched)
**/
@:umodule("AIModule")
@:glueCppIncludes("Perception/AIPerceptionComponent.h")
@:uextern @:uclass extern class UAIPerceptionComponent extends unreal.UActorComponent {
  @:uproperty public var OnTargetPerceptionUpdated : unreal.aimodule.FActorPerceptionUpdatedDelegate;
  
  /**
    Might want to move these to special "BP_AIPerceptionComponent"
  **/
  @:uproperty public var OnPerceptionUpdated : unreal.aimodule.FPerceptionUpdatedDelegate;
  @:uproperty private var AIOwner : unreal.aimodule.AAIController;
  
  /**
    Indicated sense that takes precedence over other senses when determining sensed actor's location.
        Should be set to one of the senses configured in SensesConfig, or None.
  **/
  @:uproperty private var DominantSense : unreal.TSubclassOf<unreal.aimodule.UAISense>;
  @:uproperty private var SensesConfig : unreal.TArray<unreal.aimodule.UAISenseConfig>;
  @:ufunction @:final public function OnOwnerEndPlay(Actor : unreal.AActor, EndPlayReason : unreal.EEndPlayReason) : Void;
  
  /**
    Notifies AIPerceptionSystem to update properties for this "stimuli listener"
  **/
  @:ufunction(BlueprintCallable) @:final public function RequestStimuliListenerUpdate() : Void;
  
  /**
    blueprint interface
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPerceivedHostileActors(OutActors : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  
  /**
    If SenseToUse is none all actors currently perceived in any way will get fetched
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCurrentlyPerceivedActors(SenseToUse : unreal.TSubclassOf<unreal.aimodule.UAISense>, OutActors : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  
  /**
    If SenseToUse is none all actors ever perceived in any way (and not forgotten yet) will get fetched
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetKnownPerceivedActors(SenseToUse : unreal.TSubclassOf<unreal.aimodule.UAISense>, OutActors : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPerceivedActors(SenseToUse : unreal.TSubclassOf<unreal.aimodule.UAISense>, OutActors : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  
  /**
    Retrieves whatever has been sensed about given actor
  **/
  @:ufunction(BlueprintCallable) @:final public function GetActorsPerception(Actor : unreal.AActor, Info : unreal.PRef<unreal.aimodule.FActorPerceptionBlueprintInfo>) : Bool;
  
  /**
    Note that this works only if given sense has been already configured for
        this component instance
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSenseEnabled(SenseClass : unreal.TSubclassOf<unreal.aimodule.UAISense>, bEnable : Bool) : Void;
  
}
