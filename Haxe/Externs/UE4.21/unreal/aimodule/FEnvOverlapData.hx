/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.aimodule;

@:umodule("AIModule")
@:glueCppIncludes("Classes/EnvironmentQuery/EnvQueryTypes.h")
@:uextern @:ustruct extern class FEnvOverlapData {
  
  /**
    if set, overlap will run on complex collisions
  **/
  @:uproperty public var bOverlapComplex : Bool;
  
  /**
    if set, overlap will look only for blocking hits
  **/
  @:uproperty public var bOnlyBlockingHits : Bool;
  
  /**
    shape used for geometry overlap
  **/
  @:uproperty public var OverlapShape : unreal.aimodule.EEnvOverlapShape;
  
  /**
    geometry trace channel used for overlap
  **/
  @:uproperty public var OverlapChannel : unreal.ECollisionChannel;
  
  /**
    Offset from the item location at which to test the overlap.  For example, you may need to offset vertically to avoid overlaps with flat ground.
  **/
  @:uproperty public var ShapeOffset : unreal.FVector;
  
  /**
    shape parameter for overlap
  **/
  @:uproperty public var ExtentZ : unreal.Float32;
  
  /**
    shape parameter for overlap
  **/
  @:uproperty public var ExtentY : unreal.Float32;
  
  /**
    shape parameter for overlap
  **/
  @:uproperty public var ExtentX : unreal.Float32;
  
}
