/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  PawnMovementComponent can be used to update movement for an associated Pawn.
  It also provides ways to accumulate and read directional input in a generic way (with AddInputVector(), ConsumeInputVector(), etc).
  @see APawn
**/
@:glueCppIncludes("GameFramework/PawnMovementComponent.h")
@:uextern @:uclass extern class UPawnMovementComponent extends unreal.UNavMovementComponent {
  
  /**
    Adds the given vector to the accumulated input in world space. Input vectors are usually between 0 and 1 in magnitude.
    They are accumulated during a frame then applied as acceleration during the movement update.
    
    @param WorldDirection        Direction in world space to apply input
    @param ScaleValue            Scale to apply to input. This can be used for analog input, ie a value of 0.5 applies half the normal value.
    @param bForce                        If true always add the input, ignoring the result of IsMoveInputIgnored().
    @see APawn::AddMovementInput()
  **/
  @:ufunction(BlueprintCallable) public function AddInputVector(WorldVector : unreal.FVector, bForce : Bool = false) : Void;
  
  /**
    Return the pending input vector in world space. This is the most up-to-date value of the input vector, pending ConsumeMovementInputVector() which clears it.
    PawnMovementComponents implementing movement usually want to use either this or ConsumeInputVector() as these functions represent the most recent state of input.
    @return The pending input vector in world space.
    @see AddInputVector(), ConsumeInputVector(), GetLastInputVector()
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPendingInputVector() : unreal.FVector;
  
  /**
    Return the last input vector in world space that was processed by ConsumeInputVector(), which is usually done by the Pawn or PawnMovementComponent.
    Any user that needs to know about the input that last affected movement should use this function.
    @return The last input vector in world space that was processed by ConsumeInputVector().
    @see AddInputVector(), ConsumeInputVector(), GetPendingInputVector()
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLastInputVector() : unreal.FVector;
  
  /**
    Returns the pending input vector and resets it to zero.
           * This should be used during a movement update (by the Pawn or PawnMovementComponent) to prevent accumulation of control input between frames.
           * Copies the pending input vector to the saved input vector (GetLastMovementInputVector()).
           * @return The pending input vector.
  **/
  @:ufunction(BlueprintCallable) public function ConsumeInputVector() : unreal.FVector;
  
  /**
    Helper to see if move input is ignored. If there is no Pawn or UpdatedComponent, returns true, otherwise defers to the Pawn's implementation of IsMoveInputIgnored().
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function IsMoveInputIgnored() : Bool;
  
  /**
    Return the Pawn that owns UpdatedComponent.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPawnOwner() : unreal.APawn;
  
  /**
    Pawn that owns this component.
  **/
  @:uproperty private var PawnOwner : unreal.APawn;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function K2_GetInputVector() : unreal.FVector;
  
}
