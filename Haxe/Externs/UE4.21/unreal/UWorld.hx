/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  The World is the top level object representing a map or a sandbox in which Actors and Components will exist and be rendered.
  
  A World can be a single Persistent Level with an optional list of streaming levels that are loaded and unloaded via volumes and blueprint functions
  or it can be a collection of levels organized with a World Composition.
  
  In a standalone game, generally only a single World exists except during seamless area transitions when both a destination and current world exists.
  In the editor many Worlds exist: The level being edited, each PIE instance, each editor tool which has an interactive rendered viewport, and many more.
**/
@:glueCppIncludes("Engine/World.h")
@:uextern @:uclass extern class UWorld extends unreal.UObject {
  
  /**
    Keeps track whether actors moved via PostEditMove and therefore constraint syncup should be performed.
  **/
  @:uproperty public var bAreConstraintsDirty : Bool;
  
  /**
    All levels information from which our world is composed
  **/
  @:uproperty public var WorldComposition : unreal.UWorldComposition;
  #if WITH_EDITORONLY_DATA
  
  /**
    Saved editor viewport states - one for each view type. Indexed using ELevelViewportType from UnrealEdTypes.h.
  **/
  @:uproperty public var EditorViews : unreal.TArray<unreal.FLevelViewportInfo>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Particle event manager *
  **/
  @:uproperty public var MyParticleEventManager : unreal.AParticleEventManager;
  
  /**
    Fake NetDriver for capturing network traffic to record demos
  **/
  @:uproperty public var DemoNetDriver : unreal.UDemoNetDriver;
  
  /**
    Prefix we used to rename streaming levels, non empty in PIE and standalone preview
  **/
  @:uproperty public var StreamingLevelsPrefix : unreal.FString;
  
  /**
    External modules can have additional data associated with this UWorld.
    This is a list of per module world data objects. These aren't
    loaded/saved by default.
  **/
  @:uproperty public var PerModuleDataObjects : unreal.TArray<unreal.UObject>;
  
  /**
    Array of any additional objects that need to be referenced by this world, to make sure they aren't GC'd
  **/
  @:uproperty public var ExtraReferencedObjects : unreal.TArray<unreal.UObject>;
  
  /**
    Instance of this world's game-specific physics collision handler
  **/
  @:uproperty public var PhysicsCollisionHandler : unreal.UPhysicsCollisionHandler;
  
  /**
    Instance of this world's game-specific networking management
  **/
  @:uproperty public var NetworkManager : unreal.AGameNetworkManager;
  
  /**
    Foreground Line Batchers. This can't be Persistent.
  **/
  @:uproperty public var ForegroundLineBatcher : unreal.ULineBatchComponent;
  
  /**
    Persistent Line Batchers. They don't get flushed every frame.
  **/
  @:uproperty public var PersistentLineBatcher : unreal.ULineBatchComponent;
  
  /**
    Line Batchers. All lines to be drawn in the world.
  **/
  @:uproperty public var LineBatcher : unreal.ULineBatchComponent;
  
  /**
    The NAME_GameNetDriver game connection(s) for client/server communication
  **/
  @:uproperty public var NetDriver : unreal.UNetDriver;
  
  /**
    Persistent level containing the world info, default brush and actors spawned during gameplay among other things
  **/
  @:uproperty public var PersistentLevel : unreal.ULevel;
  #if WITH_EDITORONLY_DATA
  
  /**
    Information for thumbnail rendering
  **/
  @:uproperty public var ThumbnailInfo : unreal.UThumbnailInfo;
  
  /**
    Group actors currently "active"
  **/
  @:uproperty public var ActiveGroupActors : unreal.TArray<unreal.AActor>;
  
  /**
    List of all the layers referenced by the world's actors
  **/
  @:uproperty public var Layers : unreal.TArray<unreal.ULayer>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Called from DemoNetDriver when playing back a replay and the timeline is successfully scrubbed
  **/
  @:ufunction @:final public function HandleTimelineScrubbed() : Void;
  
}
