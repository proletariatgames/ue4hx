/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Kismet/KismetInputLibrary.h")
@:uextern @:uclass extern class UKismetInputLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Calibrate the tilt for the input device
  **/
  @:ufunction(BlueprintCallable) static public function CalibrateTilt() : Void;
  
  /**
    Test if the input key are equal (A == B)
    @param A - The key to compare against
    @param B - The key to compare
    @returns True if the key are equal, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function EqualEqual_KeyKey(A : unreal.inputcore.FKey, B : unreal.inputcore.FKey) : Bool;
  
  /**
    Test if the input chords are equal (A == B)
    @param A - The chord to compare against
    @param B - The chord to compare
    @returns True if the chords are equal, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function EqualEqual_InputChordInputChord(A : unreal.slate.FInputChord, B : unreal.slate.FInputChord) : Bool;
  
  /**
    @returns True if the key is a modifier key: Ctrl, Command, Alt, Shift
  **/
  @:ufunction(BlueprintCallable) static public function Key_IsModifierKey(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : Bool;
  
  /**
    @returns True if the key is a gamepad button
  **/
  @:ufunction(BlueprintCallable) static public function Key_IsGamepadKey(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : Bool;
  
  /**
    @returns True if the key is a mouse button
  **/
  @:ufunction(BlueprintCallable) static public function Key_IsMouseButton(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : Bool;
  
  /**
    @returns True if the key is a keyboard button
  **/
  @:ufunction(BlueprintCallable) static public function Key_IsKeyboardKey(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : Bool;
  
  /**
    @returns True if the key is a float axis
  **/
  @:ufunction(BlueprintCallable) static public function Key_IsFloatAxis(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : Bool;
  
  /**
    @returns True if the key is a vector axis
  **/
  @:ufunction(BlueprintCallable) static public function Key_IsVectorAxis(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : Bool;
  
  /**
    @returns True if this is a valid key.
  **/
  @:ufunction(BlueprintCallable) static public function Key_IsValid(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : Bool;
  
  /**
    @returns The display name of the key.
  **/
  @:ufunction(BlueprintCallable) static public function Key_GetDisplayName(Key : unreal.Const<unreal.PRef<unreal.inputcore.FKey>>) : unreal.FText;
  
  /**
    Returns whether or not this character is an auto-repeated keystroke
    
    @return  True if this character is a repeat
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsRepeat(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if either shift key was down when this event occurred
    
    @return  True if shift is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsShiftDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if left shift key was down when this event occurred
    
    @return True if left shift is pressed.
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsLeftShiftDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if right shift key was down when this event occurred
    
    @return True if right shift is pressed.
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsRightShiftDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if either control key was down when this event occurred
    
    @return  True if control is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsControlDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if left control key was down when this event occurred
    
    @return  True if left control is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsLeftControlDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if left control key was down when this event occurred
    
    @return  True if left control is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsRightControlDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if either alt key was down when this event occurred
    
    @return  True if alt is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsAltDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if left alt key was down when this event occurred
    
    @return  True if left alt is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsLeftAltDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if right alt key was down when this event occurred
    
    @return  True if right alt is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsRightAltDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if either command key was down when this event occurred
    
    @return  True if command is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsCommandDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if left command key was down when this event occurred
    
    @return  True if left command is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsLeftCommandDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns true if right command key was down when this event occurred
    
    @return  True if right command is pressed
  **/
  @:ufunction(BlueprintCallable) static public function InputEvent_IsRightCommandDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FInputEvent>>) : Bool;
  
  /**
    Returns the key for this event.
    
    @return  Key name
  **/
  @:ufunction(BlueprintCallable) static public function GetKey(Input : unreal.Const<unreal.PRef<unreal.slatecore.FKeyEvent>>) : unreal.inputcore.FKey;
  @:ufunction(BlueprintCallable) static public function GetUserIndex(Input : unreal.Const<unreal.PRef<unreal.slatecore.FKeyEvent>>) : unreal.Int32;
  @:ufunction(BlueprintCallable) static public function GetAnalogValue(Input : unreal.Const<unreal.PRef<unreal.slatecore.FAnalogInputEvent>>) : unreal.Float32;
  
  /**
    @return The position of the cursor in screen space
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetScreenSpacePosition(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.FVector2D;
  
  /**
    @return The position of the cursor in screen space last time we handled an input event
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetLastScreenSpacePosition(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.FVector2D;
  
  /**
    @return the distance the mouse traveled since the last event was handled.
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetCursorDelta(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.FVector2D;
  
  /**
    Mouse buttons that are currently pressed
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_IsMouseButtonDown(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>, MouseButton : unreal.inputcore.FKey) : Bool;
  
  /**
    Mouse button that caused this event to be raised (possibly EB_None)
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetEffectingButton(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.inputcore.FKey;
  
  /**
    How much did the mouse wheel turn since the last mouse event
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetWheelDelta(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.Float32;
  
  /**
    @return The index of the user that caused the event
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetUserIndex(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.Int32;
  
  /**
    @return The unique identifier of the pointer (e.g., finger index)
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetPointerIndex(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.Int32;
  
  /**
    @return The index of the touch pad that generated this event (for platforms with multiple touch pads per user)
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetTouchpadIndex(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.Int32;
  
  /**
    @return Is this event a result from a touch (as opposed to a mouse)
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_IsTouchEvent(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : Bool;
  
  /**
    @return The type of touch gesture
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetGestureType(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.ESlateGesture;
  
  /**
    @return The change in gesture value since the last gesture event of the same type.
  **/
  @:ufunction(BlueprintCallable) static public function PointerEvent_GetGestureDelta(Input : unreal.Const<unreal.PRef<unreal.slatecore.FPointerEvent>>) : unreal.FVector2D;
  
}
