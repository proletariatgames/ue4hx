/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.clothingsystemruntime;

/**
  Holds initial, asset level config for clothing actors.
**/
@:umodule("ClothingSystemRuntime")
@:glueCppIncludes("Public/Assets/ClothingAsset.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FClothConfig {
  
  /**
    Default damper stiffness for anim drive if an anim drive is in use
  **/
  @:uproperty public var AnimDriveDamperStiffness : unreal.Float32;
  
  /**
    Default spring stiffness for anim drive if an anim drive is in use
  **/
  @:uproperty public var AnimDriveSpringStiffness : unreal.Float32;
  
  /**
    'Thickness' of the simulated cloth, used to adjust collisions
  **/
  @:uproperty public var CollisionThickness : unreal.Float32;
  
  /**
    Scale for the limit of particle tethers (how far they can separate)
  **/
  @:uproperty public var TetherLimit : unreal.Float32;
  
  /**
    Scale for stiffness of particle tethers between each other
  **/
  @:uproperty public var TetherStiffness : unreal.Float32;
  
  /**
    Use gravity override value vs gravity scale
  **/
  @:uproperty public var bUseGravityOverride : Bool;
  
  /**
    Direct gravity override value
  **/
  @:uproperty public var GravityOverride : unreal.FVector;
  
  /**
    Scale of gravity effect on particles
  **/
  @:uproperty public var GravityScale : unreal.Float32;
  
  /**
    Frequency for stiffness calculations, lower values will degrade stiffness of constraints
  **/
  @:uproperty public var StiffnessFrequency : unreal.Float32;
  
  /**
    Frequency of the position solver, lower values will lead to stretchier, bouncier cloth
  **/
  @:uproperty public var SolverFrequency : unreal.Float32;
  
  /**
    Scale for centrifugal particle inertia, how much movement should translate to angular motion (per-axis)
  **/
  @:uproperty public var CentrifugalInertiaScale : unreal.FVector;
  
  /**
    Scale for angular particle inertia, how much movement should translate to angular motion (per-axis)
  **/
  @:uproperty public var AngularInertiaScale : unreal.FVector;
  
  /**
    Scale for linear particle inertia, how much movement should translate to linear motion (per-axis)
  **/
  @:uproperty public var LinearInertiaScale : unreal.FVector;
  
  /**
    Drag applied to angular particle movement, higher values should limit material bending (per-axis)
  **/
  @:uproperty public var AngularDrag : unreal.FVector;
  
  /**
    Drag applied to linear particle movement per-axis
  **/
  @:uproperty public var LinearDrag : unreal.FVector;
  
  /**
    Lift coefficient for wind calculations, higher values make cloth rise easier in wind
  **/
  @:uproperty public var WindLiftCoefficient : unreal.Float32;
  
  /**
    Drag coefficient for wind calculations, higher values mean wind has more lateral effect on cloth
  **/
  @:uproperty public var WindDragCoefficient : unreal.Float32;
  
  /**
    Friction of the surface when colliding
  **/
  @:uproperty public var Friction : unreal.Float32;
  
  /**
    Damping of particle motion per-axis
  **/
  @:uproperty public var Damping : unreal.FVector;
  
  /**
    Scale to use for the radius of the culling checks for self collisions.
    Any other self collision body within the radius of this check will be culled.
    This helps performance with higher resolution meshes by reducing the number
    of colliding bodies within the cloth. Reducing this will have a negative
    effect on performance!
  **/
  @:uproperty public var SelfCollisionCullScale : unreal.Float32;
  
  /**
    Stiffness of the spring force that will resolve self collisions
  **/
  @:uproperty public var SelfCollisionStiffness : unreal.Float32;
  
  /**
    Size of self collision spheres centered on each vert
  **/
  @:uproperty public var SelfCollisionRadius : unreal.Float32;
  
  /**
    Constraint data for shear constraints
  **/
  @:uproperty public var ShearConstraintConfig : unreal.clothingsystemruntime.FClothConstraintSetup;
  
  /**
    Constraint data for bend constraints
  **/
  @:uproperty public var BendConstraintConfig : unreal.clothingsystemruntime.FClothConstraintSetup;
  
  /**
    Constraint data for horizontal constraints
  **/
  @:uproperty public var HorizontalConstraintConfig : unreal.clothingsystemruntime.FClothConstraintSetup;
  
  /**
    Constraint data for vertical constraints
  **/
  @:uproperty public var VerticalConstraintConfig : unreal.clothingsystemruntime.FClothConstraintSetup;
  
  /**
    How wind should be processed, Accurate uses drag and lift to make the cloth react differently, legacy applies similar forces to all clothing without drag and lift (similar to APEX)
  **/
  @:uproperty public var WindMethod : unreal.clothingsystemruntime.EClothingWindMethod;
  
}
