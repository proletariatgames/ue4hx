/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.cryptokeys;

/**
  Implements the settings for imported Paper2D assets, such as sprite sheet textures.
**/
@:umodule("CryptoKeys")
@:glueCppIncludes("CryptoKeysSettings.h")
@:uextern @:uclass extern class UCryptoKeysSettings extends unreal.UObject {
  
  /**
    Enable signing of pak files, to prevent tampering of the data
  **/
  @:uproperty public var bEnablePakSigning : Bool;
  
  /**
    The RSA key private exponent used for signing a pak file
  **/
  @:uproperty public var SigningPrivateExponent : unreal.FString;
  
  /**
    The RSA key modulus used for signing a pak file
  **/
  @:uproperty public var SigningModulus : unreal.FString;
  
  /**
    The RSA key public exponent used for signing a pak file
  **/
  @:uproperty public var SigningPublicExponent : unreal.FString;
  
  /**
    Encrypt all files in the pak file. Secure, but will cause some slowdown to runtime IO performance, and high entropy to packaged data which will be bad for patching
  **/
  @:uproperty public var bEncryptAllAssetFiles : Bool;
  
  /**
    Encrypts the uasset file in cooked data. Less runtime IO cost, and protection to package header information, including most string data, but still leaves the bulk of the data unencrypted.
  **/
  @:uproperty public var bEncryptUAssetFiles : Bool;
  
  /**
    Encrypt the pak index, making it impossible to use unrealpak to manipulate the pak file without the encryption key
  **/
  @:uproperty public var bEncryptPakIndex : Bool;
  
  /**
    Encrypts all ini files in the pak. Gives security to the most common sources of mineable information, with minimal runtime IO cost
  **/
  @:uproperty public var bEncryptPakIniFiles : Bool;
  
  /**
    Secondary encryption keys that can be selected for use on different assets. Games are required to make these keys available to the pak platform file at runtime in order to access the data they protect.
  **/
  @:uproperty public var SecondaryEncryptionKeys : unreal.TArray<unreal.cryptokeys.FCryptoEncryptionKey>;
  
  /**
    The default encryption key used to protect pak files
  **/
  @:uproperty public var EncryptionKey : unreal.FString;
  
}
