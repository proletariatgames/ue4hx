/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.landscape;

@:umodule("Landscape")
@:glueCppIncludes("Classes/LandscapeGrassType.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FGrassVariety {
  
  /**
    Whether we should keep a cpu copy of the instance buffer. This should be set to true if you plan on using GetOverlappingXXXXCount functions of the component otherwise it won't return any data.*
  **/
  @:uproperty public var bKeepInstanceBufferCPUCopy : Bool;
  
  /**
    Whether the grass should cast shadows when using non-precomputed shadowing. *
  **/
  @:uproperty public var bCastDynamicShadow : Bool;
  
  /**
    Whether the grass instances should receive decals.
  **/
  @:uproperty public var bReceivesDecals : Bool;
  
  /**
    Lighting channels that the grass will be assigned. Lights with matching channels will affect the grass.
    These channels only apply to opaque materials, direct lighting, and dynamic lighting and shadowing.
  **/
  @:uproperty public var LightingChannels : unreal.FLightingChannels;
  
  /**
    Whether to use the landscape's lightmap when rendering the grass.
  **/
  @:uproperty public var bUseLandscapeLightmap : Bool;
  
  /**
    Whether the grass instances should be tilted to the normal of the landscape (true), or always vertical (false)
  **/
  @:uproperty public var AlignToSurface : Bool;
  
  /**
    Whether the grass instances should be placed at random rotation (true) or all at the same rotation (false)
  **/
  @:uproperty public var RandomRotation : Bool;
  
  /**
    Specifies the range of scale, from minimum to maximum, to apply to a grass instance's Z Scale property
  **/
  @:uproperty public var ScaleZ : unreal.FFloatInterval;
  
  /**
    Specifies the range of scale, from minimum to maximum, to apply to a grass instance's Y Scale property
  **/
  @:uproperty public var ScaleY : unreal.FFloatInterval;
  
  /**
    Specifies the range of scale, from minimum to maximum, to apply to a grass instance's X Scale property
  **/
  @:uproperty public var ScaleX : unreal.FFloatInterval;
  
  /**
    Specifies grass instance scaling type
  **/
  @:uproperty public var Scaling : unreal.landscape.EGrassScaling;
  
  /**
    Specifies the smallest LOD that will be used for this component.
    If -1 (default), the MinLOD of the static mesh asset will be used instead.
  **/
  @:uproperty public var MinLOD : unreal.Int32;
  
  /**
    The distance where instances will have completely faded out when using a PerInstanceFadeAmount material node. 0 disables.
    When the entire cluster is beyond this distance, the cluster is completely culled and not rendered at all.
  **/
  @:uproperty public var EndCullDistance : unreal.FPerPlatformInt;
  
  /**
    The distance where instances will begin to fade out if using a PerInstanceFadeAmount material node. 0 disables.
  **/
  @:uproperty public var StartCullDistance : unreal.FPerPlatformInt;
  @:uproperty public var PlacementJitter : unreal.Float32;
  
  /**
    If true, use a jittered grid sequence for placement, otherwise use a halton sequence.
  **/
  @:uproperty public var bUseGrid : Bool;
  
  /**
    Instances per 10 square meters.
  **/
  @:uproperty public var GrassDensity : unreal.FPerPlatformFloat;
  @:uproperty public var GrassMesh : unreal.UStaticMesh;
  
}
