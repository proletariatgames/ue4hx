/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Container for a physics representation of an object.
**/
@:glueCppIncludes("Classes/PhysicsEngine/ConstraintInstance.h")
@:uextern @:ustruct extern class FConstraintInstance {
  #if WITH_EDITORONLY_DATA
  @:deprecated @:uproperty public var AngularDriveForceLimit_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var AngularDriveDamping_DEPRECATED : unreal.Float32;
  
  /**
    Revolutions per second
  **/
  @:deprecated @:uproperty public var AngularDriveSpring_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var AngularVelocityTarget_DEPRECATED : unreal.FVector;
  @:deprecated @:uproperty public var AngularOrientationTarget_DEPRECATED : unreal.FRotator;
  @:deprecated @:uproperty public var AngularDriveMode_DEPRECATED : unreal.EAngularDriveMode;
  @:deprecated @:uproperty public var AngularPositionTarget_DEPRECATED : unreal.FQuat;
  @:deprecated @:uproperty public var bAngularVelocityDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bAngularOrientationDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bAngularSlerpDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bTwistVelocityDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bTwistPositionDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bSwingVelocityDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bSwingPositionDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var LinearDriveForceLimit_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var LinearDriveDamping_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var LinearDriveSpring_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var LinearVelocityTarget_DEPRECATED : unreal.FVector;
  @:deprecated @:uproperty public var LinearPositionTarget_DEPRECATED : unreal.FVector;
  @:deprecated @:uproperty public var bLinearVelocityDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bLinearPositionDrive_DEPRECATED : Bool;
  @:deprecated @:uproperty public var AngularBreakThreshold_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var bAngularBreakable_DEPRECATED : Bool;
  @:deprecated @:uproperty public var TwistLimitDamping_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var TwistLimitStiffness_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var SwingLimitDamping_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var SwingLimitStiffness_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var Swing2LimitAngle_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var TwistLimitAngle_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var Swing1LimitAngle_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var bTwistLimitSoft_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bSwingLimitSoft_DEPRECATED : Bool;
  @:deprecated @:uproperty public var AngularSwing2Motion_DEPRECATED : unreal.EAngularConstraintMotion;
  @:deprecated @:uproperty public var AngularTwistMotion_DEPRECATED : unreal.EAngularConstraintMotion;
  @:deprecated @:uproperty public var AngularSwing1Motion_DEPRECATED : unreal.EAngularConstraintMotion;
  @:deprecated @:uproperty public var LinearBreakThreshold_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var bLinearBreakable_DEPRECATED : Bool;
  @:deprecated @:uproperty public var LinearLimitDamping_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var LinearLimitStiffness_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var bLinearLimitSoft_DEPRECATED : Bool;
  @:deprecated @:uproperty public var LinearLimitSize_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var LinearZMotion_DEPRECATED : unreal.ELinearConstraintMotion;
  @:deprecated @:uproperty public var LinearYMotion_DEPRECATED : unreal.ELinearConstraintMotion;
  @:deprecated @:uproperty public var LinearXMotion_DEPRECATED : unreal.ELinearConstraintMotion;
  @:deprecated @:uproperty public var ProjectionAngularTolerance_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var ProjectionLinearTolerance_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var bEnableProjection_DEPRECATED : Bool;
  @:deprecated @:uproperty public var bDisableCollision_DEPRECATED : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Constraint Data (properties easily swapped at runtime based on different constraint profiles)
  **/
  @:uproperty public var ProfileInstance : unreal.FConstraintProfileProperties;
  
  /**
    If true, linear limits scale using the absolute min of the 3d scale of the owning component
  **/
  @:uproperty public var bScaleLinearLimits : Bool;
  
  /**
    Specifies the angular offset between the two frames of reference. By default limit goes from (-Angle, +Angle)
    This allows you to bias the limit for swing1 swing2 and twist.
  **/
  @:uproperty public var AngularRotationOffset : unreal.FRotator;
  
  /**
    Seconday axis in Body2 reference frame. Orthogonal to PriAxis2.
  **/
  @:uproperty public var SecAxis2 : unreal.FVector;
  
  /**
    Primary (twist) axis in Body2 reference frame.
  **/
  @:uproperty public var PriAxis2 : unreal.FVector;
  
  /**
    Location of constraint in Body2 reference frame.
  **/
  @:uproperty public var Pos2 : unreal.FVector;
  
  /**
    Seconday axis in Body1 reference frame. Orthogonal to PriAxis1.
  **/
  @:uproperty public var SecAxis1 : unreal.FVector;
  
  /**
    Primary (twist) axis in Body1 reference frame.
  **/
  @:uproperty public var PriAxis1 : unreal.FVector;
  
  /**
    Location of constraint in Body1 reference frame.
  **/
  @:uproperty public var Pos1 : unreal.FVector;
  
  /**
    Name of second bone (body) that this constraint is connecting.
    This will be the 'parent' bone in a PhysicsAset.
  **/
  @:uproperty public var ConstraintBone2 : unreal.FName;
  
  /**
    Name of first bone (body) that this constraint is connecting.
    This will be the 'child' bone in a PhysicsAsset.
  **/
  @:uproperty public var ConstraintBone1 : unreal.FName;
  
  /**
    Name of bone that this joint is associated with.
  **/
  @:uproperty public var JointName : unreal.FName;
  
}
