/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplaytags;

/**
  Class for importing GameplayTags directly from a config file.
  FGameplayTagsEditorModule::StartupModule adds this class to the Project Settings menu to be edited.
  Editing this in Project Settings will output changes to Config/DefaultGameplayTags.ini.
  
  Primary advantages of this approach are:
  -Adding new tags doesn't require checking out external and editing file (CSV or xls) then reimporting.
  -New tags are mergeable since .ini are text and non exclusive checkout.
  
  To do:
  -Better support could be added for adding new tags. We could match existing tags and autocomplete subtags as
  the user types (e.g, autocomplete 'Damage.Physical' as the user is adding a 'Damage.Physical.Slash' tag).
**/
@:umodule("GameplayTags")
@:glueCppIncludes("GameplayTagsSettings.h")
@:uextern @:uclass extern class UGameplayTagsSettings extends unreal.gameplaytags.UGameplayTagsList {
  #if WITH_EDITORONLY_DATA
  
  /**
    Dummy parameter used to hook the editor UI
  **/
  @:uproperty public var RestrictedTagList : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Allows new tags to be saved into their own INI file.
  **/
  @:uproperty public var RestrictedConfigFiles : unreal.TArray<unreal.gameplaytags.FRestrictedConfigInfo>;
  
  /**
    The length in bits of the first segment when net serializing tags. We will serialize NetIndexFirstBitSegment + 1 bit to indicate "more", which is slower to replicate
  **/
  @:uproperty public var NetIndexFirstBitSegment : unreal.Int32;
  
  /**
    Numbers of bits to use for replicating container size, set this based on how large your containers tend to be
  **/
  @:uproperty public var NumBitsForContainerSize : unreal.Int32;
  
  /**
    List of tags most frequently replicated
  **/
  @:uproperty public var CommonlyReplicatedTags : unreal.TArray<unreal.FName>;
  
  /**
    List of active tag redirects
  **/
  @:uproperty public var GameplayTagRedirects : unreal.TArray<unreal.gameplaytags.FGameplayTagRedirect>;
  
  /**
    List of data tables to load tags from
  **/
  @:uproperty public var GameplayTagTableList : unreal.TArray<unreal.FSoftObjectPath>;
  
  /**
    If true, will replicate gameplay tags by index instead of name. For this to work, tags must be identical on client and server
  **/
  @:uproperty public var FastReplication : Bool;
  @:uproperty public var CategoryRemapping : unreal.TArray<unreal.gameplaytags.FGameplayTagCategoryRemap>;
  
  /**
    If true, will give load warnings when reading invalid tags off disk
  **/
  @:uproperty public var WarnOnInvalidTags : Bool;
  
  /**
    If true, will import tags from ini files in the config/tags folder
  **/
  @:uproperty public var ImportTagsFromConfig : Bool;
  
}
