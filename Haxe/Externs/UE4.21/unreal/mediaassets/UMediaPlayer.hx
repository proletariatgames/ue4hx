/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mediaassets;

/**
  Implements a media player asset that can play movies and other media sources.
**/
@:umodule("MediaAssets")
@:glueCppIncludes("MediaPlayer.h")
@:uextern @:uclass extern class UMediaPlayer extends unreal.UObject {
  
  /**
    Check whether media playback can be paused right now.
    
    Playback can be paused if the media supports pausing and if it is currently playing.
    
    @return true if pausing playback can be paused, false otherwise.
    @see CanPlay, Pause
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function CanPause() : Bool;
  
  /**
    Check whether the specified media source can be played by this player.
    
    If a desired player name is set for this player, it will only check
    whether that particular player type can play the specified source.
    
    @param MediaSource The media source to check.
    @return true if the media source can be opened, false otherwise.
    @see CanPlayUrl, SetDesiredPlayerName
  **/
  @:ufunction(BlueprintCallable) @:final public function CanPlaySource(MediaSource : unreal.mediaassets.UMediaSource) : Bool;
  
  /**
    Check whether the specified URL can be played by this player.
    
    If a desired player name is set for this player, it will only check
    whether that particular player type can play the specified URL.
    
    @param Url The URL to check.
    @see CanPlaySource, SetDesiredPlayerName
  **/
  @:ufunction(BlueprintCallable) @:final public function CanPlayUrl(Url : unreal.FString) : Bool;
  
  /**
    Close the currently open media, if any.
    
    @see OnMediaClosed, OpenPlaylist, OpenPlaylistIndex, OpenSource, OpenUrl, Pause, Play
  **/
  @:ufunction(BlueprintCallable) @:final public function Close() : Void;
  
  /**
    Get the number of channels in the specified audio track.
    
    @param TrackIndex Index of the audio track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Number of channels.
    @see GetAudioTrackSampleRate, GetAudioTrackType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAudioTrackChannels(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.Int32;
  
  /**
    Get the sample rate of the specified audio track.
    
    @param TrackIndex Index of the audio track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Samples per second.
    @see GetAudioTrackChannels, GetAudioTrackType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAudioTrackSampleRate(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.Int32;
  
  /**
    Get the type of the specified audio track format.
    
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Audio format type string.
    @see GetAudioTrackSampleRate, GetAudioTrackSampleRate
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetAudioTrackType(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.FString;
  
  /**
    Get the name of the current desired native player.
    
    @return The name of the desired player, or NAME_None if not set.
    @see SetDesiredPlayerName
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDesiredPlayerName() : unreal.FName;
  
  /**
    Get the media's duration.
    
    @return A time span representing the duration.
    @see GetTime, Seek
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDuration() : unreal.FTimespan;
  
  /**
    Get the current horizontal field of view (only for 360 videos).
    
    @return Horizontal field of view (in Euler degrees).
    @see GetVerticalFieldOfView, GetViewRotation, SetHorizontalFieldOfView
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetHorizontalFieldOfView() : unreal.Float32;
  
  /**
    Get the human readable name of the currently loaded media source.
    
    @return Media source name, or empty text if no media is opened
    @see GetPlayerName, GetUrl
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetMediaName() : unreal.FText;
  
  /**
    Get the number of tracks of the given type.
    
    @param TrackType The type of media tracks.
    @return Number of tracks.
    @see GetNumTrackFormats, GetSelectedTrack, SelectTrack
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetNumTracks(TrackType : unreal.mediaassets.EMediaPlayerTrack) : unreal.Int32;
  
  /**
    Get the number of formats of the specified track.
    
    @param TrackType The type of media tracks.
    @param TrackIndex The index of the track.
    @return Number of formats.
    @see GetNumTracks, GetSelectedTrack, SelectTrack
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetNumTrackFormats(TrackType : unreal.mediaassets.EMediaPlayerTrack, TrackIndex : unreal.Int32) : unreal.Int32;
  
  /**
    Get the name of the current native media player.
    
    @return Player name, or NAME_None if not available.
    @see GetMediaName
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPlayerName() : unreal.FName;
  
  /**
    Get the current play list.
    
    Media players always have a valid play list. In C++ code you can use
    the GetPlaylistRef to get a reference instead of a pointer to it.
    
    @return The play list.
    @see GetPlaylistIndex, GetPlaylistRef
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPlaylist() : unreal.mediaassets.UMediaPlaylist;
  
  /**
    Get the current play list index.
    
    @return Play list index.
    @see GetPlaylist
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPlaylistIndex() : unreal.Int32;
  
  /**
    Get the media's current playback rate.
    
    @return The playback rate.
    @see SetRate, SupportsRate
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetRate() : unreal.Float32;
  
  /**
    Get the index of the currently selected track of the given type.
    
    @param TrackType The type of track to get.
    @return The index of the selected track, or INDEX_NONE if no track is active.
    @see GetNumTracks, GetTrackFormat, SelectTrack
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSelectedTrack(TrackType : unreal.mediaassets.EMediaPlayerTrack) : unreal.Int32;
  
  /**
    Get the supported playback rates.
    
    @param Unthinned Whether the rates are for unthinned playback.
    @param Will contain the the ranges of supported rates.
    @see SetRate, SupportsRate
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSupportedRates(OutRates : unreal.PRef<unreal.TArray<unreal.FFloatRange>>, Unthinned : Bool) : Void;
  
  /**
    Get the media's current playback time.
    
    @return Playback time.
    @see GetDuration, Seek
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTime() : unreal.FTimespan;
  
  /**
    Get the human readable name of the specified track.
    
    @param TrackType The type of track.
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @return Display name.
    @see GetNumTracks, GetTrackLanguage
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTrackDisplayName(TrackType : unreal.mediaassets.EMediaPlayerTrack, TrackIndex : unreal.Int32) : unreal.FText;
  
  /**
    Get the index of the active format of the specified track type.
    
    @param TrackType The type of track.
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @return The index of the selected format.
    @see GetNumTrackFormats, GetSelectedTrack, SetTrackFormat
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTrackFormat(TrackType : unreal.mediaassets.EMediaPlayerTrack, TrackIndex : unreal.Int32) : unreal.Int32;
  
  /**
    Get the language tag of the specified track.
    
    @param TrackType The type of track.
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @return Language tag, i.e. "en-US" for English, or "und" for undefined.
    @see GetNumTracks, GetTrackDisplayName
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTrackLanguage(TrackType : unreal.mediaassets.EMediaPlayerTrack, TrackIndex : unreal.Int32) : unreal.FString;
  
  /**
    Get the URL of the currently loaded media, if any.
    
    @return Media URL, or empty string if no media was loaded.
    @see OpenUrl
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetUrl() : unreal.FString;
  
  /**
    Get the current vertical field of view (only for 360 videos).
    
    @return Vertical field of view (in Euler degrees), or 0.0 if not available.
    @see GetHorizontalFieldOfView, GetViewRotation, SetVerticalFieldOfView
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVerticalFieldOfView() : unreal.Float32;
  
  /**
    Get the aspect ratio of the specified video track.
    
    @param TrackIndex Index of the video track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Aspect ratio.
    @see GetVideoTrackDimensions, GetVideoTrackFrameRate, GetVideoTrackFrameRates, GetVideoTrackType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVideoTrackAspectRatio(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.Float32;
  
  /**
    Get the current dimensions of the specified video track.
    
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Video dimensions (in pixels).
    @see GetVideoTrackAspectRatio, GetVideoTrackFrameRate, GetVideoTrackFrameRates, GetVideoTrackType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVideoTrackDimensions(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.FIntPoint;
  
  /**
    Get the frame rate of the specified video track.
    
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Frame rate (in frames per second).
    @see GetVideoTrackAspectRatio, GetVideoTrackDimensions, GetVideoTrackFrameRates, GetVideoTrackType, SetVideoTrackFrameRate
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVideoTrackFrameRate(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.Float32;
  
  /**
    Get the supported range of frame rates of the specified video track.
    
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Frame rate range (in frames per second).
    @see GetVideoTrackAspectRatio, GetVideoTrackDimensions, GetVideoTrackFrameRate, GetVideoTrackType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVideoTrackFrameRates(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.FFloatRange;
  
  /**
    Get the type of the specified video track format.
    
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @return Video format type string.
    @see GetVideoTrackAspectRatio, GetVideoTrackDimensions, GetVideoTrackFrameRate, GetVideoTrackFrameRates
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetVideoTrackType(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : unreal.FString;
  
  /**
    Get the current view rotation (only for 360 videos).
    
    @return View rotation, or zero rotator if not available.
    @see GetHorizontalFieldOfView, GetVerticalFieldOfView, SetViewRotation
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetViewRotation() : unreal.FRotator;
  
  /**
    Delay of the player's time.
    
    @return Delay added to the player's time used to manually sync multiple sources.
    @see SetTimeDelay
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTimeDelay() : unreal.FTimespan;
  
  /**
    Check whether the player is in an error state.
    
    When the player is in an error state, no further operations are possible.
    The current media must be closed, and a new media source must be opened
    before the player can be used again. Errors are usually caused by faulty
    media files or interrupted network connections.
    
    @see IsReady
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function HasError() : Bool;
  
  /**
    Check whether playback is buffering data.
    
    @return true if looping, false otherwise.
    @see IsConnecting, IsLooping, IsPaused, IsPlaying, IsPreparing, IsReady
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsBuffering() : Bool;
  
  /**
    Check whether the player is currently connecting to a media source.
    
    @return true if connecting, false otherwise.
    @see IsBuffering, IsLooping, IsPaused, IsPlaying, IsPreparing, IsReady
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsConnecting() : Bool;
  
  /**
    Check whether playback is looping.
    
    @return true if looping, false otherwise.
    @see IsBuffering, IsConnecting, IsPaused, IsPlaying, IsPreparing, IsReady, SetLooping
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsLooping() : Bool;
  
  /**
    Check whether playback is currently paused.
    
    @return true if playback is paused, false otherwise.
    @see CanPause, IsBuffering, IsConnecting, IsLooping, IsPaused, IsPlaying, IsPreparing, IsReady, Pause
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsPaused() : Bool;
  
  /**
    Check whether playback has started.
    
    @return true if playback has started, false otherwise.
    @see CanPlay, IsBuffering, IsConnecting, IsLooping, IsPaused, IsPlaying, IsPreparing, IsReady, Play
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsPlaying() : Bool;
  
  /**
    Check whether the media is currently opening or buffering.
    
    @return true if playback is being prepared, false otherwise.
    @see CanPlay, IsBuffering, IsConnecting, IsLooping, IsPaused, IsPlaying, IsReady, Play
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsPreparing() : Bool;
  
  /**
    Check whether media is ready for playback.
    
    A player is ready for playback if it has a media source opened that
    finished preparing and is not in an error state.
    
    @return true if media is ready, false otherwise.
    @see HasError, IsBuffering, IsConnecting, IsLooping, IsPaused, IsPlaying, IsPreparing
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsReady() : Bool;
  
  /**
    Open the next item in the current play list.
    
    The player will start playing the new media source if it was playing
    something previously, otherwise it will only open the media source.
    
    @return true on success, false otherwise.
    @see Close, OpenUrl, OpenSource, Play, Previous, SetPlaylist
  **/
  @:ufunction(BlueprintCallable) @:final public function Next() : Bool;
  
  /**
    Opens the specified media file path.
    
    A return value of true indicates that the player will attempt to open
    the media, but it may fail to do so later for other reasons, i.e. if
    a connection to the media server timed out. Use the OnMediaOpened and
    OnMediaOpenFailed delegates to detect if and when the media is ready!
    
    @param FilePath The file path to open.
    @return true if the file path will be opened, false otherwise.
    @see GetUrl, Close, OpenPlaylist, OpenPlaylistIndex, OpenSource, OpenUrl, Reopen
  **/
  @:ufunction(BlueprintCallable) @:final public function OpenFile(FilePath : unreal.FString) : Bool;
  
  /**
    Open the first media source in the specified play list.
    
    @param InPlaylist The play list to open.
    @return true if the source will be opened, false otherwise.
    @see Close, OpenFile, OpenPlaylistIndex, OpenSource, OpenUrl, Reopen
  **/
  @:ufunction(BlueprintCallable) @:final public function OpenPlaylist(InPlaylist : unreal.mediaassets.UMediaPlaylist) : Bool;
  
  /**
    Open a particular media source in the specified play list.
    
    @param InPlaylist The play list to open.
    @param Index The index of the source to open.
    @return true if the source will be opened, false otherwise.
    @see Close, OpenFile, OpenPlaylist, OpenSource, OpenUrl, Reopen
  **/
  @:ufunction(BlueprintCallable) @:final public function OpenPlaylistIndex(InPlaylist : unreal.mediaassets.UMediaPlaylist, Index : unreal.Int32) : Bool;
  
  /**
    Open the specified media source.
    
    A return value of true indicates that the player will attempt to open
    the media, but it may fail to do so later for other reasons, i.e. if
    a connection to the media server timed out. Use the OnMediaOpened and
    OnMediaOpenFailed delegates to detect if and when the media is ready!
    
    @param MediaSource The media source to open.
    @return true if the source will be opened, false otherwise.
    @see Close, OpenFile, OpenPlaylist, OpenPlaylistIndex, OpenUrl, Reopen
  **/
  @:ufunction(BlueprintCallable) @:final public function OpenSource(MediaSource : unreal.mediaassets.UMediaSource) : Bool;
  
  /**
    Open the specified media source with supplied options applied.
    
    A return value of true indicates that the player will attempt to open
    the media, but it may fail to do so later for other reasons, i.e. if
    a connection to the media server timed out. Use the OnMediaOpened and
    OnMediaOpenFailed delegates to detect if and when the media is ready!
    
    @param MediaSource The media source to open.
    @param Options The media player options to apply.
    @return true if the source will be opened, false otherwise.
    @see Close, OpenFile, OpenPlaylist, OpenPlaylistIndex, OpenUrl, Reopen
  **/
  @:ufunction(BlueprintCallable) @:final public function OpenSourceWithOptions(MediaSource : unreal.mediaassets.UMediaSource, Options : unreal.Const<unreal.PRef<unreal.mediautils.FMediaPlayerOptions>>) : Bool;
  
  /**
    Opens the specified media URL.
    
    A return value of true indicates that the player will attempt to open
    the media, but it may fail to do so later for other reasons, i.e. if
    a connection to the media server timed out. Use the OnMediaOpened and
    OnMediaOpenFailed delegates to detect if and when the media is ready!
    
    @param Url The URL to open.
    @return true if the URL will be opened, false otherwise.
    @see GetUrl, Close, OpenFile, OpenPlaylist, OpenPlaylistIndex, OpenSource, Reopen
  **/
  @:ufunction(BlueprintCallable) @:final public function OpenUrl(Url : unreal.FString) : Bool;
  
  /**
    Pauses media playback.
    
    This is the same as setting the playback rate to 0.0.
    
    @return true if playback is being paused, false otherwise.
    @see CanPause, Close, Next, Play, Previous, Rewind, Seek
  **/
  @:ufunction(BlueprintCallable) @:final public function Pause() : Bool;
  
  /**
    Starts media playback.
    
    This is the same as setting the playback rate to 1.0.
    
    @return true if playback is starting, false otherwise.
    @see CanPlay, GetRate, Next, Pause, Previous, SetRate
  **/
  @:ufunction(BlueprintCallable) @:final public function Play() : Bool;
  
  /**
    Open the previous item in the current play list.
    
    The player will start playing the new media source if it was playing
    something previously, otherwise it will only open the media source.
    
    @return true on success, false otherwise.
    @see Close, Next, OpenUrl, OpenSource, Play, SetPlaylist
  **/
  @:ufunction(BlueprintCallable) @:final public function Previous() : Bool;
  
  /**
    Reopens the currently opened media or play list.
    
    @return true if the media will be opened, false otherwise.
    @see Close, Open, OpenFile, OpenPlaylist, OpenPlaylistIndex, OpenSource, OpenUrl
  **/
  @:ufunction(BlueprintCallable) @:final public function Reopen() : Bool;
  
  /**
    Rewinds the media to the beginning.
    
    This is the same as seeking to zero time.
    
    @return true if rewinding, false otherwise.
    @see GetTime, Seek
  **/
  @:ufunction(BlueprintCallable) @:final public function Rewind() : Bool;
  
  /**
    Seeks to the specified playback time.
    
    @param Time The playback time to set.
    @return true on success, false otherwise.
    @see GetTime, Rewind
  **/
  @:ufunction(BlueprintCallable) @:final public function Seek(Time : unreal.Const<unreal.PRef<unreal.FTimespan>>) : Bool;
  
  /**
    Select the active track of the given type.
    
    The selected track will use its currently active format. Active formats will
    be remembered on a per track basis. The first available format is active by
    default. To switch the track format, use SetTrackFormat instead.
    
    @param TrackType The type of track to select.
    @param TrackIndex The index of the track to select, or INDEX_NONE to deselect.
    @return true if the track was selected, false otherwise.
    @see GetNumTracks, GetSelectedTrack, SetTrackFormat
  **/
  @:ufunction(BlueprintCallable) @:final public function SelectTrack(TrackType : unreal.mediaassets.EMediaPlayerTrack, TrackIndex : unreal.Int32) : Bool;
  
  /**
    Set the time on which to block.
    
    If set, this player will block in TickFetch until the video sample
    for the specified time are actually available.
    
    @param Time The time to block on, or FTimespan::MinValue to disable.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetBlockOnTime(Time : unreal.Const<unreal.PRef<unreal.FTimespan>>) : Void;
  
  /**
    Set the name of the desired native player.
    
    @param PlayerName The name of the player to set.
    @see GetDesiredPlayerName
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDesiredPlayerName(PlayerName : unreal.FName) : Void;
  
  /**
    Enables or disables playback looping.
    
    @param Looping Whether playback should be looped.
    @return true on success, false otherwise.
    @see IsLooping
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLooping(Looping : Bool) : Bool;
  
  /**
    Changes the media's playback rate.
    
    @param Rate The playback rate to set.
    @return true on success, false otherwise.
    @see GetRate, SupportsRate
  **/
  @:ufunction(BlueprintCallable) @:final public function SetRate(Rate : unreal.Float32) : Bool;
  
  /**
    Set the volume on the native player if not mixing with Sound Wave asset.
    
    The SetNativeVolume can be used to change the audio output volume at runtime. Note that
    not all media player plug-ins may support native audio output on all platforms.
    
    @param Volume The volume to set.
    @return true on success, false otherwise.
    @see NativeAudioOut
  **/
  @:ufunction(BlueprintCallable) @:final public function SetNativeVolume(Volume : unreal.Float32) : Bool;
  
  /**
    Set the format on the specified track.
    
    Selecting the format will not switch to the specified track. To switch
    tracks, use SelectTrack instead. If the track is already selected, the
    format change will be applied immediately.
    
    @param TrackType The type of track to update.
    @param TrackIndex The index of the track to update.
    @param FormatIndex The index of the format to select (must be valid).
    @return true if the track was selected, false otherwise.
    @see GetNumTrackFormats, GetNumTracks, GetTrackFormat, SelectTrack
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTrackFormat(TrackType : unreal.mediaassets.EMediaPlayerTrack, TrackIndex : unreal.Int32, FormatIndex : unreal.Int32) : Bool;
  
  /**
    Set the frame rate of the specified video track.
    
    @param TrackIndex The index of the track, or INDEX_NONE for the selected one.
    @param FormatIndex Index of the track format, or INDEX_NONE for the selected one.
    @param FrameRate The frame rate to set (must be in range of format's supported frame rates).
    @return true on success, false otherwise.
    @see GetVideoTrackAspectRatio, GetVideoTrackDimensions, GetVideoTrackFrameRate, GetVideoTrackFrameRates, GetVideoTrackType
  **/
  @:ufunction(BlueprintCallable) @:final public function SetVideoTrackFrameRate(TrackIndex : unreal.Int32, FormatIndex : unreal.Int32, FrameRate : unreal.Float32) : Bool;
  
  /**
    Set the field of view (only for 360 videos).
    
    @param Horizontal Horizontal field of view (in Euler degrees).
    @param Vertical Vertical field of view (in Euler degrees).
    @param Whether the field of view change should be absolute (true) or relative (false).
    @return true on success, false otherwise.
    @see GetHorizontalFieldOfView, GetVerticalFieldOfView, SetViewRotation
  **/
  @:ufunction(BlueprintCallable) @:final public function SetViewField(Horizontal : unreal.Float32, Vertical : unreal.Float32, Absolute : Bool) : Bool;
  
  /**
    Set the view's rotation (only for 360 videos).
    
    @param Rotation The desired view rotation.
    @param Whether the rotation change should be absolute (true) or relative (false).
    @return true on success, false otherwise.
    @see GetViewRotation, SetViewField
  **/
  @:ufunction(BlueprintCallable) @:final public function SetViewRotation(Rotation : unreal.Const<unreal.PRef<unreal.FRotator>>, Absolute : Bool) : Bool;
  
  /**
    Delay of the player's time.
    
    This setting can be used to manually sync multiple sources.
    Set to 1 seconds, if you would like that Player to play 1 second behind his current time.
    If the value is too big, it is possible that the player would not hold that frame for that long.
    @return true on success, false otherwise.
    @see GetTimeDelay
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTimeDelay(TimeDelay : unreal.FTimespan) : Void;
  
  /**
    Check whether the specified playback rate is supported.
    
    @param Rate The playback rate to check.
    @param Unthinned Whether no frames should be dropped at the given rate.
    @see SupportsScrubbing, SupportsSeeking
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function SupportsRate(Rate : unreal.Float32, Unthinned : Bool) : Bool;
  
  /**
    Check whether the currently loaded media supports scrubbing.
    
    @return true if scrubbing is supported, false otherwise.
    @see SupportsRate, SupportsSeeking
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function SupportsScrubbing() : Bool;
  
  /**
    Check whether the currently loaded media can jump to a certain position.
    
    @return true if seeking is supported, false otherwise.
    @see SupportsRate, SupportsScrubbing
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function SupportsSeeking() : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    Whether this player should stop when entering or exiting PIE.
  **/
  @:uproperty public var AffectedByPIEHandling : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The initial view rotation.
    
    This setting is used only for 360 videos. It determines the rotation of
    the video's view. To modify the view orientation at runtime in Blueprints,
    use the GetViewRotation and SetViewRotation functions.
    
    Please note that not all players may support video view rotations.
    
    @see GetViewRotation, SetViewRotation, HorizontalFieldOfView, VerticalFieldOfView
  **/
  @:uproperty private var ViewRotation : unreal.FRotator;
  
  /**
    The initial vertical field of view (in Euler degrees; default = 60).
    
    This setting is used only for 360 videos. It determines the portion of the
    video that is visible at a time. To modify the field of view at runtime in
    Blueprints, use the SetHorizontalFieldOfView function.
    
    Please note that some 360 video players may be able to change only the
    horizontal field of view, and this setting may be ignored.
    
    @see GetVerticalFieldOfView, SetVerticalFieldOfView, HorizontalFieldOfView, ViewRotation
  **/
  @:uproperty private var VerticalFieldOfView : unreal.Float32;
  
  /**
    The initial horizontal field of view (in Euler degrees; default = 90).
    
    This setting is used only for 360 videos. It determines the portion of the
    video that is visible at a time. To modify the field of view at runtime in
    Blueprints, use the SetHorizontalFieldOfView function.
    
    @see GetHorizontalFieldOfView, SetHorizontalFieldOfView, VerticalFieldOfView, ViewRotation
  **/
  @:uproperty private var HorizontalFieldOfView : unreal.Float32;
  
  /**
    Delay of the player's time.
    
    @see SetTimeDelay, GetTimeDelay
  **/
  @:uproperty private var TimeDelay : unreal.FTimespan;
  
  /**
    The current index of the source in the play list being played.
    
    Use the Previous and Next methods to change this value at runtime.
    
    @see Next, Previous
  **/
  @:uproperty private var PlaylistIndex : unreal.Int32;
  
  /**
    The play list to use, if any.
    
    Use the OpenPlaylist or OpenPlaylistIndex function to change this value at runtime.
    
    @see OpenPlaylist, OpenPlaylistIndex
  **/
  @:uproperty private var Playlist : unreal.mediaassets.UMediaPlaylist;
  
  /**
    Whether playback should shuffle media sources in the play list.
    
    @see OpenPlaylist, OpenPlaylistIndex
  **/
  @:uproperty public var Shuffle : Bool;
  
  /**
    Automatically start playback after media opened successfully.
    
    If disabled, listen to the OnMediaOpened Blueprint event to detect when
    the media finished opening, and then start playback using the Play function.
    
    @see OpenFile, OpenPlaylist, OpenPlaylistIndex, OpenSource, OpenUrl, Play
  **/
  @:uproperty public var PlayOnOpen : Bool;
  
  /**
    Output any audio via the operating system's sound mixer instead of a Sound Wave asset.
    
    If enabled, the assigned Sound Wave asset will be ignored. The SetNativeVolume
    function can then be used to change the audio output volume at runtime. Note that
    not all media player plug-ins may support native audio output on all platforms.
    
    @see SetNativeVolume
  **/
  @:uproperty public var NativeAudioOut : Bool;
  
  /**
    Duration of samples to cache behind the play head (when running as game).
    
    @see CacheAhead, CacheBehind
  **/
  @:uproperty public var CacheBehindGame : unreal.FTimespan;
  
  /**
    Duration of samples to cache behind the play head (when not running as game).
    
    @see CacheAhead, CacheBehindGame
  **/
  @:uproperty public var CacheBehind : unreal.FTimespan;
  
  /**
    Duration of samples to cache ahead of the play head.
    
    @see CacheBehind, CacheBehindGame
  **/
  @:uproperty public var CacheAhead : unreal.FTimespan;
  
  /**
    A delegate that is invoked when the media track collection changed.
    
    @see OnMediaOpened
  **/
  @:uproperty public var OnTracksChanged : unreal.mediaassets.FOnMediaPlayerMediaEvent;
  
  /**
    A delegate that is invoked when a seek operation completed successfully.
    
    Depending on whether the underlying player implementation performs seeks
    synchronously or asynchronously, this event may be executed before or
    after the call to Seek returns.
  **/
  @:uproperty public var OnSeekCompleted : unreal.mediaassets.FOnMediaPlayerMediaEvent;
  
  /**
    A delegate that is invoked when media playback has been suspended.
    
    @see OnPlaybackResumed
  **/
  @:uproperty public var OnPlaybackSuspended : unreal.mediaassets.FOnMediaPlayerMediaEvent;
  
  /**
    A delegate that is invoked when media playback has been resumed.
    
    @see OnPlaybackSuspended
  **/
  @:uproperty public var OnPlaybackResumed : unreal.mediaassets.FOnMediaPlayerMediaEvent;
  
  /**
    A delegate that is invoked when a media source has failed to open.
    
    This delegate is only executed if OpenSource / OpenUrl returned true and
    the media failed to open asynchronously later. It is not executed if
    OpenSource / OpenUrl returned false, indicating an immediate failure.
    
    @see OnMediaOpened
  **/
  @:uproperty public var OnMediaOpenFailed : unreal.mediaassets.FOnMediaPlayerMediaOpenFailed;
  
  /**
    A delegate that is invoked when a media source has been opened.
    
    Depending on whether the underlying player implementation opens the media
    synchronously or asynchronously, this event may be executed before or
    after the call to OpenSource / OpenUrl returns.
    
    @see OnMediaOpenFailed, OnTracksChanged
  **/
  @:uproperty public var OnMediaOpened : unreal.mediaassets.FOnMediaPlayerMediaOpened;
  
  /**
    A delegate that is invoked when a media source has been closed.
  **/
  @:uproperty public var OnMediaClosed : unreal.mediaassets.FOnMediaPlayerMediaEvent;
  
  /**
    A delegate that is invoked when playback has reached the end of the media.
  **/
  @:uproperty public var OnEndReached : unreal.mediaassets.FOnMediaPlayerMediaEvent;
  
}
