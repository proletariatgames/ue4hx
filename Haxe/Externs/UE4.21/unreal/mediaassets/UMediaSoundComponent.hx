/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mediaassets;

/**
  Implements a sound component for playing a media player's audio output.
**/
@:umodule("MediaAssets")
@:glueCppIncludes("MediaSoundComponent.h")
@:uextern @:uclass extern class UMediaSoundComponent extends unreal.audiomixer.USynthComponent {
  
  /**
    The media player asset associated with this component.
    
    This property is meant for design-time convenience. To change the
    associated media player at run-time, use the SetMediaPlayer method.
    
    @see SetMediaPlayer
  **/
  @:uproperty private var MediaPlayer : unreal.mediaassets.UMediaPlayer;
  
  /**
    The allowed range of dynamic rate adjustment.
    
    If dynamic rate adjustment is enabled, and the necessary adjustment
    falls outside of this range, audio samples will be dropped.
  **/
  @:uproperty public var RateAdjustmentRange : unreal.FFloatRange;
  
  /**
    Factor for calculating the sample rate adjustment.
    
    If dynamic rate adjustment is enabled, this number is multiplied with the drift
    between the audio and media clock (in 100ns ticks) to determine the adjustment.
    that is to be multiplied into the current playrate.
  **/
  @:uproperty public var RateAdjustmentFactor : unreal.Float32;
  
  /**
    Dynamically adjust the sample rate if audio and media clock desynchronize.
  **/
  @:uproperty public var DynamicRateAdjustment : Bool;
  
  /**
    Media sound channel type.
  **/
  @:uproperty public var Channels : unreal.mediaassets.EMediaSoundChannels;
  
  /**
    Get the attenuation settings based on the current component settings.
    
    @param OutAttenuationSettings Will contain the attenuation settings, if available.
    @return true if attenuation settings were returned, false if attenuation is disabled.
  **/
  @:ufunction(BlueprintCallable) @:final public function BP_GetAttenuationSettingsToApply(OutAttenuationSettings : unreal.PRef<unreal.FSoundAttenuationSettings>) : Bool;
  
  /**
    Get the media player that provides the audio samples.
    
    @return The component's media player, or nullptr if not set.
    @see SetMediaPlayer
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMediaPlayer() : unreal.mediaassets.UMediaPlayer;
  
  /**
    Set the media player that provides the audio samples.
    
    @param NewMediaPlayer The player to set.
    @see GetMediaPlayer
  **/
  @:ufunction(BlueprintCallable) @:final public function SetMediaPlayer(NewMediaPlayer : unreal.mediaassets.UMediaPlayer) : Void;
  
}
