/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.navigationsystem;

@:umodule("NavigationSystem")
@:glueCppIncludes("NavMesh/RecastNavMesh.h")
@:uextern @:uclass extern class ARecastNavMesh extends unreal.navigationsystem.ANavigationData {
  
  /**
    Value added to each search height to compensate for error between navmesh polys and walkable geometry
  **/
  @:uproperty public var VerticalDeviationFromGroundCompensation : unreal.Float32;
  
  /**
    Euclidean distance heuristic scale used while pathfinding
  **/
  @:uproperty public var HeuristicScale : unreal.Float32;
  
  /**
    If set, paths can end at navlink poly (not the ground one!)
  **/
  @:uproperty public var bAllowNavLinkAsPathEnd : Bool;
  
  /**
    Indicates whether default navigation filters will use virtual functions. Defaults to true.
  **/
  @:uproperty public var bUseVirtualFilters : Bool;
  
  /**
    If set, tiles generated without any navmesh data will be marked to distinguish them from not generated / streamed out ones. Defaults to false.
  **/
  @:uproperty public var bStoreEmptyTileLayers : Bool;
  
  /**
    TODO: switch to disable new code from OffsetFromCorners if necessary - remove it later
  **/
  @:uproperty public var bUseBetterOffsetsFromCorners : Bool;
  @:uproperty public var bDoFullyAsyncNavDataGathering : Bool;
  
  /**
    if set, only low height spans with corresponding area modifier will be stored in tile cache (reduces memory, can't modify without full tile rebuild)
  **/
  @:uproperty public var bFilterLowSpanFromTileCache : Bool;
  
  /**
    if set, only single low height span will be allowed under valid one
  **/
  @:uproperty public var bFilterLowSpanSequences : Bool;
  
  /**
    mark areas with insufficient free height above instead of cutting them out (accessible only for area modifiers using replace mode)
  **/
  @:uproperty public var bMarkLowHeightAreas : Bool;
  
  /**
    controls whether voxel filterring will be applied (via FRecastTileGenerator::ApplyVoxelFilter).
        Results in generated navemesh better fitting navigation bounds, but hits (a bit) generation performance
  **/
  @:uproperty public var bPerformVoxelFiltering : Bool;
  
  /**
    Controls whether Navigation Areas will be sorted by cost before application
        to navmesh during navmesh generation. This is relevant then there are
        areas overlapping and we want to have area cost express area relevancy
        as well. Setting it to true will result in having area sorted by cost,
        but it will also increase navmesh generation cost a bit
  **/
  @:uproperty public var bSortNavigationAreasByCost : Bool;
  
  /**
    number of chunk splits (along single axis) used for layer's partitioning: ChunkyMonotone
  **/
  @:uproperty public var LayerChunkSplits : unreal.Int32;
  
  /**
    number of chunk splits (along single axis) used for region's partitioning: ChunkyMonotone
  **/
  @:uproperty public var RegionChunkSplits : unreal.Int32;
  
  /**
    partitioning method for creating tile layers
  **/
  @:uproperty public var LayerPartitioning : unreal.navigationsystem.ERecastPartitioning;
  
  /**
    partitioning method for creating navmesh polys
  **/
  @:uproperty public var RegionPartitioning : unreal.navigationsystem.ERecastPartitioning;
  
  /**
    specifes default limit to A* nodes used when performing hierarchical navigation queries.
  **/
  @:uproperty public var DefaultMaxHierarchicalSearchNodes : unreal.Float32;
  
  /**
    specifes default limit to A* nodes used when performing navigation queries.
        Can be overridden by passing custom FNavigationQueryFilter
  **/
  @:uproperty public var DefaultMaxSearchNodes : unreal.Float32;
  
  /**
    navmesh draw distance in game (always visible in editor)
  **/
  @:uproperty public var DefaultDrawDistance : unreal.Float32;
  
  /**
    Use this if you don't want your tiles to start at (0,0,0)
  **/
  @:uproperty public var NavMeshOriginOffset : unreal.FVector;
  @:uproperty public var PolyRefSaltBits : unreal.Int32;
  @:uproperty public var PolyRefNavPolyBits : unreal.Int32;
  @:uproperty public var PolyRefTileBits : unreal.Int32;
  
  /**
    Absolute hard limit to number of navmesh tiles. Be very, very careful while modifying it while
        having big maps with navmesh. A single, empty tile takes 176 bytes and empty tiles are
        allocated up front (subject to change, but that's where it's at now)
        @note TileNumberHardLimit is always rounded up to the closest power of 2
  **/
  @:uproperty public var TileNumberHardLimit : unreal.Int32;
  @:uproperty public var MaxSimultaneousTileGenerationJobsCount : unreal.Int32;
  
  /**
    How much navigable shapes can get simplified - the higher the value the more freedom
  **/
  @:uproperty public var MaxSimplificationError : unreal.Float32;
  
  /**
    The size limit of regions to be merged with bigger regions (watershed partitioning only)
  **/
  @:uproperty public var MergeRegionSize : unreal.Float32;
  
  /**
    The minimum dimension of area. Areas smaller than this will be discarded
  **/
  @:uproperty public var MinRegionArea : unreal.Float32;
  @:uproperty public var AgentMaxStepHeight : unreal.Float32;
  
  /**
    The maximum slope (angle) that the agent can move on.
  **/
  @:uproperty public var AgentMaxSlope : unreal.Float32;
  
  /**
    Size of the tallest agent that will path with this navmesh.
  **/
  @:uproperty public var AgentMaxHeight : unreal.Float32;
  @:uproperty public var AgentHeight : unreal.Float32;
  
  /**
    Radius of smallest agent to traverse this navmesh
  **/
  @:uproperty public var AgentRadius : unreal.Float32;
  
  /**
    vertical size of voxelization cell
  **/
  @:uproperty public var CellHeight : unreal.Float32;
  
  /**
    horizontal size of voxelization cell
  **/
  @:uproperty public var CellSize : unreal.Float32;
  
  /**
    size of single tile, expressed in uu
  **/
  @:uproperty public var TileSizeUU : unreal.Float32;
  
  /**
    maximum number of tiles NavMesh can hold
  **/
  @:uproperty public var TilePoolSize : unreal.Int32;
  
  /**
    if true, the NavMesh will allocate fixed size pool for tiles, should be enabled to support streaming
  **/
  @:uproperty public var bFixedTilePoolSize : Bool;
  
  /**
    vertical offset added to navmesh's debug representation for better readability
  **/
  @:uproperty public var DrawOffset : unreal.Float32;
  @:uproperty public var bDrawNavMesh : Bool;
  @:uproperty public var bDistinctlyDrawTilesBeingBuilt : Bool;
  @:uproperty public var bDrawOctreeDetails : Bool;
  
  /**
    should we draw edges of every navmesh's triangle
  **/
  @:uproperty public var bDrawOctree : Bool;
  @:uproperty public var bDrawClusters : Bool;
  @:uproperty public var bDrawFailedNavLinks : Bool;
  @:uproperty public var bDrawNavLinks : Bool;
  @:uproperty public var bDrawLabelsOnPathNodes : Bool;
  @:uproperty public var bDrawDefaultPolygonCost : Bool;
  @:uproperty public var bDrawPolygonLabels : Bool;
  @:uproperty public var bDrawTileLabels : Bool;
  
  /**
    Draw input geometry passed to the navmesh generator.  Recommend disabling other geometry rendering via viewport showflags in editor.
  **/
  @:uproperty public var bDrawPathCollidingGeometry : Bool;
  
  /**
    should we draw the tile boundaries
  **/
  @:uproperty public var bDrawTileBounds : Bool;
  
  /**
    should we draw border-edges
  **/
  @:uproperty public var bDrawNavMeshEdges : Bool;
  
  /**
    if disabled skips filling drawn navmesh polygons
  **/
  @:uproperty public var bDrawFilledPolys : Bool;
  
  /**
    should we draw edges of every poly (i.e. not only border-edges)
  **/
  @:uproperty public var bDrawPolyEdges : Bool;
  
  /**
    should we draw edges of every navmesh's triangle
  **/
  @:uproperty public var bDrawTriangleEdges : Bool;
  
}
