/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Input parameters to PredictProjectilePath functions.
**/
@:glueCppIncludes("Classes/Kismet/GameplayStaticsTypes.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FPredictProjectilePathParams {
  
  /**
    Trace against complex collision (triangles rather than simple primitives) if tracing with collision.
  **/
  @:uproperty public var bTraceComplex : Bool;
  
  /**
    Duration of debug lines (only relevant for DrawDebugType::Duration)
  **/
  @:uproperty public var DrawDebugTime : unreal.Float32;
  
  /**
    Debug drawing duration option.
  **/
  @:uproperty public var DrawDebugType : unreal.EDrawDebugTrace;
  
  /**
    Optional override of Gravity (if 0, uses WorldGravityZ).
  **/
  @:uproperty public var OverrideGravityZ : unreal.Float32;
  
  /**
    Determines size of each sub-step in the simulation (chopping up MaxSimTime). Recommended between 10 to 30 depending on desired quality versus performance.
  **/
  @:uproperty public var SimFrequency : unreal.Float32;
  
  /**
    Actors to ignore when tracing with collision.
  **/
  @:uproperty public var ActorsToIgnore : unreal.TArray<unreal.AActor>;
  
  /**
    Trace channel to use, if tracing with collision.
  **/
  @:uproperty public var TraceChannel : unreal.ECollisionChannel;
  
  /**
    Whether or not to use TraceChannel, if tracing with collision.
  **/
  @:uproperty public var bTraceWithChannel : Bool;
  
  /**
    Maximum simulation time for the virtual projectile.
  **/
  @:uproperty public var MaxSimTime : unreal.Float32;
  
  /**
    Projectile radius, used when tracing for collision. If <= 0, a line trace is used instead.
  **/
  @:uproperty public var ProjectileRadius : unreal.Float32;
  
  /**
    Whether to trace along the path looking for blocking collision and stopping at the first hit.
  **/
  @:uproperty public var bTraceWithCollision : Bool;
  
  /**
    Initial launch velocity at the start of the trace.
  **/
  @:uproperty public var LaunchVelocity : unreal.FVector;
  
  /**
    Location of the start of the trace.
  **/
  @:uproperty public var StartLocation : unreal.FVector;
  
}
