/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  FWorldContext
     A context for dealing with UWorlds at the engine level. As the engine brings up and destroys world, we need a way to keep straight
     what world belongs to what.
  
     WorldContexts can be thought of as a track. By default we have 1 track that we load and unload levels on. Adding a second context is adding
     a second track; another track of progression for worlds to live on.
  
     For the GameEngine, there will be one WorldContext until we decide to support multiple simultaneous worlds.
     For the EditorEngine, there may be one WorldContext for the EditorWorld and one for the PIE World.
  
     FWorldContext provides both a way to manage 'the current PIE UWorld*' as well as state that goes along with connecting/travelling to
  new worlds.
  
     FWorldContext should remain internal to the UEngine classes. Outside code should not keep pointers or try to manage FWorldContexts directly.
     Outside code can still deal with UWorld*, and pass UWorld*s into Engine level functions. The Engine code can look up the relevant context
     for a given UWorld*.
  
  For convenience, FWorldContext can maintain outside pointers to UWorld*s. For example, PIE can tie UWorld* UEditorEngine::PlayWorld to the PIE
     world context. If the PIE UWorld changes, the UEditorEngine::PlayWorld pointer will be automatically updated. This is done with AddRef() and
  SetCurrentWorld().
**/
@:glueCppIncludes("Classes/Engine/Engine.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FWorldContext {
  
  /**
    A list of active net drivers
  **/
  @:uproperty public var ActiveNetDrivers : unreal.TArray<unreal.FNamedNetDriver>;
  @:uproperty public var OwningGameInstance : unreal.UGameInstance;
  @:uproperty public var GameViewport : unreal.UGameViewportClient;
  @:uproperty public var PendingLevelStreamingStatusUpdates : unreal.TArray<unreal.FLevelStreamingStatus>;
  
  /**
    Handles to object references; used by the engine to e.g. the prevent objects from being garbage collected.
  **/
  @:uproperty public var ObjectReferencers : unreal.TArray<unreal.UObjectReferencer>;
  
  /**
    Array of already loaded levels. The ordering is arbitrary and depends on what is already loaded and such.
  **/
  @:uproperty public var LoadedLevelsForPendingMapChange : unreal.TArray<unreal.ULevel>;
  
  /**
    A list of tag/array pairs that is used at LoadMap time to fully load packages that may be needed for the map/game with DLC, but we can't use DynamicLoadObject to load from the packages
  **/
  @:uproperty public var PackagesToFullyLoad : unreal.TArray<unreal.FFullyLoadedPackagesInfo>;
  @:uproperty public var PendingNetGame : unreal.UPendingNetGame;
  
  /**
    last server we connected to (for "reconnect" command)
  **/
  @:uproperty public var LastRemoteURL : unreal.FURL;
  
  /**
    URL the last time we traveled
  **/
  @:uproperty public var LastURL : unreal.FURL;
  
}
