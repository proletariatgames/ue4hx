/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Enumerates available options for alpha channel through post processing. The renderer will always generate premultiplied RGBA
  with alpha as translucency (0 = fully opaque; 1 = fully translucent).
**/
@:glueCppIncludes("Classes/Engine/RendererSettings.h")
@:uname("EAlphaChannelMode.Type")
@:uextern @:uenum extern enum EAlphaChannelMode {
  
  /**
    Disabled, reducing GPU cost to the minimum. (default).
    @DisplayName Disabled
  **/
  @DisplayName("Disabled")
  Disabled;
  
  /**
    Maintain alpha channel only within linear color space. Tonemapper won't output alpha channel.
    @DisplayName Linear color space only
  **/
  @DisplayName("Linear color space only")
  LinearColorSpaceOnly;
  
  /**
    Maintain alpha channel within linear color space, but also pass it through the tonemapper.
    
    CAUTION: Passing the alpha channel through the tonemapper can unevitably lead to pretty poor compositing quality as
    opposed to linear color space compositing, especially on purely additive pixels bloom can generate. This settings is
    exclusively targeting broadcast industry in case of hardware unable to do linear color space compositing and
    tonemapping.
    @DisplayName Allow through tonemapper
  **/
  @DisplayName("Allow through tonemapper")
  AllowThroughTonemapper;
  
}
