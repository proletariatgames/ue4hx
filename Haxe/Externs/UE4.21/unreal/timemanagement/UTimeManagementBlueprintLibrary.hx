/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.timemanagement;

@:umodule("TimeManagement")
@:glueCppIncludes("TimeManagementBlueprintLibrary.h")
@:uextern @:uclass extern class UTimeManagementBlueprintLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Converts an FrameRate to a float ie: 1/30 returns 0.0333333
  **/
  @:ufunction(BlueprintCallable) static public function Conv_FrameRateToSeconds(InFrameRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>) : unreal.Float32;
  
  /**
    Converts an QualifiedFrameTime to seconds.
  **/
  @:ufunction(BlueprintCallable) static public function Conv_QualifiedFrameTimeToSeconds(InFrameTime : unreal.Const<unreal.PRef<unreal.FQualifiedFrameTime>>) : unreal.Float32;
  
  /**
    Multiplies a value in seconds against a FrameRate to get a new FrameTime.
  **/
  @:ufunction(BlueprintCallable) static public function Multiply_SecondsFrameRate(TimeInSeconds : unreal.Float32, FrameRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>) : unreal.FFrameTime;
  
  /**
    Converts an Timecode to a string (hh:mm:ss:ff). If bForceSignDisplay then the number sign will always be prepended instead of just when expressing a negative time.
  **/
  @:ufunction(BlueprintCallable) static public function Conv_TimecodeToString(InTimecode : unreal.Const<unreal.PRef<unreal.FTimecode>>, bForceSignDisplay : Bool = false) : unreal.FString;
  
  /**
    Verifies that this is a valid framerate with a non-zero denominator.
  **/
  @:ufunction(BlueprintCallable) static public function IsValid_Framerate(InFrameRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>) : Bool;
  
  /**
    Checks if this framerate is an even multiple of another framerate, ie: 60 is a multiple of 30, but 59.94 is not.
  **/
  @:ufunction(BlueprintCallable) static public function IsValid_MultipleOf(InFrameRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>, OtherFramerate : unreal.Const<unreal.PRef<unreal.FFrameRate>>) : Bool;
  
  /**
    Converts the specified time from one framerate to another framerate. This is useful for converting between tick resolution and display rate.
  **/
  @:ufunction(BlueprintCallable) static public function TransformTime(SourceTime : unreal.Const<unreal.PRef<unreal.FFrameTime>>, SourceRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>, DestinationRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>) : unreal.FFrameTime;
  
  /**
    Snaps the given SourceTime to the nearest frame in the specified Destination Framerate. Useful for determining the nearest frame for another resolution. Returns the frame time in the destination frame rate.
  **/
  @:ufunction(BlueprintCallable) static public function SnapFrameTimeToRate(SourceTime : unreal.Const<unreal.PRef<unreal.FFrameTime>>, SourceRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>, SnapToRate : unreal.Const<unreal.PRef<unreal.FFrameRate>>) : unreal.FFrameTime;
  
  /**
    Addition (FrameNumber A + FrameNumber B)
  **/
  @:ufunction(BlueprintCallable) static public function Add_FrameNumberFrameNumber(A : unreal.FFrameNumber, B : unreal.FFrameNumber) : unreal.FFrameNumber;
  
  /**
    Subtraction (FrameNumber A - FrameNumber B)
  **/
  @:ufunction(BlueprintCallable) static public function Subtract_FrameNumberFrameNumber(A : unreal.FFrameNumber, B : unreal.FFrameNumber) : unreal.FFrameNumber;
  
  /**
    Addition (FrameNumber A + int B)
  **/
  @:ufunction(BlueprintCallable) static public function Add_FrameNumberInteger(A : unreal.FFrameNumber, B : unreal.Int32) : unreal.FFrameNumber;
  
  /**
    Subtraction (FrameNumber A - int B)
  **/
  @:ufunction(BlueprintCallable) static public function Subtract_FrameNumberInteger(A : unreal.FFrameNumber, B : unreal.Int32) : unreal.FFrameNumber;
  
  /**
    Multiply (FrameNumber A * B)
  **/
  @:ufunction(BlueprintCallable) static public function Multiply_FrameNumberInteger(A : unreal.FFrameNumber, B : unreal.Int32) : unreal.FFrameNumber;
  
  /**
    Divide (FrameNumber A / B)
  **/
  @:ufunction(BlueprintCallable) static public function Divide_FrameNumberInteger(A : unreal.FFrameNumber, B : unreal.Int32) : unreal.FFrameNumber;
  
  /**
    Converts a FrameNumber to an int32 for use in functions that take int32 frame counts for convenience.
  **/
  @:ufunction(BlueprintCallable) static public function Conv_FrameNumberToInteger(InFrameNumber : unreal.Const<unreal.PRef<unreal.FFrameNumber>>) : unreal.Int32;
  
  /**
    Get the Timecode from the TimeManagement's TimecodeProvider.
    @return true if the Timecode is valid. The timecode is valid when the TimecodeProfier is Synchronized.
  **/
  @:ufunction(BlueprintCallable) static public function GetTimecode() : unreal.FTimecode;
  
}
