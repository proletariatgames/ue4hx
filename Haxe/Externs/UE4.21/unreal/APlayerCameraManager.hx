/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  A PlayerCameraManager is responsible for managing the camera for a particular
  player. It defines the final view properties used by other systems (e.g. the renderer),
  meaning you can think of it as your virtual eyeball in the world. It can compute the
  final camera properties directly, or it can arbitrate/blend between other objects or
  actors that influence the camera (e.g. blending from one CameraActor to another).
  
  The PlayerCameraManagers primary external responsibility is to reliably respond to
  various Get*() functions, such as GetCameraViewPoint. Most everything else is
  implementation detail and overrideable by user projects.
  
  By default, a PlayerCameraManager maintains a "view target", which is the primary actor
  the camera is associated with. It can also apply various "post" effects to the final
  view state, such as camera animations, shakes, post-process effects or special
  effects such as dirt on the lens.
  
  @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Camera/
**/
@:glueCppIncludes("Camera/PlayerCameraManager.h")
@:uextern @:uclass extern class APlayerCameraManager extends unreal.AActor {
  
  /**
    Maximum view roll, in degrees.
  **/
  @:uproperty public var ViewRollMax : unreal.Float32;
  
  /**
    Minimum view roll, in degrees.
  **/
  @:uproperty public var ViewRollMin : unreal.Float32;
  
  /**
    Maximum view yaw, in degrees.
  **/
  @:uproperty public var ViewYawMax : unreal.Float32;
  
  /**
    Minimum view yaw, in degrees.
  **/
  @:uproperty public var ViewYawMin : unreal.Float32;
  
  /**
    Maximum view pitch, in degrees.
  **/
  @:uproperty public var ViewPitchMax : unreal.Float32;
  
  /**
    Minimum view pitch, in degrees.
  **/
  @:uproperty public var ViewPitchMin : unreal.Float32;
  
  /**
    True if we did a camera cut this frame. Automatically reset to false every frame.
    This flag affects various things in the renderer (such as whether to use the occlusion queries from last frame, and motion blur).
  **/
  @:uproperty public var bGameCameraCutThisFrame : Bool;
  
  /**
    True if server will use camera positions replicated from the client instead of calculating them locally.
  **/
  @:uproperty public var bUseClientSideCameraUpdates : Bool;
  
  /**
    True if clients are handling setting their own viewtarget and the server should not replicate it (e.g. during certain Matinee sequences)
  **/
  @:uproperty public var bClientSimulatingViewTarget : Bool;
  
  /**
    True if black bars should be added if the destination view has a different aspect ratio (only used when a view target doesn't specify whether or not to constrain the aspect ratio; most of the time the value from a camera component is used instead)
  **/
  @:uproperty public var bDefaultConstrainAspectRatio : Bool;
  
  /**
    True when this camera should use an orthographic perspective instead of FOV
  **/
  @:uproperty public var bIsOrthographic : Bool;
  
  /**
    Internal. Receives the output of individual camera animations.
  **/
  @:uproperty private var AnimCameraActor : unreal.ACameraActor;
  
  /**
    Array of camera anim instances that are not playing and available to be used.
  **/
  @:uproperty private var FreeAnims : unreal.TArray<unreal.UCameraAnimInst>;
  
  /**
    Array of camera anim instances that are currently playing and in-use
  **/
  @:uproperty public var ActiveAnims : unreal.TArray<unreal.UCameraAnimInst>;
  
  /**
    Internal list of active post process effects. Parallel array to PostProcessBlendCacheWeights.
  **/
  @:uproperty private var PostProcessBlendCache : unreal.TArray<unreal.FPostProcessSettings>;
  
  /**
    Cached ref to modifier for code-driven screen shakes
  **/
  @:uproperty private var CachedCameraShakeMod : unreal.UCameraModifier_CameraShake;
  
  /**
    CameraBlood emitter attached to this camera
  **/
  @:uproperty private var CameraLensEffects : unreal.TArray<unreal.AEmitterCameraLensEffectBase>;
  
  /**
    Offset to view target (used in certain CameraStyles)
  **/
  @:uproperty public var ViewTargetOffset : unreal.FVector;
  
  /**
    Offset to Z free camera position (used in certain CameraStyles)
  **/
  @:uproperty public var FreeCamOffset : unreal.FVector;
  
  /**
    Distance to place free camera from view target (used in certain CameraStyles)
  **/
  @:uproperty public var FreeCamDistance : unreal.Float32;
  
  /**
    List of modifiers to create by default for this camera
  **/
  @:uproperty public var DefaultModifiers : unreal.TArray<unreal.TSubclassOf<unreal.UCameraModifier>>;
  
  /**
    List of active camera modifier instances that have a chance to update the final camera POV
  **/
  @:uproperty private var ModifierList : unreal.TArray<unreal.UCameraModifier>;
  
  /**
    Pending view target for blending
  **/
  @:uproperty public var PendingViewTarget : unreal.FTViewTarget;
  
  /**
    Current ViewTarget
  **/
  @:uproperty public var ViewTarget : unreal.FTViewTarget;
  @:uproperty public var LastFrameCameraCache : unreal.FCameraCacheEntry;
  @:uproperty public var CameraCache : unreal.FCameraCacheEntry;
  
  /**
    Default aspect ratio (used when a view target override the aspect ratio and bConstrainAspectRatio is set; most of the time the value from a camera component will be used instead)
  **/
  @:uproperty public var DefaultAspectRatio : unreal.Float32;
  
  /**
    The default desired width (in world units) of the orthographic view (ignored in Perspective mode)
  **/
  @:uproperty public var DefaultOrthoWidth : unreal.Float32;
  
  /**
    FOV to use by default.
  **/
  @:uproperty public var DefaultFOV : unreal.Float32;
  
  /**
    PlayerController that owns this Camera actor
  **/
  @:uproperty public var PCOwner : unreal.APlayerController;
  
  /**
    Implementable blueprint hook to allow a PlayerCameraManager subclass to
    constrain or otherwise modify the camera during free-camera photography.
    For example, a blueprint may wish to limit the distance from the camera's
    original point, or forbid the camera from passing through walls.
    NewCameraLocation contains the proposed new camera location.
    PreviousCameraLocation contains the camera location in the previous frame.
    OriginalCameraLocation contains the camera location before the game was put
    into photography mode.
    Return ResultCameraLocation as modified according to your constraints.
  **/
  @:ufunction(BlueprintNativeEvent) public function PhotographyCameraModify(NewCameraLocation : unreal.Const<unreal.FVector>, PreviousCameraLocation : unreal.Const<unreal.FVector>, OriginalCameraLocation : unreal.Const<unreal.FVector>, ResultCameraLocation : unreal.PRef<unreal.FVector>) : Void;
  
  /**
    Event triggered upon entering Photography mode (before pausing, if
    r.Photography.AutoPause is 1).
  **/
  @:ufunction(BlueprintNativeEvent) public function OnPhotographySessionStart() : Void;
  
  /**
    Event triggered upon leaving Photography mode (after unpausing, if
    r.Photography.AutoPause is 1).
  **/
  @:ufunction(BlueprintNativeEvent) public function OnPhotographySessionEnd() : Void;
  
  /**
    Event triggered upon the start of a multi-part photograph capture (i.e. a
    stereoscopic or 360-degree shot).  This is an ideal time to turn off
    rendering effects that tile badly (UI, subtitles, vignette, very aggressive
    bloom, etc; most of these are automatically disabled when
    r.Photography.AutoPostprocess is 1).
  **/
  @:ufunction(BlueprintNativeEvent) public function OnPhotographyMultiPartCaptureStart() : Void;
  
  /**
    Event triggered upon the end of a multi-part photograph capture, when manual
    free-roaming photographic camera control is about to be returned to the user.
    Here you may re-enable whatever was turned off within
    OnPhotographyMultiPartCaptureStart.
  **/
  @:ufunction(BlueprintNativeEvent) public function OnPhotographyMultiPartCaptureEnd() : Void;
  
  /**
    Blueprint hook to allow blueprints to override existing camera behavior or implement custom cameras.
    If this function returns true, we will use the given returned values and skip further calculations to determine
    final camera POV.
  **/
  @:ufunction(BlueprintImplementableEvent) public function BlueprintUpdateCamera(CameraTarget : unreal.AActor, NewCameraLocation : unreal.PRef<unreal.FVector>, NewCameraRotation : unreal.PRef<unreal.FRotator>, NewCameraFOV : unreal.Float32) : Bool;
  
  /**
    Returns the PlayerController that owns this camera.
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetOwningPlayerController() : unreal.APlayerController;
  
  /**
    Creates and initializes a new camera modifier of the specified class.
    @param ModifierClass - The class of camera modifier to create.
    @return Returns the newly created camera modifier.
  **/
  @:ufunction(BlueprintCallable) public function AddNewCameraModifier(ModifierClass : unreal.TSubclassOf<unreal.UCameraModifier>) : unreal.UCameraModifier;
  
  /**
    Returns camera modifier for this camera of the given class, if it exists.
    Exact class match only. If there are multiple modifiers of the same class, the first one is returned.
  **/
  @:ufunction(BlueprintCallable) public function FindCameraModifierByClass(ModifierClass : unreal.TSubclassOf<unreal.UCameraModifier>) : unreal.UCameraModifier;
  
  /**
    Removes the given camera modifier from this camera (if it's on the camera in the first place) and discards it.
    @return True if successfully removed, false otherwise.
  **/
  @:ufunction(BlueprintCallable) public function RemoveCameraModifier(ModifierToRemove : unreal.UCameraModifier) : Bool;
  
  /**
    @return Returns the camera's current full FOV angle, in degrees.
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetFOVAngle() : unreal.Float32;
  
  /**
    @return Returns camera's current rotation.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCameraRotation() : unreal.FRotator;
  
  /**
    @return Returns camera's current location.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCameraLocation() : unreal.FVector;
  
  /**
    Creates a camera lens effect of the given class on this camera.
    @param LensEffectEmitterClass - Class of lens effect emitter to create.
    @return Returns the new emitter actor.
  **/
  @:ufunction(BlueprintCallable) public function AddCameraLensEffect(LensEffectEmitterClass : unreal.TSubclassOf<unreal.AEmitterCameraLensEffectBase>) : unreal.AEmitterCameraLensEffectBase;
  
  /**
    Removes the given lens effect from the camera.
    @param Emitter - the emitter actor to remove from the camera
  **/
  @:ufunction(BlueprintCallable) public function RemoveCameraLensEffect(Emitter : unreal.AEmitterCameraLensEffectBase) : Void;
  
  /**
    Removes all camera lens effects.
  **/
  @:ufunction(BlueprintCallable) public function ClearCameraLensEffects() : Void;
  
  /**
    Plays a camera shake on this camera.
    @param Shake - The class of camera shake to play.
    @param Scale - Scalar defining how "intense" to play the shake. 1.0 is normal (as authored).
    @param PlaySpace - Which coordinate system to play the shake in (affects oscillations and camera anims)
    @param UserPlaySpaceRot - Coordinate system to play shake when PlaySpace == CAPS_UserDefined.
  **/
  @:ufunction(BlueprintCallable) public function PlayCameraShake(ShakeClass : unreal.TSubclassOf<unreal.UCameraShake>, Scale : unreal.Float32 = 1.000000, PlaySpace : unreal.ECameraAnimPlaySpace = CameraLocal, UserPlaySpaceRot : unreal.FRotator) : unreal.UCameraShake;
  
  /**
    Immediately stops the given shake instance and invalidates it.
  **/
  @:ufunction(BlueprintCallable) public function StopCameraShake(ShakeInstance : unreal.UCameraShake, bImmediately : Bool = true) : Void;
  
  /**
    Stops playing CameraShake of the given class.
  **/
  @:ufunction(BlueprintCallable) public function StopAllInstancesOfCameraShake(Shake : unreal.TSubclassOf<unreal.UCameraShake>, bImmediately : Bool = true) : Void;
  
  /**
    Stops all active camera shakes on this camera.
  **/
  @:ufunction(BlueprintCallable) public function StopAllCameraShakes(bImmediately : Bool = true) : Void;
  
  /**
    Does a camera fade to/from a solid color.  Animates automatically.
    @param FromAlpha - Alpha at which to begin the fade. Range [0..1], where 0 is fully transparent and 1 is fully opaque solid color.
    @param ToAlpha - Alpha at which to finish the fade.
    @param Duration - How long the fade should take, in seconds.
    @param Color - Color to fade to/from.
    @param bShouldFadeAudio - True to fade audio volume along with the alpha of the solid color.
    @param bHoldWhenFinished - True for fade to hold at the ToAlpha until explicitly stopped (e.g. with StopCameraFade)
  **/
  @:ufunction(BlueprintCallable) public function StartCameraFade(FromAlpha : unreal.Float32, ToAlpha : unreal.Float32, Duration : unreal.Float32, Color : unreal.FLinearColor, bShouldFadeAudio : Bool = false, bHoldWhenFinished : Bool = false) : Void;
  
  /**
    Stops camera fading.
  **/
  @:ufunction(BlueprintCallable) public function StopCameraFade() : Void;
  
  /**
    Turns on camera fading at the given opacity. Does not auto-animate, allowing user to animate themselves.
    Call StopCameraFade to turn fading back off.
  **/
  @:ufunction(BlueprintCallable) public function SetManualCameraFade(InFadeAmount : unreal.Float32, Color : unreal.FLinearColor, bInFadeAudio : Bool) : Void;
  
  /**
    Play the indicated CameraAnim on this camera.
    
    @param Anim The animation that should play on this instance.
    @param Rate                          How fast to play the animation. 1.0 is normal.
    @param Scale                         How "intense" to play the animation. 1.0 is normal.
    @param BlendInTime           Time to linearly ramp in.
    @param BlendOutTime          Time to linearly ramp out.
    @param bLoop                         True to loop the animation if it hits the end.
    @param bRandomStartTime      Whether or not to choose a random time to start playing. Useful with bLoop=true and a duration to randomize things like shakes.
    @param Duration                      Optional total playtime for this animation, including blends. 0 means to use animations natural duration, or infinite if looping.
    @param PlaySpace                     Which space to play the animation in.
    @param UserPlaySpaceRot  Custom play space, used when PlaySpace is UserDefined.
    @return The CameraAnim instance, which can be stored to manipulate/stop the anim after the fact.
  **/
  @:ufunction(BlueprintCallable) public function PlayCameraAnim(Anim : unreal.UCameraAnim, Rate : unreal.Float32 = 1.000000, Scale : unreal.Float32 = 1.000000, BlendInTime : unreal.Float32 = 0.000000, BlendOutTime : unreal.Float32 = 0.000000, bLoop : Bool = false, bRandomStartTime : Bool = false, Duration : unreal.Float32 = 0.000000, PlaySpace : unreal.ECameraAnimPlaySpace = CameraLocal, UserPlaySpaceRot : unreal.FRotator) : unreal.UCameraAnimInst;
  
  /**
    Stop playing all instances of the indicated CameraAnim.
    @param bImmediate    True to stop it right now and ignore blend out, false to let it blend out as indicated.
  **/
  @:ufunction(BlueprintCallable) public function StopAllInstancesOfCameraAnim(Anim : unreal.UCameraAnim, bImmediate : Bool = false) : Void;
  
  /**
    Stops the given CameraAnimInst from playing.  The given pointer should be considered invalid after this.
    @param bImmediate    True to stop it right now and ignore blend out, false to let it blend out as indicated.
  **/
  @:ufunction(BlueprintCallable) public function StopCameraAnimInst(AnimInst : unreal.UCameraAnimInst, bImmediate : Bool = false) : Void;
  
  /**
    Stop playing all CameraAnims on this CameraManager.
    @param bImmediate    True to stop it right now and ignore blend out, false to let it blend out as indicated.
  **/
  @:ufunction(BlueprintCallable) public function StopAllCameraAnims(bImmediate : Bool = false) : Void;
  
}
