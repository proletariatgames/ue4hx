/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.eyetracker;

@:umodule("EyeTracker")
@:glueCppIncludes("EyeTrackerFunctionLibrary.h")
@:uextern @:uclass extern class UEyeTrackerFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Returns whether or not the eye-tracking hardware is connected and ready to use. It may or may not actually be in use.
    @return (Boolean)  true if eye tracker is connected and ready to use, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function IsEyeTrackerConnected() : Bool;
  
  /**
    Returns whether or not the eye-tracking hardware is connected and ready to use. It may or may not actually be in use.
    @return true if the connected eye tracker supports per-eye gaze data, false otherwise
  **/
  @:ufunction(BlueprintCallable) static public function IsStereoGazeDataAvailable() : Bool;
  
  /**
    Returns unfied gaze data from the eye tracker. This is a single gaze ray, representing the fusion of both eyes.
    @param PlayerController              The player for whom we are tracking. Null can be ok for some devices, but this may be necessary for others to determine viewport properties, etc.
    @return                                              True if the returned gaze data is valid, false otherwise. A false return is likely to be common (e.g. the when user blinks).
  **/
  @:ufunction(BlueprintCallable) static public function GetGazeData(OutGazeData : unreal.PRef<unreal.eyetracker.FEyeTrackerGazeData>) : Bool;
  
  /**
    Returns stereo gaze data from the eye tracker. This includes a gaze ray per eye, as well as a fixation point.
    @param PlayerController              The player for whom we are tracking. Null can be ok for some devices, but this may be necessary for others to determine viewport properties, etc.
    @return                                              True if the returned gaze data is valid, false otherwise. A false return is likely to be common (e.g. the when user blinks).
  **/
  @:ufunction(BlueprintCallable) static public function GetStereoGazeData(OutGazeData : unreal.PRef<unreal.eyetracker.FEyeTrackerStereoGazeData>) : Bool;
  
  /**
    Specifies player being eye-tracked. This is not necessary for all devices, but is necessary for some to determine viewport properties, etc.
    @param PlayerController              The player for whom we are tracking. Null can be ok for some devices, but this may be necessary for others to determine viewport properties, etc.
  **/
  @:ufunction(BlueprintCallable) static public function SetEyeTrackedPlayer(PlayerController : unreal.APlayerController) : Void;
  
}
