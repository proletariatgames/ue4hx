/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Sound/SoundSubmix.h")
@:uextern @:uclass extern class USoundSubmix extends unreal.UObject {
  
  /**
    Blueprint delegate for when a recorded file is finished exporting.
  **/
  @:uproperty public var OnSubmixRecordedFileDone : unreal.FOnSubmixRecordedFileDone;
  
  /**
    The release time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this submix.
  **/
  @:uproperty public var EnvelopeFollowerReleaseTime : unreal.Int32;
  
  /**
    The attack time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this submix.
  **/
  @:uproperty public var EnvelopeFollowerAttackTime : unreal.Int32;
  
  /**
    TODO: Hide this unless Channel Format is ambisonics. Also, worry about thread safety.
  **/
  @:uproperty public var AmbisonicsPluginSettings : unreal.UAmbisonicsSubmixSettingsBase;
  @:uproperty public var SubmixEffectChain : unreal.TArray<unreal.USoundEffectSubmixPreset>;
  
  /**
    Experimental! Specifies the channel format for the submix. Sources will be mixed at the specified format. Useful for specific effects that need to operate on a specific format.
  **/
  @:uproperty public var ChannelFormat : unreal.ESubmixChannelFormat;
  @:uproperty public var ParentSubmix : unreal.USoundSubmix;
  
  /**
    Child submixes to this sound mix
  **/
  @:uproperty public var ChildSubmixes : unreal.TArray<unreal.USoundSubmix>;
  
  /**
    Start recording the audio from this submix.
  **/
  @:ufunction(BlueprintCallable) @:final public function StartRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExpectedDuration : unreal.Float32) : Void;
  
  /**
    Finish recording the audio from this submix and export it as a wav file or a USoundWave.
  **/
  @:ufunction(BlueprintCallable) @:final public function StopRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExportType : unreal.EAudioRecordingExportType, Name : unreal.FString, Path : unreal.FString, @:opt("None") ExistingSoundWaveToOverwrite : unreal.USoundWave) : Void;
  
  /**
    Start envelope following the submix output. Register with OnSubmixEnvelope to receive envelope follower data in BP.
  **/
  @:ufunction(BlueprintCallable) @:final public function StartEnvelopeFollowing(WorldContextObject : unreal.Const<unreal.UObject>) : Void;
  
  /**
    Start envelope following the submix output. Register with OnSubmixEnvelope to receive envelope follower data in BP.
  **/
  @:ufunction(BlueprintCallable) @:final public function StopEnvelopeFollowing(WorldContextObject : unreal.Const<unreal.UObject>) : Void;
  @:ufunction(BlueprintCallable) @:final public function AddEnvelopeFollowerDelegate(WorldContextObject : unreal.Const<unreal.UObject>, OnSubmixEnvelopeBP : unreal.Const<unreal.PRef<unreal.FOnSubmixEnvelopeBP>>) : Void;
  
}
