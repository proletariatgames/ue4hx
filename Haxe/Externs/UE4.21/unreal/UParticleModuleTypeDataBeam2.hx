/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Particles/TypeData/ParticleModuleTypeDataBeam2.h")
@:uextern @:uclass extern class UParticleModuleTypeDataBeam2 extends unreal.UParticleModuleTypeDataBase {
  @:uproperty public var RenderTessellation : Bool;
  @:uproperty public var RenderLines : Bool;
  @:uproperty public var RenderDirectLine : Bool;
  
  /**
    Beam Rendering Variables.
  **/
  @:uproperty public var RenderGeometry : Bool;
  
  /**
    Tapering scaling
        This is intended to be either a constant, uniform or a ParticleParam.
        If a curve is used, 0/1 mapping of source/target... which could be integrated into
        the taper factor itself, and therefore makes no sense.
  **/
  @:uproperty public var TaperScale : unreal.FRawDistributionFloat;
  
  /**
    Tapering factor, 0 = source of beam, 1 = target
  **/
  @:uproperty public var TaperFactor : unreal.FRawDistributionFloat;
  
  /**
    Tapering mode - one of the following:
    PEBTM_None              - No tapering is applied
    PEBTM_Full              - Taper the beam relative to source-->target, regardless of current beam length
    PEBTM_Partial   - Taper the beam relative to source-->location, 0=source,1=endpoint
  **/
  @:uproperty public var TaperMethod : unreal.EBeamTaperMethod;
  
  /**
    The distance along the X-axis to stretch the beam
    Distance is only used if BeamMethod is PEB2M_Distance
  **/
  @:uproperty public var Distance : unreal.FRawDistributionFloat;
  
  /**
    The name of the emitter to branch from (if mode is PEB2M_Branch)
    MUST BE IN THE SAME PARTICLE SYSTEM!
  **/
  @:uproperty public var BranchParentName : unreal.FName;
  
  /**
    The approach to use for determining the Up vector(s) for the beam.
    
    0 indicates that the Up FVector should be calculated at EVERY point in the beam.
    1 indicates a single Up FVector should be determined at the start of the beam and used at every point.
    N indicates an Up FVector should be calculated every N points of the beam and interpolated between them.
        [NOTE: This mode is currently unsupported.]
  **/
  @:uproperty public var UpVectorStepSize : unreal.Int32;
  
  /**
    If true, there will ALWAYS be a beam...
  **/
  @:uproperty public var bAlwaysOn : Bool;
  
  /**
    Indicates whether the beam should be interpolated.
        <= 0 --> no
        >  0 --> yes (and is equal to the number of interpolation steps that should be taken.
  **/
  @:uproperty public var InterpolationPoints : unreal.Int32;
  
  /**
    The speed at which the beam should move from source to target when firing up.
        '0' indicates instantaneous
  **/
  @:uproperty public var Speed : unreal.Float32;
  
  /**
    The number of live beams
  **/
  @:uproperty public var MaxBeamCount : unreal.Int32;
  
  /**
    The number of sheets to render
  **/
  @:uproperty public var Sheets : unreal.Int32;
  
  /**
    The distance per texture tile.
        1st UV set only. 2nd UV set does not Tile.
  **/
  @:uproperty public var TextureTileDistance : unreal.Float32;
  
  /**
    The number of times to tile the texture along each beam.
    Overridden by TextureTilingDistance if it is > 0.0.
        1st UV set only. 2nd UV set does not Tile.
  **/
  @:uproperty public var TextureTile : unreal.Int32;
  
  /**
    The method with which to form the beam(s). Must be one of the following:
            PEB2M_Distance  - Use the distance property to emit a beam along the X-axis of the emitter.
            PEB2M_Target    - Emit a beam from the source to the supplied target.
            PEB2M_Branch    - Currently unimplemented.
  **/
  @:uproperty public var BeamMethod : unreal.EBeam2Method;
  
}
