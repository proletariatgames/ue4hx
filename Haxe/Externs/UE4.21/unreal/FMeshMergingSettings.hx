/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Mesh merging settings
**/
@:glueCppIncludes("Classes/Engine/MeshMerging.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FMeshMergingSettings {
  
  /**
    Merged material texture atlas resolution
  **/
  @:deprecated @:uproperty public var MergedMaterialAtlasResolution_DEPRECATED : unreal.Int32;
  
  /**
    Whether to export specular maps for material merging
  **/
  @:deprecated @:uproperty public var bExportSpecularMap_DEPRECATED : Bool;
  
  /**
    Whether to export roughness maps for material merging
  **/
  @:deprecated @:uproperty public var bExportRoughnessMap_DEPRECATED : Bool;
  
  /**
    Whether to export metallic maps for material merging
  **/
  @:deprecated @:uproperty public var bExportMetallicMap_DEPRECATED : Bool;
  
  /**
    Whether to export normal maps for material merging
  **/
  @:deprecated @:uproperty public var bExportNormalMap_DEPRECATED : Bool;
  
  /**
    Whether to allow distance field to be computed for this mesh. Disable this to save memory if the merged mesh will only be rendered in the distance.
  **/
  @:uproperty public var bAllowDistanceField : Bool;
  @:uproperty public var bIncludeImposters : Bool;
  
  /**
    Whether or not to use available landscape geometry to cull away invisible triangles
  **/
  @:uproperty public var bUseLandscapeCulling : Bool;
  
  /**
    A given LOD level to export from the source meshes
  **/
  @:uproperty public var SpecificLOD : unreal.Int32;
  @:deprecated @:uproperty public var ExportSpecificLOD_DEPRECATED : unreal.Int32;
  @:uproperty public var LODSelectionType : unreal.EMeshLODSelectionType;
  @:deprecated @:uproperty public var bCalculateCorrectLODModel_DEPRECATED : Bool;
  
  /**
    The gutter (in texels) to add to each sub-chart for our baked-out material for the top mip level
  **/
  @:uproperty public var GutterSize : unreal.Int32;
  
  /**
    Whether to attempt to merge materials that are deemed equivalent. This can cause artifacts in the merged mesh if world position/actor position etc. is used to determine output color.
  **/
  @:uproperty public var bMergeEquivalentMaterials : Bool;
  
  /**
    Whether to attempt to re-use the source mesh's lightmap UVs when baking the material or always generate a new set.
  **/
  @:uproperty public var bReuseMeshLightmapUVs : Bool;
  
  /**
    Whether or not to calculate varying output texture sizes according to their importance in the final atlas texture
  **/
  @:uproperty public var bUseTextureBinning : Bool;
  
  /**
    Whether or not vertex data such as vertex colours should be used when baking out materials
  **/
  @:uproperty public var bUseVertexDataForBakingMaterial : Bool;
  
  /**
    Whether or not vertex data such as vertex colours should be baked into the resulting mesh
  **/
  @:uproperty public var bBakeVertexDataToMesh : Bool;
  
  /**
    Material simplification
  **/
  @:uproperty public var MaterialSettings : unreal.FMaterialProxySettings;
  
  /**
    Whether to merge source materials into one flat material, ONLY available when merging a single LOD level, see LODSelectionType
  **/
  @:uproperty public var bMergeMaterials : Bool;
  
  /**
    Whether to merge physics data (collision primitives)
  **/
  @:uproperty public var bMergePhysicsData : Bool;
  
  /**
    Whether merged mesh should have pivot at world origin, or at first merged component otherwise
  **/
  @:uproperty public var bPivotPointAtZero : Bool;
  
  /**
    Whether we should import vertex colors into merged mesh
  **/
  @:deprecated @:uproperty public var bImportVertexColors_DEPRECATED : Bool;
  
  /**
    Whether or not the lightmap resolution should be computed by summing the lightmap resolutions for the input Mesh Components
  **/
  @:uproperty public var bComputedLightMapResolution : Bool;
  
  /**
    Target lightmap resolution
  **/
  @:uproperty public var TargetLightMapResolution : unreal.Int32;
  
  /**
    Whether to generate lightmap UVs for a merged mesh
  **/
  @:uproperty public var bGenerateLightMapUV : Bool;
  
}
