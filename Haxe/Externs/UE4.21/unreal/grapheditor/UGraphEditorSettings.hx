/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.grapheditor;

/**
  Implements settings for the graph editor.
**/
@:umodule("GraphEditor")
@:glueCppIncludes("GraphEditorSettings.h")
@:uextern @:uclass extern class UGraphEditorSettings extends unreal.UObject {
  @:uproperty public var TracePositionExponent : unreal.Float32;
  
  /**
    How much of a bonus does an exec get for being near the top of the trace stack, and how does that fall off with position?
  **/
  @:uproperty public var TracePositionBonusPeriod : unreal.Float32;
  @:uproperty public var TraceReleaseExponent : unreal.Float32;
  
  /**
    How long does it take to fade from the sustain to the release color
  **/
  @:uproperty public var TraceReleasePeriod : unreal.Float32;
  
  /**
    The thickness to drop down to during release / for unexecuted wires when debugging
  **/
  @:uproperty public var TraceReleaseWireThickness : unreal.Float32;
  
  /**
    The color to fade to for execution wires on release
  **/
  @:uproperty public var TraceReleaseColor : unreal.FLinearColor;
  
  /**
    How long is the sustain color fully visible
  **/
  @:uproperty public var TraceSustainHoldPeriod : unreal.Float32;
  @:uproperty public var TraceSustainWireThickness : unreal.Float32;
  @:uproperty public var TraceSustainColor : unreal.FLinearColor;
  @:uproperty public var TraceDecayExponent : unreal.Float32;
  
  /**
    How long does it take to fade from the attack to the sustain color
  **/
  @:uproperty public var TraceDecayPeriod : unreal.Float32;
  
  /**
    How long is the attack color fully visible
  **/
  @:uproperty public var TraceAttackHoldPeriod : unreal.Float32;
  @:uproperty public var TraceAttackWireThickness : unreal.Float32;
  
  /**
    The color to display execution wires that were just executed
  **/
  @:uproperty public var TraceAttackColor : unreal.FLinearColor;
  
  /**
    The thickness of an execution wire when not debugging
  **/
  @:uproperty public var DefaultExecutionWireThickness : unreal.Float32;
  
  /**
    The thickness of a data wire
  **/
  @:uproperty public var DefaultDataWireThickness : unreal.Float32;
  
  /**
    Preview node title color
  **/
  @:uproperty public var PreviewNodeTitleColor : unreal.FLinearColor;
  
  /**
    Default Comment node title color
  **/
  @:uproperty public var DefaultCommentNodeTitleColor : unreal.FLinearColor;
  
  /**
    Result node title color
  **/
  @:uproperty public var ResultNodeTitleColor : unreal.FLinearColor;
  
  /**
    Exec Sequence node title color
  **/
  @:uproperty public var ExecSequenceNodeTitleColor : unreal.FLinearColor;
  
  /**
    Exec Branch node title color
  **/
  @:uproperty public var ExecBranchNodeTitleColor : unreal.FLinearColor;
  
  /**
    Function Terminator node title color
  **/
  @:uproperty public var FunctionTerminatorNodeTitleColor : unreal.FLinearColor;
  
  /**
    Parent class function call node title color
  **/
  @:uproperty public var ParentFunctionCallNodeTitleColor : unreal.FLinearColor;
  
  /**
    Pure function call node title color
  **/
  @:uproperty public var PureFunctionCallNodeTitleColor : unreal.FLinearColor;
  
  /**
    CallFunction node title color
  **/
  @:uproperty public var FunctionCallNodeTitleColor : unreal.FLinearColor;
  
  /**
    Event node title color
  **/
  @:uproperty public var EventNodeTitleColor : unreal.FLinearColor;
  
  /**
    Index pin type color
  **/
  @:uproperty public var IndexPinTypeColor : unreal.FLinearColor;
  
  /**
    Transform pin type color
  **/
  @:uproperty public var TransformPinTypeColor : unreal.FLinearColor;
  
  /**
    Rotator pin type color
  **/
  @:uproperty public var RotatorPinTypeColor : unreal.FLinearColor;
  
  /**
    Vector pin type color
  **/
  @:uproperty public var VectorPinTypeColor : unreal.FLinearColor;
  
  /**
    Wildcard pin type color
  **/
  @:uproperty public var WildcardPinTypeColor : unreal.FLinearColor;
  
  /**
    Struct pin type color
  **/
  @:uproperty public var StructPinTypeColor : unreal.FLinearColor;
  
  /**
    Text pin type color
  **/
  @:uproperty public var TextPinTypeColor : unreal.FLinearColor;
  
  /**
    String pin type color
  **/
  @:uproperty public var StringPinTypeColor : unreal.FLinearColor;
  
  /**
    Interface pin type color
  **/
  @:uproperty public var InterfacePinTypeColor : unreal.FLinearColor;
  
  /**
    Object pin type color
  **/
  @:uproperty public var ObjectPinTypeColor : unreal.FLinearColor;
  
  /**
    Delegate pin type color
  **/
  @:uproperty public var DelegatePinTypeColor : unreal.FLinearColor;
  
  /**
    Asset Class pin type color
  **/
  @:uproperty public var SoftClassPinTypeColor : unreal.FLinearColor;
  
  /**
    Asset pin type color
  **/
  @:uproperty public var SoftObjectPinTypeColor : unreal.FLinearColor;
  
  /**
    Name pin type color
  **/
  @:uproperty public var NamePinTypeColor : unreal.FLinearColor;
  
  /**
    Floating-point pin type color
  **/
  @:uproperty public var FloatPinTypeColor : unreal.FLinearColor;
  
  /**
    Integer pin type color
  **/
  @:uproperty public var IntPinTypeColor : unreal.FLinearColor;
  
  /**
    Class pin type color
  **/
  @:uproperty public var ClassPinTypeColor : unreal.FLinearColor;
  
  /**
    Byte pin type color
  **/
  @:uproperty public var BytePinTypeColor : unreal.FLinearColor;
  
  /**
    Boolean pin type color
  **/
  @:uproperty public var BooleanPinTypeColor : unreal.FLinearColor;
  
  /**
    Execution pin type color
  **/
  @:uproperty public var ExecutionPinTypeColor : unreal.FLinearColor;
  
  /**
    The default color is used only for types not specifically defined below.  Generally if it's seen, it means another type needs to be defined so that the wire in question can have an appropriate color.
  **/
  @:uproperty public var DefaultPinTypeColor : unreal.FLinearColor;
  
  /**
    The amount that the vertical delta affects the generated tangent handle of splines (when the wire is moving backwards)
  **/
  @:uproperty public var BackwardSplineTangentFromVerticalDelta : unreal.FVector2D;
  
  /**
    The amount that the horizontal delta affects the generated tangent handle of splines (when the wire is moving backwards)
  **/
  @:uproperty public var BackwardSplineTangentFromHorizontalDelta : unreal.FVector2D;
  
  /**
    The maximum value to clamp the absolute value of the vertical distance between endpoints when calculating tangents (when the wire is moving backwards)
  **/
  @:uproperty public var BackwardSplineVerticalDeltaRange : unreal.Float32;
  
  /**
    The maximum value to clamp the absolute value of the horizontal distance between endpoints when calculating tangents (when the wire is moving backwards)
  **/
  @:uproperty public var BackwardSplineHorizontalDeltaRange : unreal.Float32;
  
  /**
    The amount that the vertical delta affects the generated tangent handle of splines (when the wire is moving forward)
  **/
  @:uproperty public var ForwardSplineTangentFromVerticalDelta : unreal.FVector2D;
  
  /**
    The amount that the horizontal delta affects the generated tangent handle of splines (when the wire is moving forward)
  **/
  @:uproperty public var ForwardSplineTangentFromHorizontalDelta : unreal.FVector2D;
  
  /**
    The maximum value to clamp the absolute value of the vertical distance between endpoints when calculating tangents (when the wire is moving forward)
  **/
  @:uproperty public var ForwardSplineVerticalDeltaRange : unreal.Float32;
  
  /**
    The maximum value to clamp the absolute value of the horizontal distance between endpoints when calculating tangents (when the wire is moving forward)
  **/
  @:uproperty public var ForwardSplineHorizontalDeltaRange : unreal.Float32;
  
  /**
    The distance threshold controlling how close the mouse has to be to the spline in order to trigger a hover response
  **/
  @:uproperty public var SplineHoverTolerance : unreal.Float32;
  
  /**
    If enabled, allows splines to be Alt+Clicked to break them or Ctrl+Dragged to move them as if these actions were taking place on the associated pin.
  **/
  @:uproperty public var bTreatSplinesLikePins : Bool;
  
  /**
    The amount of padding towards the node edge (defaults to 10, can be negative to make pins overlap or stick out of a node
  **/
  @:uproperty public var PaddingTowardsNodeEdge : unreal.Float32;
  
  /**
    The amount of horizontal padding towards the center of a node on an output pin (defaults to 10)
  **/
  @:uproperty public var PaddingLeftOfOutput : unreal.Float32;
  
  /**
    The amount of horizontal padding towards the center of a node on an input pin (defaults to 10)
  **/
  @:uproperty public var PaddingRightOfInput : unreal.Float32;
  
  /**
    The amount of padding below a pin (defaults to 4)
  **/
  @:uproperty public var PaddingBelowPin : unreal.Float32;
  
  /**
    The amount of padding above a pin (defaults to 4)
  **/
  @:uproperty public var PaddingAbovePin : unreal.Float32;
  
  /**
    Switch between using the right and middle mouse button for panning (defaults to right)
  **/
  @:uproperty public var PanningMouseButton : unreal.grapheditor.EGraphPanningMouseButton;
  
  /**
    The visual styling to use for graph editor pins (in Blueprints, materials, etc...)
  **/
  @:uproperty public var DataPinStyle : unreal.EBlueprintPinStyleType;
  
}
